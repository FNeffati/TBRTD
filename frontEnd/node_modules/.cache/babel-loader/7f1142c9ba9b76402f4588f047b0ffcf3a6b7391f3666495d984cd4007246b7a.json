{"ast":null,"code":"/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview DataHandler implementation for the combination\n * of error bars and fractions options.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n/*global Dygraph:false */\n\"use strict\";\n\nimport BarsHandler from './bars';\n\n/**\n * @constructor\n * @extends Dygraph.DataHandlers.BarsHandler\n */\nvar FractionsBarsHandler = function () {};\nFractionsBarsHandler.prototype = new BarsHandler();\n\n/** @inheritDoc */\nFractionsBarsHandler.prototype.extractSeries = function (rawData, i, options) {\n  // TODO(danvk): pre-allocate series here.\n  var series = [];\n  var x, y, point, num, den, value, stddev, variance;\n  var mult = 100.0;\n  const seriesLabel = options.get(\"labels\")[i];\n  const logScale = options.getForSeries(\"logscale\", seriesLabel);\n  const sigma = options.getForSeries(\"sigma\", seriesLabel);\n  for (var j = 0; j < rawData.length; j++) {\n    x = rawData[j][0];\n    point = rawData[j][i];\n    if (logScale && point !== null) {\n      // On the log scale, points less than zero do not exist.\n      // This will create a gap in the chart.\n      if (point[0] <= 0 || point[1] <= 0) {\n        point = null;\n      }\n    }\n    // Extract to the unified data format.\n    if (point !== null) {\n      num = point[0];\n      den = point[1];\n      if (num !== null && !isNaN(num)) {\n        value = den ? num / den : 0.0;\n        stddev = den ? sigma * Math.sqrt(value * (1 - value) / den) : 1.0;\n        variance = mult * stddev;\n        y = mult * value;\n        // preserve original values in extras for further filtering\n        series.push([x, y, [y - variance, y + variance, num, den]]);\n      } else {\n        series.push([x, num, [num, num, num, den]]);\n      }\n    } else {\n      series.push([x, null, [null, null, null, null]]);\n    }\n  }\n  return series;\n};\n\n/** @inheritDoc */\nFractionsBarsHandler.prototype.rollingAverage = function (originalData, rollPeriod, options, i) {\n  rollPeriod = Math.min(rollPeriod, originalData.length);\n  var rollingData = [];\n  const seriesLabel = options.get(\"labels\")[i];\n  const sigma = options.getForSeries(\"sigma\", seriesLabel);\n  const wilsonInterval = options.getForSeries(\"wilsonInterval\", seriesLabel);\n  var low, high, i, stddev;\n  var num = 0;\n  var den = 0; // numerator/denominator\n  var mult = 100.0;\n  for (i = 0; i < originalData.length; i++) {\n    num += originalData[i][2][2];\n    den += originalData[i][2][3];\n    if (i - rollPeriod >= 0) {\n      num -= originalData[i - rollPeriod][2][2];\n      den -= originalData[i - rollPeriod][2][3];\n    }\n    var date = originalData[i][0];\n    var value = den ? num / den : 0.0;\n    if (wilsonInterval) {\n      // For more details on this confidence interval, see:\n      // https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval\n      if (den) {\n        var p = value < 0 ? 0 : value,\n          n = den;\n        var pm = sigma * Math.sqrt(p * (1 - p) / n + sigma * sigma / (4 * n * n));\n        var denom = 1 + sigma * sigma / den;\n        low = (p + sigma * sigma / (2 * den) - pm) / denom;\n        high = (p + sigma * sigma / (2 * den) + pm) / denom;\n        rollingData[i] = [date, p * mult, [low * mult, high * mult]];\n      } else {\n        rollingData[i] = [date, 0, [0, 0]];\n      }\n    } else {\n      stddev = den ? sigma * Math.sqrt(value * (1 - value) / den) : 1.0;\n      rollingData[i] = [date, mult * value, [mult * (value - stddev), mult * (value + stddev)]];\n    }\n  }\n  return rollingData;\n};\nexport default FractionsBarsHandler;","map":{"version":3,"names":["BarsHandler","FractionsBarsHandler","prototype","extractSeries","rawData","i","options","series","x","y","point","num","den","value","stddev","variance","mult","seriesLabel","get","logScale","getForSeries","sigma","j","length","isNaN","Math","sqrt","push","rollingAverage","originalData","rollPeriod","min","rollingData","wilsonInterval","low","high","date","p","n","pm","denom"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontend/node_modules/dygraphs/src/datahandler/bars-fractions.js"],"sourcesContent":["/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview DataHandler implementation for the combination\n * of error bars and fractions options.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n/*global Dygraph:false */\n\"use strict\";\n\nimport BarsHandler from './bars';\n\n/**\n * @constructor\n * @extends Dygraph.DataHandlers.BarsHandler\n */\nvar FractionsBarsHandler = function() {\n};\n\nFractionsBarsHandler.prototype = new BarsHandler();\n\n/** @inheritDoc */\nFractionsBarsHandler.prototype.extractSeries = function(rawData, i, options) {\n  // TODO(danvk): pre-allocate series here.\n  var series = [];\n  var x, y, point, num, den, value, stddev, variance;\n  var mult = 100.0;\n  const seriesLabel = options.get(\"labels\")[i];\n  const logScale = options.getForSeries(\"logscale\", seriesLabel);\n  const sigma = options.getForSeries(\"sigma\", seriesLabel);\n  for ( var j = 0; j < rawData.length; j++) {\n    x = rawData[j][0];\n    point = rawData[j][i];\n    if (logScale && point !== null) {\n      // On the log scale, points less than zero do not exist.\n      // This will create a gap in the chart.\n      if (point[0] <= 0 || point[1] <= 0) {\n        point = null;\n      }\n    }\n    // Extract to the unified data format.\n    if (point !== null) {\n      num = point[0];\n      den = point[1];\n      if (num !== null && !isNaN(num)) {\n        value = den ? num / den : 0.0;\n        stddev = den ? sigma * Math.sqrt(value * (1 - value) / den) : 1.0;\n        variance = mult * stddev;\n        y = mult * value;\n        // preserve original values in extras for further filtering\n        series.push([ x, y, [ y - variance, y + variance, num, den ] ]);\n      } else {\n        series.push([ x, num, [ num, num, num, den ] ]);\n      }\n    } else {\n      series.push([ x, null, [ null, null, null, null ] ]);\n    }\n  }\n  return series;\n};\n\n/** @inheritDoc */\nFractionsBarsHandler.prototype.rollingAverage =\n    function(originalData, rollPeriod, options, i) {\n  rollPeriod = Math.min(rollPeriod, originalData.length);\n  var rollingData = [];\n  const seriesLabel = options.get(\"labels\")[i];\n  const sigma = options.getForSeries(\"sigma\", seriesLabel);\n  const wilsonInterval = options.getForSeries(\"wilsonInterval\", seriesLabel);\n\n  var low, high, i, stddev;\n  var num = 0;\n  var den = 0; // numerator/denominator\n  var mult = 100.0;\n  for (i = 0; i < originalData.length; i++) {\n    num += originalData[i][2][2];\n    den += originalData[i][2][3];\n    if (i - rollPeriod >= 0) {\n      num -= originalData[i - rollPeriod][2][2];\n      den -= originalData[i - rollPeriod][2][3];\n    }\n\n    var date = originalData[i][0];\n    var value = den ? num / den : 0.0;\n    if (wilsonInterval) {\n      // For more details on this confidence interval, see:\n      // https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval\n      if (den) {\n        var p = value < 0 ? 0 : value, n = den;\n        var pm = sigma * Math.sqrt(p * (1 - p) / n + sigma * sigma / (4 * n * n));\n        var denom = 1 + sigma * sigma / den;\n        low = (p + sigma * sigma / (2 * den) - pm) / denom;\n        high = (p + sigma * sigma / (2 * den) + pm) / denom;\n        rollingData[i] = [ date, p * mult,\n            [ low * mult, high * mult ] ];\n      } else {\n        rollingData[i] = [ date, 0, [ 0, 0 ] ];\n      }\n    } else {\n      stddev = den ? sigma * Math.sqrt(value * (1 - value) / den) : 1.0;\n      rollingData[i] = [ date, mult * value,\n                         [ mult * (value - stddev), mult * (value + stddev) ] ];\n    }\n  }\n\n  return rollingData;\n};\n\nexport default FractionsBarsHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}