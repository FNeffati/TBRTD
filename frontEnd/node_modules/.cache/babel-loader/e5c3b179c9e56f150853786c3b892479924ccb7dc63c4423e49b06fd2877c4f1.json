{"ast":null,"code":"import React,{useEffect,useState}from'react';import{MapContainer,TileLayer,GeoJSON,Marker}from'react-leaflet';import floridaCounties from'./geojson-fl-counties-fips.json';import\"../styling/FloridaMap.css\";import L from'leaflet';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const FloridaMap=_ref=>{let{date,account_types}=_ref;const[tweetCounts,setTweetCounts]=useState(0);const fetchCounts=()=>{fetch('/get_counts',{'method':'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify([date,account_types])}).then(response=>response.json()).then(data=>{setTweetCounts(data.counts);}).catch(error=>{console.error(error);});};useEffect(()=>{fetchCounts();},[date,account_types]);const normalizeTweetCounts=tweetCounts=>{const maxCount=Math.max(...Object.values(tweetCounts));const normalizedCounts={};for(const county in tweetCounts){normalizedCounts[county]=tweetCounts[county]/maxCount;}return normalizedCounts;};const normalizedTweetCounts=normalizeTweetCounts(tweetCounts);const getColor=normalizedCount=>{const intensity=Math.round(255*normalizedCount);return\"rgb(\".concat(255,\", \",255-intensity,\", \").concat(255-intensity,\")\");};const style=feature=>{const countyName=feature.properties.NAME;const tweetCount=normalizedTweetCounts[countyName]||0;const fillColor=getColor(tweetCount);return{fillColor:fillColor,fillOpacity:0.5,color:'white',weight:5};};const[hoverInfo,setHoverInfo]=useState({show:false,county:'',x:0,y:0});const onEachFeature=(county,layer)=>{layer.on('mouseover',function(e){const mapContainerRect=document.querySelector('.map_div').getBoundingClientRect();const x=e.originalEvent.clientX-mapContainerRect.left;const y=e.originalEvent.clientY-mapContainerRect.top;setHoverInfo({show:true,county:county.properties.NAME,x:x,y:y});});layer.on('mouseout',function(){setHoverInfo({show:false,county:'',x:0,y:0});});};const countyMarkers=floridaCounties.features.map((feature,index)=>{const countyName=feature.properties.NAME;const coordinates=feature.geometry.coordinates[0];// Assuming first set of coordinates is outer boundary\nconst centroid=calculateCentroid(coordinates);// Function to calculate centroid\nreturn/*#__PURE__*/_jsx(Marker,{position:[centroid[0],centroid[1]]// Corrected order: [latitude, longitude]\n,icon:L.divIcon({className:'county-label',html:\"<div>\".concat(countyName,\"</div>\")})},index);});return/*#__PURE__*/_jsxs(\"div\",{className:\"map_div\",children:[/*#__PURE__*/_jsxs(MapContainer,{center:[27.766279,-82.686783],zoom:8,style:{height:650,width:'100%'},children:[/*#__PURE__*/_jsx(TileLayer,{url:\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}),/*#__PURE__*/_jsx(GeoJSON,{data:floridaCounties,style:style,onEachFeature:onEachFeature}),countyMarkers]}),hoverInfo.show&&/*#__PURE__*/_jsxs(\"div\",{className:\"map-hover-popup\",style:{left:hoverInfo.x+900,top:hoverInfo.y+200},children:[hoverInfo.county,\" - Tweets: \",tweetCounts[hoverInfo.county]||0]})]});};// Function to calculate centroid of polygon coordinates\nconst calculateCentroid=coordinates=>{if(!coordinates||!Array.isArray(coordinates)||coordinates.length===0){return[0,0];// Return default coordinates if no valid coordinates are provided\n}let centroid=[0,0];const numPoints=coordinates.length;for(let i=0;i<numPoints;i++){if(!coordinates[i]||!Array.isArray(coordinates[i])||coordinates[i].length!==2){continue;// Skip invalid coordinates\n}centroid[0]+=coordinates[i][1];// Latitude\ncentroid[1]+=coordinates[i][0];// Longitude\n}centroid[0]/=numPoints;centroid[1]/=numPoints;return centroid;};export default FloridaMap;","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","GeoJSON","Marker","floridaCounties","L","jsx","_jsx","jsxs","_jsxs","FloridaMap","_ref","date","account_types","tweetCounts","setTweetCounts","fetchCounts","fetch","headers","body","JSON","stringify","then","response","json","data","counts","catch","error","console","normalizeTweetCounts","maxCount","Math","max","Object","values","normalizedCounts","county","normalizedTweetCounts","getColor","normalizedCount","intensity","round","concat","style","feature","countyName","properties","NAME","tweetCount","fillColor","fillOpacity","color","weight","hoverInfo","setHoverInfo","show","x","y","onEachFeature","layer","on","e","mapContainerRect","document","querySelector","getBoundingClientRect","originalEvent","clientX","left","clientY","top","countyMarkers","features","map","index","coordinates","geometry","centroid","calculateCentroid","position","icon","divIcon","className","html","children","center","zoom","height","width","url","Array","isArray","length","numPoints","i"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontend/src/components/FloridaMap.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {MapContainer, TileLayer, GeoJSON, Marker} from 'react-leaflet';\nimport floridaCounties from './geojson-fl-counties-fips.json';\nimport \"../styling/FloridaMap.css\";\nimport L from 'leaflet';\n\nconst FloridaMap = ({ date, account_types }) => {\n\n    const [tweetCounts, setTweetCounts] = useState(0)\n    const fetchCounts = () => {\n        fetch('/get_counts',\n            {\n                'method':'POST',\n                headers : {\n                    'Content-Type':'application/json'\n                },\n                body: JSON.stringify([date, account_types])\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                setTweetCounts(data.counts)\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    };\n\n    useEffect(() => {\n        fetchCounts();\n    }, [date, account_types]);\n\n\n    const normalizeTweetCounts = (tweetCounts) => {\n        const maxCount = Math.max(...Object.values(tweetCounts));\n        const normalizedCounts = {};\n\n        for (const county in tweetCounts) {\n            normalizedCounts[county] = tweetCounts[county] / maxCount;\n        }\n\n        return normalizedCounts;\n    };\n\n    const normalizedTweetCounts = normalizeTweetCounts(tweetCounts);\n\n    const getColor = (normalizedCount) => {\n        const intensity = Math.round(255 * normalizedCount);\n        return `rgb(${255}, ${255 - intensity}, ${255 - intensity})`;\n    };\n\n    const style = (feature) => {\n        const countyName = feature.properties.NAME;\n        const tweetCount = normalizedTweetCounts[countyName] || 0;\n        const fillColor = getColor(tweetCount);\n\n        return {\n            fillColor: fillColor,\n            fillOpacity: 0.5,\n            color: 'white',\n            weight: 5,\n        };\n    };\n    const [hoverInfo, setHoverInfo] = useState({ show: false, county: '', x: 0, y: 0 });\n    const onEachFeature = (county, layer) => {\n        layer.on('mouseover', function (e) {\n            const mapContainerRect = document.querySelector('.map_div').getBoundingClientRect();\n            const x = e.originalEvent.clientX - mapContainerRect.left;\n            const y = e.originalEvent.clientY - mapContainerRect.top;\n            setHoverInfo({ show: true, county: county.properties.NAME, x: x, y: y });\n        });\n\n        layer.on('mouseout', function () {\n            setHoverInfo({ show: false, county: '', x: 0, y: 0 });\n        });\n    };\n\n    const countyMarkers = floridaCounties.features.map((feature, index) => {\n        const countyName = feature.properties.NAME;\n        const coordinates = feature.geometry.coordinates[0]; // Assuming first set of coordinates is outer boundary\n        const centroid = calculateCentroid(coordinates); // Function to calculate centroid\n\n        return (\n            <Marker\n                key={index}\n                position={[centroid[0], centroid[1]]} // Corrected order: [latitude, longitude]\n                icon={L.divIcon({\n                    className: 'county-label',\n                    html: `<div>${countyName}</div>`\n                })}\n            />\n        );\n    });\n\n    return (\n        <div className=\"map_div\">\n            <MapContainer center={[27.766279, -82.686783]} zoom={8} style={{ height: 650, width: '100%' }}>\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n                <GeoJSON\n                    data={floridaCounties}\n                    style={style}\n                    onEachFeature={onEachFeature}\n                />\n                {countyMarkers}\n            </MapContainer>\n            {hoverInfo.show && (\n                <div\n                    className=\"map-hover-popup\"\n                    style={{ left: hoverInfo.x+900, top: hoverInfo.y+200 }}\n                >\n                    {hoverInfo.county} - Tweets: {tweetCounts[hoverInfo.county] || 0}\n                </div>\n            )}\n        </div>\n    );\n};\n\n// Function to calculate centroid of polygon coordinates\nconst calculateCentroid = (coordinates) => {\n    if (!coordinates || !Array.isArray(coordinates) || coordinates.length === 0) {\n        return [0, 0]; // Return default coordinates if no valid coordinates are provided\n    }\n\n    let centroid = [0, 0];\n    const numPoints = coordinates.length;\n\n    for (let i = 0; i < numPoints; i++) {\n        if (!coordinates[i] || !Array.isArray(coordinates[i]) || coordinates[i].length !== 2) {\n            continue; // Skip invalid coordinates\n        }\n\n        centroid[0] += coordinates[i][1]; // Latitude\n        centroid[1] += coordinates[i][0]; // Longitude\n    }\n\n    centroid[0] /= numPoints;\n    centroid[1] /= numPoints;\n\n    return centroid;\n};\n\n\n\n\nexport default FloridaMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}