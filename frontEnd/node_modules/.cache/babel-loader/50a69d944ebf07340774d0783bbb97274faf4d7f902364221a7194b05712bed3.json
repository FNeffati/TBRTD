{"ast":null,"code":"/**\n * @license\n * Copyright 2011 Robert Konigsberg (konigsberg@google.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview The default interaction model for Dygraphs. This is kept out\n * of dygraph.js for better navigability.\n * @author Robert Konigsberg (konigsberg@google.com)\n */\n\n/*global Dygraph:false */\n\"use strict\";\n\nimport * as utils from './dygraph-utils';\n\n/**\n * You can drag this many pixels past the edge of the chart and still have it\n * be considered a zoom. This makes it easier to zoom to the exact edge of the\n * chart, a fairly common operation.\n */\nvar DRAG_EDGE_MARGIN = 100;\n\n/**\n * A collection of functions to facilitate build custom interaction models.\n * @class\n */\nvar DygraphInteraction = {};\n\n/**\n * Checks whether the beginning & ending of an event were close enough that it\n * should be considered a click. If it should, dispatch appropriate events.\n * Returns true if the event was treated as a click.\n *\n * @param {Event} event\n * @param {Dygraph} g\n * @param {Object} context\n */\nDygraphInteraction.maybeTreatMouseOpAsClick = function (event, g, context) {\n  context.dragEndX = utils.dragGetX_(event, context);\n  context.dragEndY = utils.dragGetY_(event, context);\n  var regionWidth = Math.abs(context.dragEndX - context.dragStartX);\n  var regionHeight = Math.abs(context.dragEndY - context.dragStartY);\n  if (regionWidth < 2 && regionHeight < 2 && g.lastx_ !== undefined && g.lastx_ !== null) {\n    DygraphInteraction.treatMouseOpAsClick(g, event, context);\n  }\n  context.regionWidth = regionWidth;\n  context.regionHeight = regionHeight;\n};\n\n/**\n * Called in response to an interaction model operation that\n * should start the default panning behavior.\n *\n * It's used in the default callback for \"mousedown\" operations.\n * Custom interaction model builders can use it to provide the default\n * panning behavior.\n *\n * @param {Event} event the event object which led to the startPan call.\n * @param {Dygraph} g The dygraph on which to act.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.startPan = function (event, g, context) {\n  var i, axis;\n  context.isPanning = true;\n  var xRange = g.xAxisRange();\n  if (g.getOptionForAxis(\"logscale\", \"x\")) {\n    context.initialLeftmostDate = utils.log10(xRange[0]);\n    context.dateRange = utils.log10(xRange[1]) - utils.log10(xRange[0]);\n  } else {\n    context.initialLeftmostDate = xRange[0];\n    context.dateRange = xRange[1] - xRange[0];\n  }\n  context.xUnitsPerPixel = context.dateRange / (g.plotter_.area.w - 1);\n  if (g.getNumericOption(\"panEdgeFraction\")) {\n    var maxXPixelsToDraw = g.width_ * g.getNumericOption(\"panEdgeFraction\");\n    var xExtremes = g.xAxisExtremes(); // I REALLY WANT TO CALL THIS xTremes!\n\n    var boundedLeftX = g.toDomXCoord(xExtremes[0]) - maxXPixelsToDraw;\n    var boundedRightX = g.toDomXCoord(xExtremes[1]) + maxXPixelsToDraw;\n    var boundedLeftDate = g.toDataXCoord(boundedLeftX);\n    var boundedRightDate = g.toDataXCoord(boundedRightX);\n    context.boundedDates = [boundedLeftDate, boundedRightDate];\n    var boundedValues = [];\n    var maxYPixelsToDraw = g.height_ * g.getNumericOption(\"panEdgeFraction\");\n    for (i = 0; i < g.axes_.length; i++) {\n      axis = g.axes_[i];\n      var yExtremes = axis.extremeRange;\n      var boundedTopY = g.toDomYCoord(yExtremes[0], i) + maxYPixelsToDraw;\n      var boundedBottomY = g.toDomYCoord(yExtremes[1], i) - maxYPixelsToDraw;\n      var boundedTopValue = g.toDataYCoord(boundedTopY, i);\n      var boundedBottomValue = g.toDataYCoord(boundedBottomY, i);\n      boundedValues[i] = [boundedTopValue, boundedBottomValue];\n    }\n    context.boundedValues = boundedValues;\n  } else {\n    // undo effect if it was once set\n    context.boundedDates = null;\n    context.boundedValues = null;\n  }\n\n  // Record the range of each y-axis at the start of the drag.\n  // If any axis has a valueRange, then we want a 2D pan.\n  // We can't store data directly in g.axes_, because it does not belong to us\n  // and could change out from under us during a pan (say if there's a data\n  // update).\n  context.is2DPan = false;\n  context.axes = [];\n  for (i = 0; i < g.axes_.length; i++) {\n    axis = g.axes_[i];\n    var axis_data = {};\n    var yRange = g.yAxisRange(i);\n    // TODO(konigsberg): These values should be in |context|.\n    // In log scale, initialTopValue, dragValueRange and unitsPerPixel are log scale.\n    var logscale = g.attributes_.getForAxis(\"logscale\", i);\n    if (logscale) {\n      axis_data.initialTopValue = utils.log10(yRange[1]);\n      axis_data.dragValueRange = utils.log10(yRange[1]) - utils.log10(yRange[0]);\n    } else {\n      axis_data.initialTopValue = yRange[1];\n      axis_data.dragValueRange = yRange[1] - yRange[0];\n    }\n    axis_data.unitsPerPixel = axis_data.dragValueRange / (g.plotter_.area.h - 1);\n    context.axes.push(axis_data);\n\n    // While calculating axes, set 2dpan.\n    if (axis.valueRange) context.is2DPan = true;\n  }\n};\n\n/**\n * Called in response to an interaction model operation that\n * responds to an event that pans the view.\n *\n * It's used in the default callback for \"mousemove\" operations.\n * Custom interaction model builders can use it to provide the default\n * panning behavior.\n *\n * @param {Event} event the event object which led to the movePan call.\n * @param {Dygraph} g The dygraph on which to act.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.movePan = function (event, g, context) {\n  context.dragEndX = utils.dragGetX_(event, context);\n  context.dragEndY = utils.dragGetY_(event, context);\n  var minDate = context.initialLeftmostDate - (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n  if (context.boundedDates) {\n    minDate = Math.max(minDate, context.boundedDates[0]);\n  }\n  var maxDate = minDate + context.dateRange;\n  if (context.boundedDates) {\n    if (maxDate > context.boundedDates[1]) {\n      // Adjust minDate, and recompute maxDate.\n      minDate = minDate - (maxDate - context.boundedDates[1]);\n      maxDate = minDate + context.dateRange;\n    }\n  }\n  if (g.getOptionForAxis(\"logscale\", \"x\")) {\n    g.dateWindow_ = [Math.pow(utils.LOG_SCALE, minDate), Math.pow(utils.LOG_SCALE, maxDate)];\n  } else {\n    g.dateWindow_ = [minDate, maxDate];\n  }\n\n  // y-axis scaling is automatic unless this is a full 2D pan.\n  if (context.is2DPan) {\n    var pixelsDragged = context.dragEndY - context.dragStartY;\n\n    // Adjust each axis appropriately.\n    for (var i = 0; i < g.axes_.length; i++) {\n      var axis = g.axes_[i];\n      var axis_data = context.axes[i];\n      var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n      var boundedValue = context.boundedValues ? context.boundedValues[i] : null;\n\n      // In log scale, maxValue and minValue are the logs of those values.\n      var maxValue = axis_data.initialTopValue + unitsDragged;\n      if (boundedValue) {\n        maxValue = Math.min(maxValue, boundedValue[1]);\n      }\n      var minValue = maxValue - axis_data.dragValueRange;\n      if (boundedValue) {\n        if (minValue < boundedValue[0]) {\n          // Adjust maxValue, and recompute minValue.\n          maxValue = maxValue - (minValue - boundedValue[0]);\n          minValue = maxValue - axis_data.dragValueRange;\n        }\n      }\n      if (g.attributes_.getForAxis(\"logscale\", i)) {\n        axis.valueRange = [Math.pow(utils.LOG_SCALE, minValue), Math.pow(utils.LOG_SCALE, maxValue)];\n      } else {\n        axis.valueRange = [minValue, maxValue];\n      }\n    }\n  }\n  g.drawGraph_(false);\n};\n\n/**\n * Called in response to an interaction model operation that\n * responds to an event that ends panning.\n *\n * It's used in the default callback for \"mouseup\" operations.\n * Custom interaction model builders can use it to provide the default\n * panning behavior.\n *\n * @param {Event} event the event object which led to the endPan call.\n * @param {Dygraph} g The dygraph on which to act.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.endPan = DygraphInteraction.maybeTreatMouseOpAsClick;\n\n/**\n * Called in response to an interaction model operation that\n * responds to an event that starts zooming.\n *\n * It's used in the default callback for \"mousedown\" operations.\n * Custom interaction model builders can use it to provide the default\n * zooming behavior.\n *\n * @param {Event} event the event object which led to the startZoom call.\n * @param {Dygraph} g The dygraph on which to act.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.startZoom = function (event, g, context) {\n  context.isZooming = true;\n  context.zoomMoved = false;\n};\n\n/**\n * Called in response to an interaction model operation that\n * responds to an event that defines zoom boundaries.\n *\n * It's used in the default callback for \"mousemove\" operations.\n * Custom interaction model builders can use it to provide the default\n * zooming behavior.\n *\n * @param {Event} event the event object which led to the moveZoom call.\n * @param {Dygraph} g The dygraph on which to act.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.moveZoom = function (event, g, context) {\n  context.zoomMoved = true;\n  context.dragEndX = utils.dragGetX_(event, context);\n  context.dragEndY = utils.dragGetY_(event, context);\n  var xDelta = Math.abs(context.dragStartX - context.dragEndX);\n  var yDelta = Math.abs(context.dragStartY - context.dragEndY);\n\n  // drag direction threshold for y axis is twice as large as x axis\n  context.dragDirection = xDelta < yDelta / 2 ? utils.VERTICAL : utils.HORIZONTAL;\n  g.drawZoomRect_(context.dragDirection, context.dragStartX, context.dragEndX, context.dragStartY, context.dragEndY, context.prevDragDirection, context.prevEndX, context.prevEndY);\n  context.prevEndX = context.dragEndX;\n  context.prevEndY = context.dragEndY;\n  context.prevDragDirection = context.dragDirection;\n};\n\n/**\n * TODO(danvk): move this logic into dygraph.js\n * @param {Dygraph} g\n * @param {Event} event\n * @param {Object} context\n */\nDygraphInteraction.treatMouseOpAsClick = function (g, event, context) {\n  var clickCallback = g.getFunctionOption('clickCallback');\n  var pointClickCallback = g.getFunctionOption('pointClickCallback');\n  var selectedPoint = null;\n\n  // Find out if the click occurs on a point.\n  var closestIdx = -1;\n  var closestDistance = Number.MAX_VALUE;\n\n  // check if the click was on a particular point.\n  for (var i = 0; i < g.selPoints_.length; i++) {\n    var p = g.selPoints_[i];\n    var distance = Math.pow(p.canvasx - context.dragEndX, 2) + Math.pow(p.canvasy - context.dragEndY, 2);\n    if (!isNaN(distance) && (closestIdx == -1 || distance < closestDistance)) {\n      closestDistance = distance;\n      closestIdx = i;\n    }\n  }\n\n  // Allow any click within two pixels of the dot.\n  var radius = g.getNumericOption('highlightCircleSize') + 2;\n  if (closestDistance <= radius * radius) {\n    selectedPoint = g.selPoints_[closestIdx];\n  }\n  if (selectedPoint) {\n    var e = {\n      cancelable: true,\n      point: selectedPoint,\n      canvasx: context.dragEndX,\n      canvasy: context.dragEndY\n    };\n    var defaultPrevented = g.cascadeEvents_('pointClick', e);\n    if (defaultPrevented) {\n      // Note: this also prevents click / clickCallback from firing.\n      return;\n    }\n    if (pointClickCallback) {\n      pointClickCallback.call(g, event, selectedPoint);\n    }\n  }\n  var e = {\n    cancelable: true,\n    xval: g.lastx_,\n    // closest point by x value\n    pts: g.selPoints_,\n    canvasx: context.dragEndX,\n    canvasy: context.dragEndY\n  };\n  if (!g.cascadeEvents_('click', e)) {\n    if (clickCallback) {\n      // TODO(danvk): pass along more info about the points, e.g. 'x'\n      clickCallback.call(g, event, g.lastx_, g.selPoints_);\n    }\n  }\n};\n\n/**\n * Called in response to an interaction model operation that\n * responds to an event that performs a zoom based on previously defined\n * bounds..\n *\n * It's used in the default callback for \"mouseup\" operations.\n * Custom interaction model builders can use it to provide the default\n * zooming behavior.\n *\n * @param {Event} event the event object which led to the endZoom call.\n * @param {Dygraph} g The dygraph on which to end the zoom.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.endZoom = function (event, g, context) {\n  g.clearZoomRect_();\n  context.isZooming = false;\n  DygraphInteraction.maybeTreatMouseOpAsClick(event, g, context);\n\n  // The zoom rectangle is visibly clipped to the plot area, so its behavior\n  // should be as well.\n  // See http://code.google.com/p/dygraphs/issues/detail?id=280\n  var plotArea = g.getArea();\n  if (context.regionWidth >= 10 && context.dragDirection == utils.HORIZONTAL) {\n    var left = Math.min(context.dragStartX, context.dragEndX),\n      right = Math.max(context.dragStartX, context.dragEndX);\n    left = Math.max(left, plotArea.x);\n    right = Math.min(right, plotArea.x + plotArea.w);\n    if (left < right) {\n      g.doZoomX_(left, right);\n    }\n    context.cancelNextDblclick = true;\n  } else if (context.regionHeight >= 10 && context.dragDirection == utils.VERTICAL) {\n    var top = Math.min(context.dragStartY, context.dragEndY),\n      bottom = Math.max(context.dragStartY, context.dragEndY);\n    top = Math.max(top, plotArea.y);\n    bottom = Math.min(bottom, plotArea.y + plotArea.h);\n    if (top < bottom) {\n      g.doZoomY_(top, bottom);\n    }\n    context.cancelNextDblclick = true;\n  }\n  context.dragStartX = null;\n  context.dragStartY = null;\n};\n\n/**\n * @private\n */\nDygraphInteraction.startTouch = function (event, g, context) {\n  event.preventDefault(); // touch browsers are all nice.\n  if (event.touches.length > 1) {\n    // If the user ever puts two fingers down, it's not a double tap.\n    context.startTimeForDoubleTapMs = null;\n  }\n  var touches = [];\n  for (var i = 0; i < event.touches.length; i++) {\n    var t = event.touches[i];\n    var rect = t.target.getBoundingClientRect();\n    // we dispense with 'dragGetX_' because all touchBrowsers support pageX\n    touches.push({\n      pageX: t.pageX,\n      pageY: t.pageY,\n      dataX: g.toDataXCoord(t.clientX - rect.left),\n      dataY: g.toDataYCoord(t.clientY - rect.top)\n      // identifier: t.identifier\n    });\n  }\n  context.initialTouches = touches;\n  if (touches.length == 1) {\n    // This is just a swipe.\n    context.initialPinchCenter = touches[0];\n    context.touchDirections = {\n      x: true,\n      y: true\n    };\n  } else if (touches.length >= 2) {\n    // It's become a pinch!\n    // In case there are 3+ touches, we ignore all but the \"first\" two.\n\n    // only screen coordinates can be averaged (data coords could be log scale).\n    context.initialPinchCenter = {\n      pageX: 0.5 * (touches[0].pageX + touches[1].pageX),\n      pageY: 0.5 * (touches[0].pageY + touches[1].pageY),\n      // TODO(danvk): remove\n      dataX: 0.5 * (touches[0].dataX + touches[1].dataX),\n      dataY: 0.5 * (touches[0].dataY + touches[1].dataY)\n    };\n\n    // Make pinches in a 45-degree swath around either axis 1-dimensional zooms.\n    var initialAngle = 180 / Math.PI * Math.atan2(context.initialPinchCenter.pageY - touches[0].pageY, touches[0].pageX - context.initialPinchCenter.pageX);\n\n    // use symmetry to get it into the first quadrant.\n    initialAngle = Math.abs(initialAngle);\n    if (initialAngle > 90) initialAngle = 90 - initialAngle;\n    context.touchDirections = {\n      x: initialAngle < 90 - 45 / 2,\n      y: initialAngle > 45 / 2\n    };\n  }\n\n  // save the full x & y ranges.\n  context.initialRange = {\n    x: g.xAxisRange(),\n    y: g.yAxisRange()\n  };\n};\n\n/**\n * @private\n */\nDygraphInteraction.moveTouch = function (event, g, context) {\n  // If the tap moves, then it's definitely not part of a double-tap.\n  context.startTimeForDoubleTapMs = null;\n  var i,\n    touches = [];\n  for (i = 0; i < event.touches.length; i++) {\n    var t = event.touches[i];\n    touches.push({\n      pageX: t.pageX,\n      pageY: t.pageY\n    });\n  }\n  var initialTouches = context.initialTouches;\n  var c_now;\n\n  // old and new centers.\n  var c_init = context.initialPinchCenter;\n  if (touches.length == 1) {\n    c_now = touches[0];\n  } else {\n    c_now = {\n      pageX: 0.5 * (touches[0].pageX + touches[1].pageX),\n      pageY: 0.5 * (touches[0].pageY + touches[1].pageY)\n    };\n  }\n\n  // this is the \"swipe\" component\n  // we toss it out for now, but could use it in the future.\n  var swipe = {\n    pageX: c_now.pageX - c_init.pageX,\n    pageY: c_now.pageY - c_init.pageY\n  };\n  var dataWidth = context.initialRange.x[1] - context.initialRange.x[0];\n  var dataHeight = context.initialRange.y[0] - context.initialRange.y[1];\n  swipe.dataX = swipe.pageX / g.plotter_.area.w * dataWidth;\n  swipe.dataY = swipe.pageY / g.plotter_.area.h * dataHeight;\n  var xScale, yScale;\n\n  // The residual bits are usually split into scale & rotate bits, but we split\n  // them into x-scale and y-scale bits.\n  if (touches.length == 1) {\n    xScale = 1.0;\n    yScale = 1.0;\n  } else if (touches.length >= 2) {\n    var initHalfWidth = initialTouches[1].pageX - c_init.pageX;\n    xScale = (touches[1].pageX - c_now.pageX) / initHalfWidth;\n    var initHalfHeight = initialTouches[1].pageY - c_init.pageY;\n    yScale = (touches[1].pageY - c_now.pageY) / initHalfHeight;\n  }\n\n  // Clip scaling to [1/8, 8] to prevent too much blowup.\n  xScale = Math.min(8, Math.max(0.125, xScale));\n  yScale = Math.min(8, Math.max(0.125, yScale));\n  var didZoom = false;\n  if (context.touchDirections.x) {\n    var cFactor = c_init.dataX - swipe.dataX / xScale;\n    g.dateWindow_ = [cFactor + (context.initialRange.x[0] - c_init.dataX) / xScale, cFactor + (context.initialRange.x[1] - c_init.dataX) / xScale];\n    didZoom = true;\n  }\n  if (context.touchDirections.y) {\n    for (i = 0; i < 1 /*g.axes_.length*/; i++) {\n      var axis = g.axes_[i];\n      var logscale = g.attributes_.getForAxis(\"logscale\", i);\n      if (logscale) {\n        // TODO(danvk): implement\n      } else {\n        var cFactor = c_init.dataY - swipe.dataY / yScale;\n        axis.valueRange = [cFactor + (context.initialRange.y[0] - c_init.dataY) / yScale, cFactor + (context.initialRange.y[1] - c_init.dataY) / yScale];\n        didZoom = true;\n      }\n    }\n  }\n  g.drawGraph_(false);\n\n  // We only call zoomCallback on zooms, not pans, to mirror desktop behavior.\n  if (didZoom && touches.length > 1 && g.getFunctionOption('zoomCallback')) {\n    var viewWindow = g.xAxisRange();\n    g.getFunctionOption(\"zoomCallback\").call(g, viewWindow[0], viewWindow[1], g.yAxisRanges());\n  }\n};\n\n/**\n * @private\n */\nDygraphInteraction.endTouch = function (event, g, context) {\n  if (event.touches.length !== 0) {\n    // this is effectively a \"reset\"\n    DygraphInteraction.startTouch(event, g, context);\n  } else if (event.changedTouches.length == 1) {\n    // Could be part of a \"double tap\"\n    // The heuristic here is that it's a double-tap if the two touchend events\n    // occur within 500ms and within a 50x50 pixel box.\n    var now = new Date().getTime();\n    var t = event.changedTouches[0];\n    if (context.startTimeForDoubleTapMs && now - context.startTimeForDoubleTapMs < 500 && context.doubleTapX && Math.abs(context.doubleTapX - t.screenX) < 50 && context.doubleTapY && Math.abs(context.doubleTapY - t.screenY) < 50) {\n      g.resetZoom();\n    } else {\n      context.startTimeForDoubleTapMs = now;\n      context.doubleTapX = t.screenX;\n      context.doubleTapY = t.screenY;\n    }\n  }\n};\n\n// Determine the distance from x to [left, right].\nvar distanceFromInterval = function (x, left, right) {\n  if (x < left) {\n    return left - x;\n  } else if (x > right) {\n    return x - right;\n  } else {\n    return 0;\n  }\n};\n\n/**\n * Returns the number of pixels by which the event happens from the nearest\n * edge of the chart. For events in the interior of the chart, this returns zero.\n */\nvar distanceFromChart = function (event, g) {\n  var chartPos = utils.findPos(g.canvas_);\n  var box = {\n    left: chartPos.x,\n    right: chartPos.x + g.canvas_.offsetWidth,\n    top: chartPos.y,\n    bottom: chartPos.y + g.canvas_.offsetHeight\n  };\n  var pt = {\n    x: utils.pageX(event),\n    y: utils.pageY(event)\n  };\n  var dx = distanceFromInterval(pt.x, box.left, box.right),\n    dy = distanceFromInterval(pt.y, box.top, box.bottom);\n  return Math.max(dx, dy);\n};\n\n/**\n * Default interation model for dygraphs. You can refer to specific elements of\n * this when constructing your own interaction model, e.g.:\n * g.updateOptions( {\n *   interactionModel: {\n *     mousedown: DygraphInteraction.defaultInteractionModel.mousedown\n *   }\n * } );\n */\nDygraphInteraction.defaultModel = {\n  // Track the beginning of drag events\n  mousedown: function (event, g, context) {\n    // Right-click should not initiate a zoom.\n    if (event.button && event.button == 2) return;\n    context.initializeMouseDown(event, g, context);\n    if (event.altKey || event.shiftKey) {\n      DygraphInteraction.startPan(event, g, context);\n    } else {\n      DygraphInteraction.startZoom(event, g, context);\n    }\n\n    // Note: we register mousemove/mouseup on document to allow some leeway for\n    // events to move outside of the chart. Interaction model events get\n    // registered on the canvas, which is too small to allow this.\n    var mousemove = function (event) {\n      if (context.isZooming) {\n        // When the mouse moves >200px from the chart edge, cancel the zoom.\n        var d = distanceFromChart(event, g);\n        if (d < DRAG_EDGE_MARGIN) {\n          DygraphInteraction.moveZoom(event, g, context);\n        } else {\n          if (context.dragEndX !== null) {\n            context.dragEndX = null;\n            context.dragEndY = null;\n            g.clearZoomRect_();\n          }\n        }\n      } else if (context.isPanning) {\n        DygraphInteraction.movePan(event, g, context);\n      }\n    };\n    var mouseup = function (event) {\n      if (context.isZooming) {\n        if (context.dragEndX !== null) {\n          DygraphInteraction.endZoom(event, g, context);\n        } else {\n          DygraphInteraction.maybeTreatMouseOpAsClick(event, g, context);\n        }\n      } else if (context.isPanning) {\n        DygraphInteraction.endPan(event, g, context);\n      }\n      utils.removeEvent(document, 'mousemove', mousemove);\n      utils.removeEvent(document, 'mouseup', mouseup);\n      context.destroy();\n    };\n    g.addAndTrackEvent(document, 'mousemove', mousemove);\n    g.addAndTrackEvent(document, 'mouseup', mouseup);\n  },\n  willDestroyContextMyself: true,\n  touchstart: function (event, g, context) {\n    DygraphInteraction.startTouch(event, g, context);\n  },\n  touchmove: function (event, g, context) {\n    DygraphInteraction.moveTouch(event, g, context);\n  },\n  touchend: function (event, g, context) {\n    DygraphInteraction.endTouch(event, g, context);\n  },\n  // Disable zooming out if panning.\n  dblclick: function (event, g, context) {\n    if (context.cancelNextDblclick) {\n      context.cancelNextDblclick = false;\n      return;\n    }\n\n    // Give plugins a chance to grab this event.\n    var e = {\n      canvasx: context.dragEndX,\n      canvasy: context.dragEndY,\n      cancelable: true\n    };\n    if (g.cascadeEvents_('dblclick', e)) {\n      return;\n    }\n    if (event.altKey || event.shiftKey) {\n      return;\n    }\n    g.resetZoom();\n  }\n};\n\n/*\nDygraph.DEFAULT_ATTRS.interactionModel = DygraphInteraction.defaultModel;\n\n// old ways of accessing these methods/properties\nDygraph.defaultInteractionModel = DygraphInteraction.defaultModel;\nDygraph.endZoom = DygraphInteraction.endZoom;\nDygraph.moveZoom = DygraphInteraction.moveZoom;\nDygraph.startZoom = DygraphInteraction.startZoom;\nDygraph.endPan = DygraphInteraction.endPan;\nDygraph.movePan = DygraphInteraction.movePan;\nDygraph.startPan = DygraphInteraction.startPan;\n*/\n\nDygraphInteraction.nonInteractiveModel_ = {\n  mousedown: function (event, g, context) {\n    context.initializeMouseDown(event, g, context);\n  },\n  mouseup: DygraphInteraction.maybeTreatMouseOpAsClick\n};\n\n// Default interaction model when using the range selector.\nDygraphInteraction.dragIsPanInteractionModel = {\n  mousedown: function (event, g, context) {\n    context.initializeMouseDown(event, g, context);\n    DygraphInteraction.startPan(event, g, context);\n  },\n  mousemove: function (event, g, context) {\n    if (context.isPanning) {\n      DygraphInteraction.movePan(event, g, context);\n    }\n  },\n  mouseup: function (event, g, context) {\n    if (context.isPanning) {\n      DygraphInteraction.endPan(event, g, context);\n    }\n  }\n};\nexport default DygraphInteraction;","map":{"version":3,"names":["utils","DRAG_EDGE_MARGIN","DygraphInteraction","maybeTreatMouseOpAsClick","event","g","context","dragEndX","dragGetX_","dragEndY","dragGetY_","regionWidth","Math","abs","dragStartX","regionHeight","dragStartY","lastx_","undefined","treatMouseOpAsClick","startPan","i","axis","isPanning","xRange","xAxisRange","getOptionForAxis","initialLeftmostDate","log10","dateRange","xUnitsPerPixel","plotter_","area","w","getNumericOption","maxXPixelsToDraw","width_","xExtremes","xAxisExtremes","boundedLeftX","toDomXCoord","boundedRightX","boundedLeftDate","toDataXCoord","boundedRightDate","boundedDates","boundedValues","maxYPixelsToDraw","height_","axes_","length","yExtremes","extremeRange","boundedTopY","toDomYCoord","boundedBottomY","boundedTopValue","toDataYCoord","boundedBottomValue","is2DPan","axes","axis_data","yRange","yAxisRange","logscale","attributes_","getForAxis","initialTopValue","dragValueRange","unitsPerPixel","h","push","valueRange","movePan","minDate","max","maxDate","dateWindow_","pow","LOG_SCALE","pixelsDragged","unitsDragged","boundedValue","maxValue","min","minValue","drawGraph_","endPan","startZoom","isZooming","zoomMoved","moveZoom","xDelta","yDelta","dragDirection","VERTICAL","HORIZONTAL","drawZoomRect_","prevDragDirection","prevEndX","prevEndY","clickCallback","getFunctionOption","pointClickCallback","selectedPoint","closestIdx","closestDistance","Number","MAX_VALUE","selPoints_","p","distance","canvasx","canvasy","isNaN","radius","e","cancelable","point","defaultPrevented","cascadeEvents_","call","xval","pts","endZoom","clearZoomRect_","plotArea","getArea","left","right","x","doZoomX_","cancelNextDblclick","top","bottom","y","doZoomY_","startTouch","preventDefault","touches","startTimeForDoubleTapMs","t","rect","target","getBoundingClientRect","pageX","pageY","dataX","clientX","dataY","clientY","initialTouches","initialPinchCenter","touchDirections","initialAngle","PI","atan2","initialRange","moveTouch","c_now","c_init","swipe","dataWidth","dataHeight","xScale","yScale","initHalfWidth","initHalfHeight","didZoom","cFactor","viewWindow","yAxisRanges","endTouch","changedTouches","now","Date","getTime","doubleTapX","screenX","doubleTapY","screenY","resetZoom","distanceFromInterval","distanceFromChart","chartPos","findPos","canvas_","box","offsetWidth","offsetHeight","pt","dx","dy","defaultModel","mousedown","button","initializeMouseDown","altKey","shiftKey","mousemove","d","mouseup","removeEvent","document","destroy","addAndTrackEvent","willDestroyContextMyself","touchstart","touchmove","touchend","dblclick","nonInteractiveModel_","dragIsPanInteractionModel"],"sources":["/Users/fneffati/Documents/Classes/TBENVDASH/frontEnd/tbenv/node_modules/dygraphs/src/dygraph-interaction-model.js"],"sourcesContent":["/**\n * @license\n * Copyright 2011 Robert Konigsberg (konigsberg@google.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview The default interaction model for Dygraphs. This is kept out\n * of dygraph.js for better navigability.\n * @author Robert Konigsberg (konigsberg@google.com)\n */\n\n/*global Dygraph:false */\n\"use strict\";\n\nimport * as utils from './dygraph-utils';\n\n/**\n * You can drag this many pixels past the edge of the chart and still have it\n * be considered a zoom. This makes it easier to zoom to the exact edge of the\n * chart, a fairly common operation.\n */\nvar DRAG_EDGE_MARGIN = 100;\n\n/**\n * A collection of functions to facilitate build custom interaction models.\n * @class\n */\nvar DygraphInteraction = {};\n\n/**\n * Checks whether the beginning & ending of an event were close enough that it\n * should be considered a click. If it should, dispatch appropriate events.\n * Returns true if the event was treated as a click.\n *\n * @param {Event} event\n * @param {Dygraph} g\n * @param {Object} context\n */\nDygraphInteraction.maybeTreatMouseOpAsClick = function(event, g, context) {\n  context.dragEndX = utils.dragGetX_(event, context);\n  context.dragEndY = utils.dragGetY_(event, context);\n  var regionWidth = Math.abs(context.dragEndX - context.dragStartX);\n  var regionHeight = Math.abs(context.dragEndY - context.dragStartY);\n\n  if (regionWidth < 2 && regionHeight < 2 &&\n      g.lastx_ !== undefined && g.lastx_ !== null) {\n    DygraphInteraction.treatMouseOpAsClick(g, event, context);\n  }\n\n  context.regionWidth = regionWidth;\n  context.regionHeight = regionHeight;\n};\n\n/**\n * Called in response to an interaction model operation that\n * should start the default panning behavior.\n *\n * It's used in the default callback for \"mousedown\" operations.\n * Custom interaction model builders can use it to provide the default\n * panning behavior.\n *\n * @param {Event} event the event object which led to the startPan call.\n * @param {Dygraph} g The dygraph on which to act.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.startPan = function(event, g, context) {\n  var i, axis;\n  context.isPanning = true;\n  var xRange = g.xAxisRange();\n\n  if (g.getOptionForAxis(\"logscale\", \"x\")) {\n    context.initialLeftmostDate = utils.log10(xRange[0]);\n    context.dateRange = utils.log10(xRange[1]) - utils.log10(xRange[0]);\n  } else {\n    context.initialLeftmostDate = xRange[0];\n    context.dateRange = xRange[1] - xRange[0];\n  }\n  context.xUnitsPerPixel = context.dateRange / (g.plotter_.area.w - 1);\n\n  if (g.getNumericOption(\"panEdgeFraction\")) {\n    var maxXPixelsToDraw = g.width_ * g.getNumericOption(\"panEdgeFraction\");\n    var xExtremes = g.xAxisExtremes(); // I REALLY WANT TO CALL THIS xTremes!\n\n    var boundedLeftX = g.toDomXCoord(xExtremes[0]) - maxXPixelsToDraw;\n    var boundedRightX = g.toDomXCoord(xExtremes[1]) + maxXPixelsToDraw;\n\n    var boundedLeftDate = g.toDataXCoord(boundedLeftX);\n    var boundedRightDate = g.toDataXCoord(boundedRightX);\n    context.boundedDates = [boundedLeftDate, boundedRightDate];\n\n    var boundedValues = [];\n    var maxYPixelsToDraw = g.height_ * g.getNumericOption(\"panEdgeFraction\");\n\n    for (i = 0; i < g.axes_.length; i++) {\n      axis = g.axes_[i];\n      var yExtremes = axis.extremeRange;\n\n      var boundedTopY = g.toDomYCoord(yExtremes[0], i) + maxYPixelsToDraw;\n      var boundedBottomY = g.toDomYCoord(yExtremes[1], i) - maxYPixelsToDraw;\n\n      var boundedTopValue = g.toDataYCoord(boundedTopY, i);\n      var boundedBottomValue = g.toDataYCoord(boundedBottomY, i);\n\n      boundedValues[i] = [boundedTopValue, boundedBottomValue];\n    }\n    context.boundedValues = boundedValues;\n  } else {\n    // undo effect if it was once set\n    context.boundedDates = null;\n    context.boundedValues = null;\n  }\n\n  // Record the range of each y-axis at the start of the drag.\n  // If any axis has a valueRange, then we want a 2D pan.\n  // We can't store data directly in g.axes_, because it does not belong to us\n  // and could change out from under us during a pan (say if there's a data\n  // update).\n  context.is2DPan = false;\n  context.axes = [];\n  for (i = 0; i < g.axes_.length; i++) {\n    axis = g.axes_[i];\n    var axis_data = {};\n    var yRange = g.yAxisRange(i);\n    // TODO(konigsberg): These values should be in |context|.\n    // In log scale, initialTopValue, dragValueRange and unitsPerPixel are log scale.\n    var logscale = g.attributes_.getForAxis(\"logscale\", i);\n    if (logscale) {\n      axis_data.initialTopValue = utils.log10(yRange[1]);\n      axis_data.dragValueRange = utils.log10(yRange[1]) - utils.log10(yRange[0]);\n    } else {\n      axis_data.initialTopValue = yRange[1];\n      axis_data.dragValueRange = yRange[1] - yRange[0];\n    }\n    axis_data.unitsPerPixel = axis_data.dragValueRange / (g.plotter_.area.h - 1);\n    context.axes.push(axis_data);\n\n    // While calculating axes, set 2dpan.\n    if (axis.valueRange) context.is2DPan = true;\n  }\n};\n\n/**\n * Called in response to an interaction model operation that\n * responds to an event that pans the view.\n *\n * It's used in the default callback for \"mousemove\" operations.\n * Custom interaction model builders can use it to provide the default\n * panning behavior.\n *\n * @param {Event} event the event object which led to the movePan call.\n * @param {Dygraph} g The dygraph on which to act.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.movePan = function(event, g, context) {\n  context.dragEndX = utils.dragGetX_(event, context);\n  context.dragEndY = utils.dragGetY_(event, context);\n\n  var minDate = context.initialLeftmostDate -\n    (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n  if (context.boundedDates) {\n    minDate = Math.max(minDate, context.boundedDates[0]);\n  }\n  var maxDate = minDate + context.dateRange;\n  if (context.boundedDates) {\n    if (maxDate > context.boundedDates[1]) {\n      // Adjust minDate, and recompute maxDate.\n      minDate = minDate - (maxDate - context.boundedDates[1]);\n      maxDate = minDate + context.dateRange;\n    }\n  }\n\n  if (g.getOptionForAxis(\"logscale\", \"x\")) {\n    g.dateWindow_ = [ Math.pow(utils.LOG_SCALE, minDate),\n                      Math.pow(utils.LOG_SCALE, maxDate) ];\n  } else {\n    g.dateWindow_ = [minDate, maxDate];\n  }\n\n  // y-axis scaling is automatic unless this is a full 2D pan.\n  if (context.is2DPan) {\n\n    var pixelsDragged = context.dragEndY - context.dragStartY;\n\n    // Adjust each axis appropriately.\n    for (var i = 0; i < g.axes_.length; i++) {\n      var axis = g.axes_[i];\n      var axis_data = context.axes[i];\n      var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n\n      var boundedValue = context.boundedValues ? context.boundedValues[i] : null;\n\n      // In log scale, maxValue and minValue are the logs of those values.\n      var maxValue = axis_data.initialTopValue + unitsDragged;\n      if (boundedValue) {\n        maxValue = Math.min(maxValue, boundedValue[1]);\n      }\n      var minValue = maxValue - axis_data.dragValueRange;\n      if (boundedValue) {\n        if (minValue < boundedValue[0]) {\n          // Adjust maxValue, and recompute minValue.\n          maxValue = maxValue - (minValue - boundedValue[0]);\n          minValue = maxValue - axis_data.dragValueRange;\n        }\n      }\n      if (g.attributes_.getForAxis(\"logscale\", i)) {\n        axis.valueRange = [ Math.pow(utils.LOG_SCALE, minValue),\n                            Math.pow(utils.LOG_SCALE, maxValue) ];\n      } else {\n        axis.valueRange = [ minValue, maxValue ];\n      }\n    }\n  }\n\n  g.drawGraph_(false);\n};\n\n/**\n * Called in response to an interaction model operation that\n * responds to an event that ends panning.\n *\n * It's used in the default callback for \"mouseup\" operations.\n * Custom interaction model builders can use it to provide the default\n * panning behavior.\n *\n * @param {Event} event the event object which led to the endPan call.\n * @param {Dygraph} g The dygraph on which to act.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.endPan = DygraphInteraction.maybeTreatMouseOpAsClick;\n\n/**\n * Called in response to an interaction model operation that\n * responds to an event that starts zooming.\n *\n * It's used in the default callback for \"mousedown\" operations.\n * Custom interaction model builders can use it to provide the default\n * zooming behavior.\n *\n * @param {Event} event the event object which led to the startZoom call.\n * @param {Dygraph} g The dygraph on which to act.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.startZoom = function(event, g, context) {\n  context.isZooming = true;\n  context.zoomMoved = false;\n};\n\n/**\n * Called in response to an interaction model operation that\n * responds to an event that defines zoom boundaries.\n *\n * It's used in the default callback for \"mousemove\" operations.\n * Custom interaction model builders can use it to provide the default\n * zooming behavior.\n *\n * @param {Event} event the event object which led to the moveZoom call.\n * @param {Dygraph} g The dygraph on which to act.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.moveZoom = function(event, g, context) {\n  context.zoomMoved = true;\n  context.dragEndX = utils.dragGetX_(event, context);\n  context.dragEndY = utils.dragGetY_(event, context);\n\n  var xDelta = Math.abs(context.dragStartX - context.dragEndX);\n  var yDelta = Math.abs(context.dragStartY - context.dragEndY);\n\n  // drag direction threshold for y axis is twice as large as x axis\n  context.dragDirection = (xDelta < yDelta / 2) ? utils.VERTICAL : utils.HORIZONTAL;\n\n  g.drawZoomRect_(\n      context.dragDirection,\n      context.dragStartX,\n      context.dragEndX,\n      context.dragStartY,\n      context.dragEndY,\n      context.prevDragDirection,\n      context.prevEndX,\n      context.prevEndY);\n\n  context.prevEndX = context.dragEndX;\n  context.prevEndY = context.dragEndY;\n  context.prevDragDirection = context.dragDirection;\n};\n\n/**\n * TODO(danvk): move this logic into dygraph.js\n * @param {Dygraph} g\n * @param {Event} event\n * @param {Object} context\n */\nDygraphInteraction.treatMouseOpAsClick = function(g, event, context) {\n  var clickCallback = g.getFunctionOption('clickCallback');\n  var pointClickCallback = g.getFunctionOption('pointClickCallback');\n\n  var selectedPoint = null;\n\n  // Find out if the click occurs on a point.\n  var closestIdx = -1;\n  var closestDistance = Number.MAX_VALUE;\n\n  // check if the click was on a particular point.\n  for (var i = 0; i < g.selPoints_.length; i++) {\n    var p = g.selPoints_[i];\n    var distance = Math.pow(p.canvasx - context.dragEndX, 2) +\n                   Math.pow(p.canvasy - context.dragEndY, 2);\n    if (!isNaN(distance) &&\n        (closestIdx == -1 || distance < closestDistance)) {\n      closestDistance = distance;\n      closestIdx = i;\n    }\n  }\n\n  // Allow any click within two pixels of the dot.\n  var radius = g.getNumericOption('highlightCircleSize') + 2;\n  if (closestDistance <= radius * radius) {\n    selectedPoint = g.selPoints_[closestIdx];\n  }\n\n  if (selectedPoint) {\n    var e = {\n      cancelable: true,\n      point: selectedPoint,\n      canvasx: context.dragEndX,\n      canvasy: context.dragEndY\n    };\n    var defaultPrevented = g.cascadeEvents_('pointClick', e);\n    if (defaultPrevented) {\n      // Note: this also prevents click / clickCallback from firing.\n      return;\n    }\n    if (pointClickCallback) {\n      pointClickCallback.call(g, event, selectedPoint);\n    }\n  }\n\n  var e = {\n    cancelable: true,\n    xval: g.lastx_,  // closest point by x value\n    pts: g.selPoints_,\n    canvasx: context.dragEndX,\n    canvasy: context.dragEndY\n  };\n  if (!g.cascadeEvents_('click', e)) {\n    if (clickCallback) {\n      // TODO(danvk): pass along more info about the points, e.g. 'x'\n      clickCallback.call(g, event, g.lastx_, g.selPoints_);\n    }\n  }\n};\n\n/**\n * Called in response to an interaction model operation that\n * responds to an event that performs a zoom based on previously defined\n * bounds..\n *\n * It's used in the default callback for \"mouseup\" operations.\n * Custom interaction model builders can use it to provide the default\n * zooming behavior.\n *\n * @param {Event} event the event object which led to the endZoom call.\n * @param {Dygraph} g The dygraph on which to end the zoom.\n * @param {Object} context The dragging context object (with\n *     dragStartX/dragStartY/etc. properties). This function modifies the\n *     context.\n */\nDygraphInteraction.endZoom = function(event, g, context) {\n  g.clearZoomRect_();\n  context.isZooming = false;\n  DygraphInteraction.maybeTreatMouseOpAsClick(event, g, context);\n\n  // The zoom rectangle is visibly clipped to the plot area, so its behavior\n  // should be as well.\n  // See http://code.google.com/p/dygraphs/issues/detail?id=280\n  var plotArea = g.getArea();\n  if (context.regionWidth >= 10 &&\n      context.dragDirection == utils.HORIZONTAL) {\n    var left = Math.min(context.dragStartX, context.dragEndX),\n        right = Math.max(context.dragStartX, context.dragEndX);\n    left = Math.max(left, plotArea.x);\n    right = Math.min(right, plotArea.x + plotArea.w);\n    if (left < right) {\n      g.doZoomX_(left, right);\n    }\n    context.cancelNextDblclick = true;\n  } else if (context.regionHeight >= 10 &&\n             context.dragDirection == utils.VERTICAL) {\n    var top = Math.min(context.dragStartY, context.dragEndY),\n        bottom = Math.max(context.dragStartY, context.dragEndY);\n    top = Math.max(top, plotArea.y);\n    bottom = Math.min(bottom, plotArea.y + plotArea.h);\n    if (top < bottom) {\n      g.doZoomY_(top, bottom);\n    }\n    context.cancelNextDblclick = true;\n  }\n  context.dragStartX = null;\n  context.dragStartY = null;\n};\n\n/**\n * @private\n */\nDygraphInteraction.startTouch = function(event, g, context) {\n  event.preventDefault();  // touch browsers are all nice.\n  if (event.touches.length > 1) {\n    // If the user ever puts two fingers down, it's not a double tap.\n    context.startTimeForDoubleTapMs = null;\n  }\n\n  var touches = [];\n  for (var i = 0; i < event.touches.length; i++) {\n    var t = event.touches[i];\n    var rect = t.target.getBoundingClientRect()\n    // we dispense with 'dragGetX_' because all touchBrowsers support pageX\n    touches.push({\n      pageX: t.pageX,\n      pageY: t.pageY,\n      dataX: g.toDataXCoord(t.clientX - rect.left),\n      dataY: g.toDataYCoord(t.clientY - rect.top)\n      // identifier: t.identifier\n    });\n  }\n  context.initialTouches = touches;\n\n  if (touches.length == 1) {\n    // This is just a swipe.\n    context.initialPinchCenter = touches[0];\n    context.touchDirections = { x: true, y: true };\n  } else if (touches.length >= 2) {\n    // It's become a pinch!\n    // In case there are 3+ touches, we ignore all but the \"first\" two.\n\n    // only screen coordinates can be averaged (data coords could be log scale).\n    context.initialPinchCenter = {\n      pageX: 0.5 * (touches[0].pageX + touches[1].pageX),\n      pageY: 0.5 * (touches[0].pageY + touches[1].pageY),\n\n      // TODO(danvk): remove\n      dataX: 0.5 * (touches[0].dataX + touches[1].dataX),\n      dataY: 0.5 * (touches[0].dataY + touches[1].dataY)\n    };\n\n    // Make pinches in a 45-degree swath around either axis 1-dimensional zooms.\n    var initialAngle = 180 / Math.PI * Math.atan2(\n        context.initialPinchCenter.pageY - touches[0].pageY,\n        touches[0].pageX - context.initialPinchCenter.pageX);\n\n    // use symmetry to get it into the first quadrant.\n    initialAngle = Math.abs(initialAngle);\n    if (initialAngle > 90) initialAngle = 90 - initialAngle;\n\n    context.touchDirections = {\n      x: (initialAngle < (90 - 45/2)),\n      y: (initialAngle > 45/2)\n    };\n  }\n\n  // save the full x & y ranges.\n  context.initialRange = {\n    x: g.xAxisRange(),\n    y: g.yAxisRange()\n  };\n};\n\n/**\n * @private\n */\nDygraphInteraction.moveTouch = function(event, g, context) {\n  // If the tap moves, then it's definitely not part of a double-tap.\n  context.startTimeForDoubleTapMs = null;\n\n  var i, touches = [];\n  for (i = 0; i < event.touches.length; i++) {\n    var t = event.touches[i];\n    touches.push({\n      pageX: t.pageX,\n      pageY: t.pageY\n    });\n  }\n  var initialTouches = context.initialTouches;\n\n  var c_now;\n\n  // old and new centers.\n  var c_init = context.initialPinchCenter;\n  if (touches.length == 1) {\n    c_now = touches[0];\n  } else {\n    c_now = {\n      pageX: 0.5 * (touches[0].pageX + touches[1].pageX),\n      pageY: 0.5 * (touches[0].pageY + touches[1].pageY)\n    };\n  }\n\n  // this is the \"swipe\" component\n  // we toss it out for now, but could use it in the future.\n  var swipe = {\n    pageX: c_now.pageX - c_init.pageX,\n    pageY: c_now.pageY - c_init.pageY\n  };\n  var dataWidth = context.initialRange.x[1] - context.initialRange.x[0];\n  var dataHeight = context.initialRange.y[0] - context.initialRange.y[1];\n  swipe.dataX = (swipe.pageX / g.plotter_.area.w) * dataWidth;\n  swipe.dataY = (swipe.pageY / g.plotter_.area.h) * dataHeight;\n  var xScale, yScale;\n\n  // The residual bits are usually split into scale & rotate bits, but we split\n  // them into x-scale and y-scale bits.\n  if (touches.length == 1) {\n    xScale = 1.0;\n    yScale = 1.0;\n  } else if (touches.length >= 2) {\n    var initHalfWidth = (initialTouches[1].pageX - c_init.pageX);\n    xScale = (touches[1].pageX - c_now.pageX) / initHalfWidth;\n\n    var initHalfHeight = (initialTouches[1].pageY - c_init.pageY);\n    yScale = (touches[1].pageY - c_now.pageY) / initHalfHeight;\n  }\n\n  // Clip scaling to [1/8, 8] to prevent too much blowup.\n  xScale = Math.min(8, Math.max(0.125, xScale));\n  yScale = Math.min(8, Math.max(0.125, yScale));\n\n  var didZoom = false;\n  if (context.touchDirections.x) {\n    var cFactor = c_init.dataX - swipe.dataX / xScale;\n    g.dateWindow_ = [\n      cFactor + (context.initialRange.x[0] - c_init.dataX) / xScale,\n      cFactor + (context.initialRange.x[1] - c_init.dataX) / xScale\n    ];\n    didZoom = true;\n  }\n\n  if (context.touchDirections.y) {\n    for (i = 0; i < 1  /*g.axes_.length*/; i++) {\n      var axis = g.axes_[i];\n      var logscale = g.attributes_.getForAxis(\"logscale\", i);\n      if (logscale) {\n        // TODO(danvk): implement\n      } else {\n        var cFactor = c_init.dataY - swipe.dataY / yScale;\n        axis.valueRange = [\n          cFactor + (context.initialRange.y[0] - c_init.dataY) / yScale,\n          cFactor + (context.initialRange.y[1] - c_init.dataY) / yScale\n        ];\n        didZoom = true;\n      }\n    }\n  }\n\n  g.drawGraph_(false);\n\n  // We only call zoomCallback on zooms, not pans, to mirror desktop behavior.\n  if (didZoom && touches.length > 1 && g.getFunctionOption('zoomCallback')) {\n    var viewWindow = g.xAxisRange();\n    g.getFunctionOption(\"zoomCallback\").call(g, viewWindow[0], viewWindow[1], g.yAxisRanges());\n  }\n};\n\n/**\n * @private\n */\nDygraphInteraction.endTouch = function(event, g, context) {\n  if (event.touches.length !== 0) {\n    // this is effectively a \"reset\"\n    DygraphInteraction.startTouch(event, g, context);\n  } else if (event.changedTouches.length == 1) {\n    // Could be part of a \"double tap\"\n    // The heuristic here is that it's a double-tap if the two touchend events\n    // occur within 500ms and within a 50x50 pixel box.\n    var now = new Date().getTime();\n    var t = event.changedTouches[0];\n    if (context.startTimeForDoubleTapMs &&\n        now - context.startTimeForDoubleTapMs < 500 &&\n        context.doubleTapX && Math.abs(context.doubleTapX - t.screenX) < 50 &&\n        context.doubleTapY && Math.abs(context.doubleTapY - t.screenY) < 50) {\n      g.resetZoom();\n    } else {\n      context.startTimeForDoubleTapMs = now;\n      context.doubleTapX = t.screenX;\n      context.doubleTapY = t.screenY;\n    }\n  }\n};\n\n// Determine the distance from x to [left, right].\nvar distanceFromInterval = function(x, left, right) {\n  if (x < left) {\n    return left - x;\n  } else if (x > right) {\n    return x - right;\n  } else {\n    return 0;\n  }\n};\n\n/**\n * Returns the number of pixels by which the event happens from the nearest\n * edge of the chart. For events in the interior of the chart, this returns zero.\n */\nvar distanceFromChart = function(event, g) {\n  var chartPos = utils.findPos(g.canvas_);\n  var box = {\n    left: chartPos.x,\n    right: chartPos.x + g.canvas_.offsetWidth,\n    top: chartPos.y,\n    bottom: chartPos.y + g.canvas_.offsetHeight\n  };\n\n  var pt = {\n    x: utils.pageX(event),\n    y: utils.pageY(event)\n  };\n\n  var dx = distanceFromInterval(pt.x, box.left, box.right),\n      dy = distanceFromInterval(pt.y, box.top, box.bottom);\n  return Math.max(dx, dy);\n};\n\n/**\n * Default interation model for dygraphs. You can refer to specific elements of\n * this when constructing your own interaction model, e.g.:\n * g.updateOptions( {\n *   interactionModel: {\n *     mousedown: DygraphInteraction.defaultInteractionModel.mousedown\n *   }\n * } );\n */\nDygraphInteraction.defaultModel = {\n  // Track the beginning of drag events\n  mousedown: function(event, g, context) {\n    // Right-click should not initiate a zoom.\n    if (event.button && event.button == 2) return;\n\n    context.initializeMouseDown(event, g, context);\n\n    if (event.altKey || event.shiftKey) {\n      DygraphInteraction.startPan(event, g, context);\n    } else {\n      DygraphInteraction.startZoom(event, g, context);\n    }\n\n    // Note: we register mousemove/mouseup on document to allow some leeway for\n    // events to move outside of the chart. Interaction model events get\n    // registered on the canvas, which is too small to allow this.\n    var mousemove = function(event) {\n      if (context.isZooming) {\n        // When the mouse moves >200px from the chart edge, cancel the zoom.\n        var d = distanceFromChart(event, g);\n        if (d < DRAG_EDGE_MARGIN) {\n          DygraphInteraction.moveZoom(event, g, context);\n        } else {\n          if (context.dragEndX !== null) {\n            context.dragEndX = null;\n            context.dragEndY = null;\n            g.clearZoomRect_();\n          }\n        }\n      } else if (context.isPanning) {\n        DygraphInteraction.movePan(event, g, context);\n      }\n    };\n    var mouseup = function(event) {\n      if (context.isZooming) {\n        if (context.dragEndX !== null) {\n          DygraphInteraction.endZoom(event, g, context);\n        } else {\n          DygraphInteraction.maybeTreatMouseOpAsClick(event, g, context);\n        }\n      } else if (context.isPanning) {\n        DygraphInteraction.endPan(event, g, context);\n      }\n\n      utils.removeEvent(document, 'mousemove', mousemove);\n      utils.removeEvent(document, 'mouseup', mouseup);\n      context.destroy();\n    };\n\n    g.addAndTrackEvent(document, 'mousemove', mousemove);\n    g.addAndTrackEvent(document, 'mouseup', mouseup);\n  },\n  willDestroyContextMyself: true,\n\n  touchstart: function(event, g, context) {\n    DygraphInteraction.startTouch(event, g, context);\n  },\n  touchmove: function(event, g, context) {\n    DygraphInteraction.moveTouch(event, g, context);\n  },\n  touchend: function(event, g, context) {\n    DygraphInteraction.endTouch(event, g, context);\n  },\n\n  // Disable zooming out if panning.\n  dblclick: function(event, g, context) {\n    if (context.cancelNextDblclick) {\n      context.cancelNextDblclick = false;\n      return;\n    }\n\n    // Give plugins a chance to grab this event.\n    var e = {\n      canvasx: context.dragEndX,\n      canvasy: context.dragEndY,\n      cancelable: true,\n    };\n    if (g.cascadeEvents_('dblclick', e)) {\n      return;\n    }\n\n    if (event.altKey || event.shiftKey) {\n      return;\n    }\n    g.resetZoom();\n  }\n};\n\n/*\nDygraph.DEFAULT_ATTRS.interactionModel = DygraphInteraction.defaultModel;\n\n// old ways of accessing these methods/properties\nDygraph.defaultInteractionModel = DygraphInteraction.defaultModel;\nDygraph.endZoom = DygraphInteraction.endZoom;\nDygraph.moveZoom = DygraphInteraction.moveZoom;\nDygraph.startZoom = DygraphInteraction.startZoom;\nDygraph.endPan = DygraphInteraction.endPan;\nDygraph.movePan = DygraphInteraction.movePan;\nDygraph.startPan = DygraphInteraction.startPan;\n*/\n\nDygraphInteraction.nonInteractiveModel_ = {\n  mousedown: function(event, g, context) {\n    context.initializeMouseDown(event, g, context);\n  },\n  mouseup: DygraphInteraction.maybeTreatMouseOpAsClick\n};\n\n// Default interaction model when using the range selector.\nDygraphInteraction.dragIsPanInteractionModel = {\n  mousedown: function(event, g, context) {\n    context.initializeMouseDown(event, g, context);\n    DygraphInteraction.startPan(event, g, context);\n  },\n  mousemove: function(event, g, context) {\n    if (context.isPanning) {\n      DygraphInteraction.movePan(event, g, context);\n    }\n  },\n  mouseup: function(event, g, context) {\n    if (context.isPanning) {\n      DygraphInteraction.endPan(event, g, context);\n    }\n  }\n};\n\nexport default DygraphInteraction;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}