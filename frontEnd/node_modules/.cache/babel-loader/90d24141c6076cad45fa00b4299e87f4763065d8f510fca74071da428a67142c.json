{"ast":null,"code":"class Util {\n  static regularWordCloud(tweets) {\n    const flattenedText = tweets.map(item => item.text).join(' ').toLowerCase();\n    const geoTermsPattern = /\\b(red tide|red tides|karenia brevis|red algae|redtide|redtide's|kbrevis|karenia|brevis|kareniabrevis|redalgae)\\b/gi;\n    const politTermsPattern = /\\b(democrat|democratic|republican|gop|demcastfl|vote blue|vote red|red wave|blue wave|right wing|left wing|far right|far left|extreme right|extreme left|supremacy|supremacist|supremacys|supremacists|terrorist|terrorism|terrorists|ron desantis|desantis|remove ron|deathsantis|rick scott|red tide rick|marco rubio|rubio|bill nelson|donald trump|trump|mike pence|pence|joe biden|biden|kamala harris|crist|charlie christ|andrew gillum|gillum|kriseman|richard kriseman|ken welch|george cretekos|cretekos|buckhorn|bob buckhorn|jane castor|castor|john holic|holic|ron feinsod)\\b/gi;\n    const redTideTermsPattern = /\\b(red tide|red tides|karenia brevis|red algae|redtide|redtide's|kbrevis|karenia|brevis|kareniabrevis|redalgae)\\b/gi;\n    const placeholder = 'na';\n    const replacedText = flattenedText.replace(geoTermsPattern, placeholder).replace(politTermsPattern, placeholder).replace(redTideTermsPattern, placeholder);\n    const stopWords = ['a', 'and', 'the', 'is', 'with', 'na', 'in', 'com', 'https', '.', 'of', 'to', 'www', 'on', 'rt', 'at', '!', '$', '%', '(', ')', '.', ':', ';', '?', ',', '[', ']', '{', '|', '}']; // Example list of stop words\n    const filteredWords = replacedText.split(/\\s+/).filter(word => !stopWords.includes(word.toLowerCase()));\n    const termCounts = filteredWords.reduce((counts, token) => {\n      counts[token] = (counts[token] || 0) + 1;\n      return counts;\n    }, {});\n    const wordFrequencyArray = Object.entries(termCounts).map(([word, count]) => ({\n      text: word,\n      value: count\n    }));\n    wordFrequencyArray.sort((a, b) => b.value - a.value);\n    return wordFrequencyArray.slice(0, 100);\n  }\n\n  // Other methods...\n}\n\n// Export the Util class\nmodule.exports = Util;","map":{"version":3,"names":["Util","regularWordCloud","tweets","flattenedText","map","item","text","join","toLowerCase","geoTermsPattern","politTermsPattern","redTideTermsPattern","placeholder","replacedText","replace","stopWords","filteredWords","split","filter","word","includes","termCounts","reduce","counts","token","wordFrequencyArray","Object","entries","count","value","sort","a","b","slice","module","exports"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontEnd/src/components/analysis.js"],"sourcesContent":["class Util {\n    static regularWordCloud(tweets) {\n        const flattenedText = tweets.map(item => item.text).join(' ').toLowerCase();\n\n        const geoTermsPattern = /\\b(red tide|red tides|karenia brevis|red algae|redtide|redtide's|kbrevis|karenia|brevis|kareniabrevis|redalgae)\\b/gi;\n        const politTermsPattern = /\\b(democrat|democratic|republican|gop|demcastfl|vote blue|vote red|red wave|blue wave|right wing|left wing|far right|far left|extreme right|extreme left|supremacy|supremacist|supremacys|supremacists|terrorist|terrorism|terrorists|ron desantis|desantis|remove ron|deathsantis|rick scott|red tide rick|marco rubio|rubio|bill nelson|donald trump|trump|mike pence|pence|joe biden|biden|kamala harris|crist|charlie christ|andrew gillum|gillum|kriseman|richard kriseman|ken welch|george cretekos|cretekos|buckhorn|bob buckhorn|jane castor|castor|john holic|holic|ron feinsod)\\b/gi;\n        const redTideTermsPattern = /\\b(red tide|red tides|karenia brevis|red algae|redtide|redtide's|kbrevis|karenia|brevis|kareniabrevis|redalgae)\\b/gi;\n\n        const placeholder = 'na';\n        const replacedText = flattenedText.replace(geoTermsPattern, placeholder)\n            .replace(politTermsPattern, placeholder)\n            .replace(redTideTermsPattern, placeholder);\n\n        const stopWords = ['a', 'and', 'the', 'is', 'with', 'na', 'in', 'com', 'https', '.', 'of', 'to', 'www', 'on', 'rt', 'at', '!', '$', '%', '(', ')', '.', ':', ';', '?', ',', '[', ']', '{', '|', '}']; // Example list of stop words\n        const filteredWords = replacedText.split(/\\s+/).filter(word => !stopWords.includes(word.toLowerCase()));\n\n        const termCounts = filteredWords.reduce((counts, token) => {\n            counts[token] = (counts[token] || 0) + 1;\n            return counts;\n        }, {});\n\n        const wordFrequencyArray = Object.entries(termCounts).map(([word, count]) => ({ text: word, value: count }));\n        wordFrequencyArray.sort((a, b) => b.value - a.value);\n\n        return wordFrequencyArray.slice(0, 100);\n    }\n\n    // Other methods...\n}\n\n// Export the Util class\nmodule.exports = Util;\n"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EACP,OAAOC,gBAAgBA,CAACC,MAAM,EAAE;IAC5B,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC;IAE3E,MAAMC,eAAe,GAAG,qHAAqH;IAC7I,MAAMC,iBAAiB,GAAG,+jBAA+jB;IACzlB,MAAMC,mBAAmB,GAAG,qHAAqH;IAEjJ,MAAMC,WAAW,GAAG,IAAI;IACxB,MAAMC,YAAY,GAAGV,aAAa,CAACW,OAAO,CAACL,eAAe,EAAEG,WAAW,CAAC,CACnEE,OAAO,CAACJ,iBAAiB,EAAEE,WAAW,CAAC,CACvCE,OAAO,CAACH,mBAAmB,EAAEC,WAAW,CAAC;IAE9C,MAAMG,SAAS,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACtM,MAAMC,aAAa,GAAGH,YAAY,CAACI,KAAK,CAAC,KAAK,CAAC,CAACC,MAAM,CAACC,IAAI,IAAI,CAACJ,SAAS,CAACK,QAAQ,CAACD,IAAI,CAACX,WAAW,CAAC,CAAC,CAAC,CAAC;IAEvG,MAAMa,UAAU,GAAGL,aAAa,CAACM,MAAM,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MACvDD,MAAM,CAACC,KAAK,CAAC,GAAG,CAACD,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;MACxC,OAAOD,MAAM;IACjB,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,MAAME,kBAAkB,GAAGC,MAAM,CAACC,OAAO,CAACN,UAAU,CAAC,CAACjB,GAAG,CAAC,CAAC,CAACe,IAAI,EAAES,KAAK,CAAC,MAAM;MAAEtB,IAAI,EAAEa,IAAI;MAAEU,KAAK,EAAED;IAAM,CAAC,CAAC,CAAC;IAC5GH,kBAAkB,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACH,KAAK,GAAGE,CAAC,CAACF,KAAK,CAAC;IAEpD,OAAOJ,kBAAkB,CAACQ,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;EAC3C;;EAEA;AACJ;;AAEA;AACAC,MAAM,CAACC,OAAO,GAAGnC,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}