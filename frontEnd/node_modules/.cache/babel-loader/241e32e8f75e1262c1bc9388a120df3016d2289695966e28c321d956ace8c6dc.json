{"ast":null,"code":"/**\n * @license\n * Copyright 2006 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview Creates an interactive, zoomable graph based on a CSV file or\n * string. Dygraph can handle multiple series with or without high/low bands.\n * The date/value ranges will be automatically set. Dygraph uses the\n * &lt;canvas&gt; tag, so it only works in FF1.5+.\n * See the source or https://dygraphs.com/ for more information.\n * @author danvdk@gmail.com (Dan Vanderkam)\n */\n\n/*\n  Usage:\n   <div id=\"graphdiv\" style=\"width:800px; height:500px;\"></div>\n   <script type=\"text/javascript\"><!--//--><![CDATA[//><!--\n   $(function onDOMready() {\n     new Dygraph(document.getElementById(\"graphdiv\"),\n                 \"datafile.csv\",  // CSV file with headers\n                 { }); // options\n   });\n   //--><!]]></script>\n\n The CSV file is of the form\n\n   Date,SeriesA,SeriesB,SeriesC\n   YYYY-MM-DD,A1,B1,C1\n   YYYY-MM-DD,A2,B2,C2\n\n If the 'errorBars' option is set in the constructor, the input should be of\n the form\n   Date,SeriesA,SeriesB,...\n   YYYY-MM-DD,A1,sigmaA1,B1,sigmaB1,...\n   YYYY-MM-DD,A2,sigmaA2,B2,sigmaB2,...\n\n If the 'fractions' option is set, the input should be of the form:\n\n   Date,SeriesA,SeriesB,...\n   YYYY-MM-DD,A1/B1,A2/B2,...\n   YYYY-MM-DD,A1/B1,A2/B2,...\n\n And high/low bands will be calculated automatically using a binomial distribution.\n\n For further documentation and examples, see http://dygraphs.com/\n */\n\nimport DygraphLayout from './dygraph-layout';\nimport DygraphCanvasRenderer from './dygraph-canvas';\nimport DygraphOptions from './dygraph-options';\nimport DygraphInteraction from './dygraph-interaction-model';\nimport * as DygraphTickers from './dygraph-tickers';\nimport * as utils from './dygraph-utils';\nimport DEFAULT_ATTRS from './dygraph-default-attrs';\nimport OPTIONS_REFERENCE from './dygraph-options-reference';\nimport IFrameTarp from './iframe-tarp';\nimport DefaultHandler from './datahandler/default';\nimport ErrorBarsHandler from './datahandler/bars-error';\nimport CustomBarsHandler from './datahandler/bars-custom';\nimport DefaultFractionHandler from './datahandler/default-fractions';\nimport FractionsBarsHandler from './datahandler/bars-fractions';\nimport BarsHandler from './datahandler/bars';\nimport AnnotationsPlugin from './plugins/annotations';\nimport AxesPlugin from './plugins/axes';\nimport ChartLabelsPlugin from './plugins/chart-labels';\nimport GridPlugin from './plugins/grid';\nimport LegendPlugin from './plugins/legend';\nimport RangeSelectorPlugin from './plugins/range-selector';\nimport GVizChart from './dygraph-gviz';\n\"use strict\";\n\n/**\n * @class Creates an interactive, zoomable chart.\n * @name Dygraph\n *\n * @constructor\n * @param {div | String} div A div or the id of a div into which to construct\n * the chart. Must not have any padding.\n * @param {String | Function} file A file containing CSV data or a function\n * that returns this data. The most basic expected format for each line is\n * \"YYYY/MM/DD,val1,val2,...\". For more information, see\n * http://dygraphs.com/data.html.\n * @param {Object} attrs Various other attributes, e.g. errorBars determines\n * whether the input data contains error ranges. For a complete list of\n * options, see http://dygraphs.com/options.html.\n */\nvar Dygraph = function Dygraph(div, data, opts) {\n  this.__init__(div, data, opts);\n};\nDygraph.NAME = \"Dygraph\";\nDygraph.VERSION = \"2.2.1\";\n\n// internal autoloader workaround\nvar _addrequire = {};\nDygraph._require = function require(what) {\n  return what in _addrequire ? _addrequire[what] : Dygraph._require._b(what);\n};\nDygraph._require._b = null; // set by xfrmmodmap-dy.js\nDygraph._require.add = function add(what, towhat) {\n  _addrequire[what] = towhat;\n};\n\n// Various default values\nDygraph.DEFAULT_ROLL_PERIOD = 1;\nDygraph.DEFAULT_WIDTH = 480;\nDygraph.DEFAULT_HEIGHT = 320;\n\n// For max 60 Hz. animation:\nDygraph.ANIMATION_STEPS = 12;\nDygraph.ANIMATION_DURATION = 200;\n\n/**\n * Standard plotters. These may be used by clients.\n * Available plotters are:\n * - Dygraph.Plotters.linePlotter: draws central lines (most common)\n * - Dygraph.Plotters.errorPlotter: draws high/low bands\n * - Dygraph.Plotters.fillPlotter: draws fills under lines (used with fillGraph)\n *\n * By default, the plotter is [fillPlotter, errorPlotter, linePlotter].\n * This causes all the lines to be drawn over all the fills/bands.\n */\nDygraph.Plotters = DygraphCanvasRenderer._Plotters;\n\n// Used for initializing annotation CSS rules only once.\nDygraph.addedAnnotationCSS = false;\n\n/**\n * Initializes the Dygraph. This creates a new DIV and constructs the PlotKit\n * and context &lt;canvas&gt; inside of it. See the constructor for details.\n * on the parameters.\n * @param {Element} div the Element to render the graph into.\n * @param {string | Function} file Source data\n * @param {Object} attrs Miscellaneous other options\n * @private\n */\nDygraph.prototype.__init__ = function (div, file, attrs) {\n  this.is_initial_draw_ = true;\n  this.readyFns_ = [];\n\n  // Support two-argument constructor\n  if (attrs === null || attrs === undefined) {\n    attrs = {};\n  }\n  attrs = Dygraph.copyUserAttrs_(attrs);\n  if (typeof div == 'string') {\n    div = document.getElementById(div);\n  }\n  if (!div) {\n    throw new Error('Constructing dygraph with a non-existent div!');\n  }\n\n  // Copy the important bits into the object\n  // TODO(danvk): most of these should just stay in the attrs_ dictionary.\n  this.maindiv_ = div;\n  this.file_ = file;\n  this.rollPeriod_ = attrs.rollPeriod || Dygraph.DEFAULT_ROLL_PERIOD;\n  this.previousVerticalX_ = -1;\n  this.fractions_ = attrs.fractions || false;\n  this.dateWindow_ = attrs.dateWindow || null;\n  this.annotations_ = [];\n\n  // Clear the div. This ensure that, if multiple dygraphs are passed the same\n  // div, then only one will be drawn.\n  div.innerHTML = \"\";\n  const resolved = window.getComputedStyle(div, null);\n  if (resolved.paddingLeft !== \"0px\" || resolved.paddingRight !== \"0px\" || resolved.paddingTop !== \"0px\" || resolved.paddingBottom !== \"0px\") console.error('Main div contains padding; graph will misbehave');\n\n  // For historical reasons, the 'width' and 'height' options trump all CSS\n  // rules _except_ for an explicit 'width' or 'height' on the div.\n  // As an added convenience, if the div has zero height (like <div></div> does\n  // without any styles), then we use a default height/width.\n  if (div.style.width === '' && attrs.width) {\n    div.style.width = attrs.width + \"px\";\n  }\n  if (div.style.height === '' && attrs.height) {\n    div.style.height = attrs.height + \"px\";\n  }\n  if (div.style.height === '' && div.clientHeight === 0) {\n    div.style.height = Dygraph.DEFAULT_HEIGHT + \"px\";\n    if (div.style.width === '') {\n      div.style.width = Dygraph.DEFAULT_WIDTH + \"px\";\n    }\n  }\n  // These will be zero if the dygraph's div is hidden. In that case,\n  // use the user-specified attributes if present. If not, use zero\n  // and assume the user will call resize to fix things later.\n  this.width_ = div.clientWidth || attrs.width || 0;\n  this.height_ = div.clientHeight || attrs.height || 0;\n\n  // TODO(danvk): set fillGraph to be part of attrs_ here, not user_attrs_.\n  if (attrs.stackedGraph) {\n    attrs.fillGraph = true;\n    // TODO(nikhilk): Add any other stackedGraph checks here.\n  }\n\n  // DEPRECATION WARNING: All option processing should be moved from\n  // attrs_ and user_attrs_ to options_, which holds all this information.\n  //\n  // Dygraphs has many options, some of which interact with one another.\n  // To keep track of everything, we maintain two sets of options:\n  //\n  //  this.user_attrs_   only options explicitly set by the user.\n  //  this.attrs_        defaults, options derived from user_attrs_, data.\n  //\n  // Options are then accessed this.attr_('attr'), which first looks at\n  // user_attrs_ and then computed attrs_. This way Dygraphs can set intelligent\n  // defaults without overriding behavior that the user specifically asks for.\n  this.user_attrs_ = {};\n  utils.update(this.user_attrs_, attrs);\n\n  // This sequence ensures that Dygraph.DEFAULT_ATTRS is never modified.\n  this.attrs_ = {};\n  utils.updateDeep(this.attrs_, DEFAULT_ATTRS);\n  this.boundaryIds_ = [];\n  this.setIndexByName_ = {};\n  this.datasetIndex_ = [];\n  this.registeredEvents_ = [];\n  this.eventListeners_ = {};\n  this.attributes_ = new DygraphOptions(this);\n\n  // Create the containing DIV and other interactive elements\n  this.createInterface_();\n\n  // Activate plugins.\n  this.plugins_ = [];\n  var plugins = Dygraph.PLUGINS.concat(this.getOption('plugins'));\n  for (var i = 0; i < plugins.length; i++) {\n    // the plugins option may contain either plugin classes or instances.\n    // Plugin instances contain an activate method.\n    var Plugin = plugins[i]; // either a constructor or an instance.\n    var pluginInstance;\n    if (typeof Plugin.activate !== 'undefined') {\n      pluginInstance = Plugin;\n    } else {\n      pluginInstance = new Plugin();\n    }\n    var pluginDict = {\n      plugin: pluginInstance,\n      events: {},\n      options: {},\n      pluginOptions: {}\n    };\n    var handlers = pluginInstance.activate(this);\n    for (var eventName in handlers) {\n      if (!handlers.hasOwnProperty(eventName)) continue;\n      // TODO(danvk): validate eventName.\n      pluginDict.events[eventName] = handlers[eventName];\n    }\n    this.plugins_.push(pluginDict);\n  }\n\n  // At this point, plugins can no longer register event handlers.\n  // Construct a map from event -> ordered list of [callback, plugin].\n  for (var i = 0; i < this.plugins_.length; i++) {\n    var plugin_dict = this.plugins_[i];\n    for (var eventName in plugin_dict.events) {\n      if (!plugin_dict.events.hasOwnProperty(eventName)) continue;\n      var callback = plugin_dict.events[eventName];\n      var pair = [plugin_dict.plugin, callback];\n      if (!(eventName in this.eventListeners_)) {\n        this.eventListeners_[eventName] = [pair];\n      } else {\n        this.eventListeners_[eventName].push(pair);\n      }\n    }\n  }\n  this.createDragInterface_();\n  this.start_();\n};\n\n/**\n * Triggers a cascade of events to the various plugins which are interested in them.\n * Returns true if the \"default behavior\" should be prevented, i.e. if one\n * of the event listeners called event.preventDefault().\n * @private\n */\nDygraph.prototype.cascadeEvents_ = function (name, extra_props) {\n  if (!(name in this.eventListeners_)) return false;\n\n  // QUESTION: can we use objects & prototypes to speed this up?\n  var e = {\n    dygraph: this,\n    cancelable: false,\n    defaultPrevented: false,\n    preventDefault: function () {\n      if (!e.cancelable) throw \"Cannot call preventDefault on non-cancelable event.\";\n      e.defaultPrevented = true;\n    },\n    propagationStopped: false,\n    stopPropagation: function () {\n      e.propagationStopped = true;\n    }\n  };\n  utils.update(e, extra_props);\n  var callback_plugin_pairs = this.eventListeners_[name];\n  if (callback_plugin_pairs) {\n    for (var i = callback_plugin_pairs.length - 1; i >= 0; i--) {\n      var plugin = callback_plugin_pairs[i][0];\n      var callback = callback_plugin_pairs[i][1];\n      callback.call(plugin, e);\n      if (e.propagationStopped) break;\n    }\n  }\n  return e.defaultPrevented;\n};\n\n/**\n * Fetch a plugin instance of a particular class. Only for testing.\n * @private\n * @param {!Class} type The type of the plugin.\n * @return {Object} Instance of the plugin, or null if there is none.\n */\nDygraph.prototype.getPluginInstance_ = function (type) {\n  for (var i = 0; i < this.plugins_.length; i++) {\n    var p = this.plugins_[i];\n    if (p.plugin instanceof type) {\n      return p.plugin;\n    }\n  }\n  return null;\n};\n\n/**\n * Returns the zoomed status of the chart for one or both axes.\n *\n * Axis is an optional parameter. Can be set to 'x' or 'y'.\n *\n * The zoomed status for an axis is set whenever a user zooms using the mouse\n * or when the dateWindow or valueRange are updated. Double-clicking or calling\n * resetZoom() resets the zoom status for the chart.\n */\nDygraph.prototype.isZoomed = function (axis) {\n  const isZoomedX = !!this.dateWindow_;\n  if (axis === 'x') return isZoomedX;\n  const isZoomedY = this.axes_.map(axis => !!axis.valueRange).indexOf(true) >= 0;\n  if (axis === null || axis === undefined) {\n    return isZoomedX || isZoomedY;\n  }\n  if (axis === 'y') return isZoomedY;\n  throw new Error(\"axis parameter is [\".concat(axis, \"] must be null, 'x' or 'y'.\"));\n};\n\n/**\n * Returns information about the Dygraph object, including its containing ID.\n */\nDygraph.prototype.toString = function () {\n  var maindiv = this.maindiv_;\n  var id = maindiv && maindiv.id ? maindiv.id : maindiv;\n  return \"[Dygraph \" + id + \"]\";\n};\n\n/**\n * @private\n * Returns the value of an option. This may be set by the user (either in the\n * constructor or by calling updateOptions) or by dygraphs, and may be set to a\n * per-series value.\n * @param {string} name The name of the option, e.g. 'rollPeriod'.\n * @param {string} [seriesName] The name of the series to which the option\n * will be applied. If no per-series value of this option is available, then\n * the global value is returned. This is optional.\n * @return {...} The value of the option.\n */\nDygraph.prototype.attr_ = function (name, seriesName) {\n  if (typeof process !== 'undefined' && process.env.NODE_ENV != 'production') {\n    // For \"production\" code, this gets removed by uglifyjs.\n    if (typeof OPTIONS_REFERENCE === 'undefined') {\n      console.error('Must include options reference JS for testing');\n    } else if (!OPTIONS_REFERENCE.hasOwnProperty(name)) {\n      console.error('Dygraphs is using property ' + name + ', which has no ' + 'entry in the Dygraphs.OPTIONS_REFERENCE listing.');\n      // Only log this error once.\n      OPTIONS_REFERENCE[name] = true;\n    }\n  }\n  return seriesName ? this.attributes_.getForSeries(name, seriesName) : this.attributes_.get(name);\n};\n\n/**\n * Returns the current value for an option, as set in the constructor or via\n * updateOptions. You may pass in an (optional) series name to get per-series\n * values for the option.\n *\n * All values returned by this method should be considered immutable. If you\n * modify them, there is no guarantee that the changes will be honored or that\n * dygraphs will remain in a consistent state. If you want to modify an option,\n * use updateOptions() instead.\n *\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {*} The value of the option.\n */\nDygraph.prototype.getOption = function (name, opt_seriesName) {\n  return this.attr_(name, opt_seriesName);\n};\n\n/**\n * Like getOption(), but specifically returns a number.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {number} The value of the option.\n * @private\n */\nDygraph.prototype.getNumericOption = function (name, opt_seriesName) {\n  return /** @type{number} */this.getOption(name, opt_seriesName);\n};\n\n/**\n * Like getOption(), but specifically returns a string.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {string} The value of the option.\n * @private\n */\nDygraph.prototype.getStringOption = function (name, opt_seriesName) {\n  return /** @type{string} */this.getOption(name, opt_seriesName);\n};\n\n/**\n * Like getOption(), but specifically returns a boolean.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {boolean} The value of the option.\n * @private\n */\nDygraph.prototype.getBooleanOption = function (name, opt_seriesName) {\n  return /** @type{boolean} */this.getOption(name, opt_seriesName);\n};\n\n/**\n * Like getOption(), but specifically returns a function.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {function(...)} The value of the option.\n * @private\n */\nDygraph.prototype.getFunctionOption = function (name, opt_seriesName) {\n  return /** @type{function(...)} */this.getOption(name, opt_seriesName);\n};\nDygraph.prototype.getOptionForAxis = function (name, axis) {\n  return this.attributes_.getForAxis(name, axis);\n};\n\n/**\n * @private\n * @param {string} axis The name of the axis (i.e. 'x', 'y' or 'y2')\n * @return {...} A function mapping string -> option value\n */\nDygraph.prototype.optionsViewForAxis_ = function (axis) {\n  var self = this;\n  return function (opt) {\n    var axis_opts = self.user_attrs_.axes;\n    if (axis_opts && axis_opts[axis] && axis_opts[axis].hasOwnProperty(opt)) {\n      return axis_opts[axis][opt];\n    }\n\n    // I don't like that this is in a second spot.\n    if (axis === 'x' && opt === 'logscale') {\n      // return the default value.\n      // TODO(konigsberg): pull the default from a global default.\n      return false;\n    }\n\n    // user-specified attributes always trump defaults, even if they're less\n    // specific.\n    if (typeof self.user_attrs_[opt] != 'undefined') {\n      return self.user_attrs_[opt];\n    }\n    axis_opts = self.attrs_.axes;\n    if (axis_opts && axis_opts[axis] && axis_opts[axis].hasOwnProperty(opt)) {\n      return axis_opts[axis][opt];\n    }\n    // check old-style axis options\n    // TODO(danvk): add a deprecation warning if either of these match.\n    if (axis == 'y' && self.axes_[0].hasOwnProperty(opt)) {\n      return self.axes_[0][opt];\n    } else if (axis == 'y2' && self.axes_[1].hasOwnProperty(opt)) {\n      return self.axes_[1][opt];\n    }\n    return self.attr_(opt);\n  };\n};\n\n/**\n * Returns the current rolling period, as set by the user or an option.\n * @return {number} The number of points in the rolling window\n */\nDygraph.prototype.rollPeriod = function () {\n  return this.rollPeriod_;\n};\n\n/**\n * Returns the currently-visible x-range. This can be affected by zooming,\n * panning or a call to updateOptions.\n * Returns a two-element array: [left, right].\n * If the Dygraph has dates on the x-axis, these will be millis since epoch.\n */\nDygraph.prototype.xAxisRange = function () {\n  return this.dateWindow_ ? this.dateWindow_ : this.xAxisExtremes();\n};\n\n/**\n * Returns the lower- and upper-bound x-axis values of the data set.\n */\nDygraph.prototype.xAxisExtremes = function () {\n  var pad = this.getNumericOption('xRangePad') / this.plotter_.area.w;\n  if (this.numRows() === 0) {\n    return [0 - pad, 1 + pad];\n  }\n  var left = this.rawData_[0][0];\n  var right = this.rawData_[this.rawData_.length - 1][0];\n  if (pad) {\n    // Must keep this in sync with dygraph-layout _evaluateLimits()\n    var range = right - left;\n    left -= range * pad;\n    right += range * pad;\n  }\n  return [left, right];\n};\n\n/**\n * Returns the lower- and upper-bound y-axis values for each axis. These are\n * the ranges you'll get if you double-click to zoom out or call resetZoom().\n * The return value is an array of [low, high] tuples, one for each y-axis.\n */\nDygraph.prototype.yAxisExtremes = function () {\n  // TODO(danvk): this is pretty inefficient\n  const packed = this.gatherDatasets_(this.rolledSeries_, null);\n  const {\n    extremes\n  } = packed;\n  const saveAxes = this.axes_;\n  this.computeYAxisRanges_(extremes);\n  const newAxes = this.axes_;\n  this.axes_ = saveAxes;\n  return newAxes.map(axis => axis.extremeRange);\n};\n\n/**\n * Returns the currently-visible y-range for an axis. This can be affected by\n * zooming, panning or a call to updateOptions. Axis indices are zero-based. If\n * called with no arguments, returns the range of the first axis.\n * Returns a two-element array: [bottom, top].\n */\nDygraph.prototype.yAxisRange = function (idx) {\n  if (typeof idx == \"undefined\") idx = 0;\n  if (idx < 0 || idx >= this.axes_.length) {\n    return null;\n  }\n  var axis = this.axes_[idx];\n  return [axis.computedValueRange[0], axis.computedValueRange[1]];\n};\n\n/**\n * Returns the currently-visible y-ranges for each axis. This can be affected by\n * zooming, panning, calls to updateOptions, etc.\n * Returns an array of [bottom, top] pairs, one for each y-axis.\n */\nDygraph.prototype.yAxisRanges = function () {\n  var ret = [];\n  for (var i = 0; i < this.axes_.length; i++) {\n    ret.push(this.yAxisRange(i));\n  }\n  return ret;\n};\n\n// TODO(danvk): use these functions throughout dygraphs.\n/**\n * Convert from data coordinates to canvas/div X/Y coordinates.\n * If specified, do this conversion for the coordinate system of a particular\n * axis. Uses the first axis by default.\n * Returns a two-element array: [X, Y]\n *\n * Note: use toDomXCoord instead of toDomCoords(x, null) and use toDomYCoord\n * instead of toDomCoords(null, y, axis).\n */\nDygraph.prototype.toDomCoords = function (x, y, axis) {\n  return [this.toDomXCoord(x), this.toDomYCoord(y, axis)];\n};\n\n/**\n * Convert from data x coordinates to canvas/div X coordinate.\n * If specified, do this conversion for the coordinate system of a particular\n * axis.\n * Returns a single value or null if x is null.\n */\nDygraph.prototype.toDomXCoord = function (x) {\n  if (x === null) {\n    return null;\n  }\n  var area = this.plotter_.area;\n  var xRange = this.xAxisRange();\n  return area.x + (x - xRange[0]) / (xRange[1] - xRange[0]) * area.w;\n};\n\n/**\n * Convert from data x coordinates to canvas/div Y coordinate and optional\n * axis. Uses the first axis by default.\n *\n * returns a single value or null if y is null.\n */\nDygraph.prototype.toDomYCoord = function (y, axis) {\n  var pct = this.toPercentYCoord(y, axis);\n  if (pct === null) {\n    return null;\n  }\n  var area = this.plotter_.area;\n  return area.y + pct * area.h;\n};\n\n/**\n * Convert from canvas/div coords to data coordinates.\n * If specified, do this conversion for the coordinate system of a particular\n * axis. Uses the first axis by default.\n * Returns a two-element array: [X, Y].\n *\n * Note: use toDataXCoord instead of toDataCoords(x, null) and use toDataYCoord\n * instead of toDataCoords(null, y, axis).\n */\nDygraph.prototype.toDataCoords = function (x, y, axis) {\n  return [this.toDataXCoord(x), this.toDataYCoord(y, axis)];\n};\n\n/**\n * Convert from canvas/div x coordinate to data coordinate.\n *\n * If x is null, this returns null.\n */\nDygraph.prototype.toDataXCoord = function (x) {\n  if (x === null) {\n    return null;\n  }\n  var area = this.plotter_.area;\n  var xRange = this.xAxisRange();\n  if (!this.attributes_.getForAxis(\"logscale\", 'x')) {\n    return xRange[0] + (x - area.x) / area.w * (xRange[1] - xRange[0]);\n  } else {\n    var pct = (x - area.x) / area.w;\n    return utils.logRangeFraction(xRange[0], xRange[1], pct);\n  }\n};\n\n/**\n * Convert from canvas/div y coord to value.\n *\n * If y is null, this returns null.\n * if axis is null, this uses the first axis.\n */\nDygraph.prototype.toDataYCoord = function (y, axis) {\n  if (y === null) {\n    return null;\n  }\n  var area = this.plotter_.area;\n  var yRange = this.yAxisRange(axis);\n  if (typeof axis == \"undefined\") axis = 0;\n  if (!this.attributes_.getForAxis(\"logscale\", axis)) {\n    return yRange[0] + (area.y + area.h - y) / area.h * (yRange[1] - yRange[0]);\n  } else {\n    // Computing the inverse of toDomCoord.\n    var pct = (y - area.y) / area.h;\n    // Note reversed yRange, y1 is on top with pct==0.\n    return utils.logRangeFraction(yRange[1], yRange[0], pct);\n  }\n};\n\n/**\n * Converts a y for an axis to a percentage from the top to the\n * bottom of the drawing area.\n *\n * If the coordinate represents a value visible on the canvas, then\n * the value will be between 0 and 1, where 0 is the top of the canvas.\n * However, this method will return values outside the range, as\n * values can fall outside the canvas.\n *\n * If y is null, this returns null.\n * if axis is null, this uses the first axis.\n *\n * @param {number} y The data y-coordinate.\n * @param {number} [axis] The axis number on which the data coordinate lives.\n * @return {number} A fraction in [0, 1] where 0 = the top edge.\n */\nDygraph.prototype.toPercentYCoord = function (y, axis) {\n  if (y === null) {\n    return null;\n  }\n  if (typeof axis == \"undefined\") axis = 0;\n  var yRange = this.yAxisRange(axis);\n  var pct;\n  var logscale = this.attributes_.getForAxis(\"logscale\", axis);\n  if (logscale) {\n    var logr0 = utils.log10(yRange[0]);\n    var logr1 = utils.log10(yRange[1]);\n    pct = (logr1 - utils.log10(y)) / (logr1 - logr0);\n  } else {\n    // yRange[1] - y is unit distance from the bottom.\n    // yRange[1] - yRange[0] is the scale of the range.\n    // (yRange[1] - y) / (yRange[1] - yRange[0]) is the % from the bottom.\n    pct = (yRange[1] - y) / (yRange[1] - yRange[0]);\n  }\n  return pct;\n};\n\n/**\n * Converts an x value to a percentage from the left to the right of\n * the drawing area.\n *\n * If the coordinate represents a value visible on the canvas, then\n * the value will be between 0 and 1, where 0 is the left of the canvas.\n * However, this method will return values outside the range, as\n * values can fall outside the canvas.\n *\n * If x is null, this returns null.\n * @param {number} x The data x-coordinate.\n * @return {number} A fraction in [0, 1] where 0 = the left edge.\n */\nDygraph.prototype.toPercentXCoord = function (x) {\n  if (x === null) {\n    return null;\n  }\n  var xRange = this.xAxisRange();\n  var pct;\n  var logscale = this.attributes_.getForAxis(\"logscale\", 'x');\n  if (logscale === true) {\n    // logscale can be null so we test for true explicitly.\n    var logr0 = utils.log10(xRange[0]);\n    var logr1 = utils.log10(xRange[1]);\n    pct = (utils.log10(x) - logr0) / (logr1 - logr0);\n  } else {\n    // x - xRange[0] is unit distance from the left.\n    // xRange[1] - xRange[0] is the scale of the range.\n    // The full expression below is the % from the left.\n    pct = (x - xRange[0]) / (xRange[1] - xRange[0]);\n  }\n  return pct;\n};\n\n/**\n * Returns the number of columns (including the independent variable).\n * @return {number} The number of columns.\n */\nDygraph.prototype.numColumns = function () {\n  if (!this.rawData_) return 0;\n  return this.rawData_[0] ? this.rawData_[0].length : this.attr_(\"labels\").length;\n};\n\n/**\n * Returns the number of rows (excluding any header/label row).\n * @return {number} The number of rows, less any header.\n */\nDygraph.prototype.numRows = function () {\n  if (!this.rawData_) return 0;\n  return this.rawData_.length;\n};\n\n/**\n * Returns the value in the given row and column. If the row and column exceed\n * the bounds on the data, returns null. Also returns null if the value is\n * missing.\n * @param {number} row The row number of the data (0-based). Row 0 is the\n *     first row of data, not a header row.\n * @param {number} col The column number of the data (0-based)\n * @return {number} The value in the specified cell or null if the row/col\n *     were out of range.\n */\nDygraph.prototype.getValue = function (row, col) {\n  if (row < 0 || row >= this.rawData_.length) return null;\n  if (col < 0 || col >= this.rawData_[row].length) return null;\n  return this.rawData_[row][col];\n};\n\n/**\n * Generates interface elements for the Dygraph: a containing div, a div to\n * display the current point, and a textbox to adjust the rolling average\n * period. Also creates the Renderer/Layout elements.\n * @private\n */\nDygraph.prototype.createInterface_ = function () {\n  // Create the all-enclosing graph div\n  var enclosing = this.maindiv_;\n  this.graphDiv = document.createElement(\"div\");\n\n  // TODO(danvk): any other styles that are useful to set here?\n  this.graphDiv.style.textAlign = 'left'; // This is a CSS \"reset\"\n  this.graphDiv.style.position = 'relative';\n  enclosing.appendChild(this.graphDiv);\n\n  // Create the canvas for interactive parts of the chart.\n  this.canvas_ = utils.createCanvas();\n  this.canvas_.style.position = \"absolute\";\n  this.canvas_.style.top = 0;\n  this.canvas_.style.left = 0;\n\n  // ... and for static parts of the chart.\n  this.hidden_ = this.createPlotKitCanvas_(this.canvas_);\n  this.canvas_ctx_ = utils.getContext(this.canvas_);\n  this.hidden_ctx_ = utils.getContext(this.hidden_);\n  this.resizeElements_();\n\n  // The interactive parts of the graph are drawn on top of the chart.\n  this.graphDiv.appendChild(this.hidden_);\n  this.graphDiv.appendChild(this.canvas_);\n  this.mouseEventElement_ = this.createMouseEventElement_();\n\n  // Create the grapher\n  this.layout_ = new DygraphLayout(this);\n  var dygraph = this;\n  this.mouseMoveHandler_ = function (e) {\n    dygraph.mouseMove_(e);\n  };\n  this.mouseOutHandler_ = function (e) {\n    // The mouse has left the chart if:\n    // 1. e.target is inside the chart\n    // 2. e.relatedTarget is outside the chart\n    var target = e.target || e.fromElement;\n    var relatedTarget = e.relatedTarget || e.toElement;\n    if (utils.isNodeContainedBy(target, dygraph.graphDiv) && !utils.isNodeContainedBy(relatedTarget, dygraph.graphDiv)) {\n      dygraph.mouseOut_(e);\n    }\n  };\n  this.addAndTrackEvent(window, 'mouseout', this.mouseOutHandler_);\n  this.addAndTrackEvent(this.mouseEventElement_, 'mousemove', this.mouseMoveHandler_);\n\n  // Don't recreate and register the resize handler on subsequent calls.\n  // This happens when the graph is resized.\n  if (!this.resizeHandler_) {\n    this.resizeHandler_ = function (e) {\n      dygraph.resize();\n    };\n\n    // Update when the window is resized.\n    // TODO(danvk): drop frames depending on complexity of the chart.\n    this.addAndTrackEvent(window, 'resize', this.resizeHandler_);\n    this.resizeObserver_ = null;\n    var resizeMode = this.getStringOption('resizable');\n    if (typeof ResizeObserver === 'undefined' && resizeMode !== \"no\") {\n      console.error('ResizeObserver unavailable; ignoring resizable property');\n      resizeMode = \"no\";\n    }\n    if (resizeMode === \"horizontal\" || resizeMode === \"vertical\" || resizeMode === \"both\") {\n      enclosing.style.resize = resizeMode;\n    } else if (resizeMode !== \"passive\") {\n      resizeMode = \"no\";\n    }\n    if (resizeMode !== \"no\") {\n      const maindivOverflow = window.getComputedStyle(enclosing).overflow;\n      if (window.getComputedStyle(enclosing).overflow === 'visible') enclosing.style.overflow = 'hidden';\n      this.resizeObserver_ = new ResizeObserver(this.resizeHandler_);\n      this.resizeObserver_.observe(enclosing);\n    }\n  }\n};\nDygraph.prototype.resizeElements_ = function () {\n  this.graphDiv.style.width = this.width_ + \"px\";\n  this.graphDiv.style.height = this.height_ + \"px\";\n  var pixelRatioOption = this.getNumericOption('pixelRatio');\n  var canvasScale = pixelRatioOption || utils.getContextPixelRatio(this.canvas_ctx_);\n  this.canvas_.width = this.width_ * canvasScale;\n  this.canvas_.height = this.height_ * canvasScale;\n  this.canvas_.style.width = this.width_ + \"px\"; // for IE\n  this.canvas_.style.height = this.height_ + \"px\"; // for IE\n  if (canvasScale !== 1) {\n    this.canvas_ctx_.scale(canvasScale, canvasScale);\n  }\n  var hiddenScale = pixelRatioOption || utils.getContextPixelRatio(this.hidden_ctx_);\n  this.hidden_.width = this.width_ * hiddenScale;\n  this.hidden_.height = this.height_ * hiddenScale;\n  this.hidden_.style.width = this.width_ + \"px\"; // for IE\n  this.hidden_.style.height = this.height_ + \"px\"; // for IE\n  if (hiddenScale !== 1) {\n    this.hidden_ctx_.scale(hiddenScale, hiddenScale);\n  }\n};\n\n/**\n * Detach DOM elements in the dygraph and null out all data references.\n * Calling this when you're done with a dygraph can dramatically reduce memory\n * usage. See, e.g., the tests/perf.html example.\n */\nDygraph.prototype.destroy = function () {\n  this.canvas_ctx_.restore();\n  this.hidden_ctx_.restore();\n\n  // Destroy any plugins, in the reverse order that they were registered.\n  for (var i = this.plugins_.length - 1; i >= 0; i--) {\n    var p = this.plugins_.pop();\n    if (p.plugin.destroy) p.plugin.destroy();\n  }\n  var removeRecursive = function (node) {\n    while (node.hasChildNodes()) {\n      removeRecursive(node.firstChild);\n      node.removeChild(node.firstChild);\n    }\n  };\n  this.removeTrackedEvents_();\n\n  // remove mouse event handlers (This may not be necessary anymore)\n  utils.removeEvent(window, 'mouseout', this.mouseOutHandler_);\n  utils.removeEvent(this.mouseEventElement_, 'mousemove', this.mouseMoveHandler_);\n\n  // dispose of resizing handlers\n  if (this.resizeObserver_) {\n    this.resizeObserver_.disconnect();\n    this.resizeObserver_ = null;\n  }\n  utils.removeEvent(window, 'resize', this.resizeHandler_);\n  this.resizeHandler_ = null;\n  removeRecursive(this.maindiv_);\n  var nullOut = function nullOut(obj) {\n    for (var n in obj) {\n      if (typeof obj[n] === 'object') {\n        obj[n] = null;\n      }\n    }\n  };\n  // These may not all be necessary, but it can't hurt...\n  nullOut(this.layout_);\n  nullOut(this.plotter_);\n  nullOut(this);\n};\n\n/**\n * Creates the canvas on which the chart will be drawn. Only the Renderer ever\n * draws on this particular canvas. All Dygraph work (i.e. drawing hover dots\n * or the zoom rectangles) is done on this.canvas_.\n * @param {Object} canvas The Dygraph canvas over which to overlay the plot\n * @return {Object} The newly-created canvas\n * @private\n */\nDygraph.prototype.createPlotKitCanvas_ = function (canvas) {\n  var h = utils.createCanvas();\n  h.style.position = \"absolute\";\n  // TODO(danvk): h should be offset from canvas. canvas needs to include\n  // some extra area to make it easier to zoom in on the far left and far\n  // right. h needs to be precisely the plot area, so that clipping occurs.\n  h.style.top = canvas.style.top;\n  h.style.left = canvas.style.left;\n  h.width = this.width_;\n  h.height = this.height_;\n  h.style.width = this.width_ + \"px\"; // for IE\n  h.style.height = this.height_ + \"px\"; // for IE\n  return h;\n};\n\n/**\n * Creates an overlay element used to handle mouse events.\n * @return {Object} The mouse event element.\n * @private\n */\nDygraph.prototype.createMouseEventElement_ = function () {\n  return this.canvas_;\n};\n\n/**\n * Generate a set of distinct colors for the data series. This is done with a\n * color wheel. Saturation/Value are customizable, and the hue is\n * equally-spaced around the color wheel. If a custom set of colors is\n * specified, that is used instead.\n * @private\n */\nDygraph.prototype.setColors_ = function () {\n  var labels = this.getLabels();\n  var num = labels.length - 1;\n  this.colors_ = [];\n  this.colorsMap_ = {};\n\n  // These are used for when no custom colors are specified.\n  var sat = this.getNumericOption('colorSaturation') || 1.0;\n  var val = this.getNumericOption('colorValue') || 0.5;\n  var half = Math.ceil(num / 2);\n  var colors = this.getOption('colors');\n  var visibility = this.visibility();\n  for (var i = 0; i < num; i++) {\n    if (!visibility[i]) {\n      continue;\n    }\n    var label = labels[i + 1];\n    var colorStr = this.attributes_.getForSeries('color', label);\n    if (!colorStr) {\n      if (colors) {\n        colorStr = colors[i % colors.length];\n      } else {\n        // alternate colors for high contrast.\n        var idx = i % 2 ? half + (i + 1) / 2 : Math.ceil((i + 1) / 2);\n        var hue = 1.0 * idx / (1 + num);\n        colorStr = utils.hsvToRGB(hue, sat, val);\n      }\n    }\n    this.colors_.push(colorStr);\n    this.colorsMap_[label] = colorStr;\n  }\n};\n\n/**\n * Return the list of colors. This is either the list of colors passed in the\n * attributes or the autogenerated list of rgb(r,g,b) strings.\n * This does not return colors for invisible series.\n * @return {Array.<string>} The list of colors.\n */\nDygraph.prototype.getColors = function () {\n  return this.colors_;\n};\n\n/**\n * Returns a few attributes of a series, i.e. its color, its visibility, which\n * axis it's assigned to, and its column in the original data.\n * Returns null if the series does not exist.\n * Otherwise, returns an object with column, visibility, color and axis properties.\n * The \"axis\" property will be set to 1 for y1 and 2 for y2.\n * The \"column\" property can be fed back into getValue(row, column) to get\n * values for this series.\n */\nDygraph.prototype.getPropertiesForSeries = function (series_name) {\n  var idx = -1;\n  var labels = this.getLabels();\n  for (var i = 1; i < labels.length; i++) {\n    if (labels[i] == series_name) {\n      idx = i;\n      break;\n    }\n  }\n  if (idx == -1) return null;\n  return {\n    name: series_name,\n    column: idx,\n    visible: this.visibility()[idx - 1],\n    color: this.colorsMap_[series_name],\n    axis: 1 + this.attributes_.axisForSeries(series_name)\n  };\n};\n\n/**\n * Create the text box to adjust the averaging period\n * @private\n */\nDygraph.prototype.createRollInterface_ = function () {\n  // Create a roller if one doesn't exist already.\n  var roller = this.roller_;\n  if (!roller) {\n    this.roller_ = roller = document.createElement(\"input\");\n    roller.type = \"text\";\n    roller.style.display = \"none\";\n    roller.className = 'dygraph-roller';\n    this.graphDiv.appendChild(roller);\n  }\n  var display = this.getBooleanOption('showRoller') ? 'block' : 'none';\n  var area = this.getArea();\n  var textAttr = {\n    \"top\": area.y + area.h - 25 + \"px\",\n    \"left\": area.x + 1 + \"px\",\n    \"display\": display\n  };\n  roller.size = \"2\";\n  roller.value = this.rollPeriod_;\n  utils.update(roller.style, textAttr);\n  const that = this;\n  roller.onchange = function onchange() {\n    return that.adjustRoll(roller.value);\n  };\n};\n\n/**\n * Set up all the mouse handlers needed to capture dragging behavior for zoom\n * events.\n * @private\n */\nDygraph.prototype.createDragInterface_ = function () {\n  var context = {\n    // Tracks whether the mouse is down right now\n    isZooming: false,\n    isPanning: false,\n    // is this drag part of a pan?\n    is2DPan: false,\n    // if so, is that pan 1- or 2-dimensional?\n    dragStartX: null,\n    // pixel coordinates\n    dragStartY: null,\n    // pixel coordinates\n    dragEndX: null,\n    // pixel coordinates\n    dragEndY: null,\n    // pixel coordinates\n    dragDirection: null,\n    prevEndX: null,\n    // pixel coordinates\n    prevEndY: null,\n    // pixel coordinates\n    prevDragDirection: null,\n    cancelNextDblclick: false,\n    // see comment in dygraph-interaction-model.js\n\n    // The value on the left side of the graph when a pan operation starts.\n    initialLeftmostDate: null,\n    // The number of units each pixel spans. (This won't be valid for log\n    // scales)\n    xUnitsPerPixel: null,\n    // TODO(danvk): update this comment\n    // The range in second/value units that the viewport encompasses during a\n    // panning operation.\n    dateRange: null,\n    // Top-left corner of the canvas, in DOM coords\n    // TODO(konigsberg): Rename topLeftCanvasX, topLeftCanvasY.\n    px: 0,\n    py: 0,\n    // Values for use with panEdgeFraction, which limit how far outside the\n    // graph's data boundaries it can be panned.\n    boundedDates: null,\n    // [minDate, maxDate]\n    boundedValues: null,\n    // [[minValue, maxValue] ...]\n\n    // We cover iframes during mouse interactions. See comments in\n    // dygraph-utils.js for more info on why this is a good idea.\n    tarp: new IFrameTarp(),\n    // contextB is the same thing as this context object but renamed.\n    initializeMouseDown: function (event, g, contextB) {\n      // prevents mouse drags from selecting page text.\n      if (event.preventDefault) {\n        event.preventDefault(); // Firefox, Chrome, etc.\n      } else {\n        event.returnValue = false; // IE\n        event.cancelBubble = true;\n      }\n      var canvasPos = utils.findPos(g.canvas_);\n      contextB.px = canvasPos.x;\n      contextB.py = canvasPos.y;\n      contextB.dragStartX = utils.dragGetX_(event, contextB);\n      contextB.dragStartY = utils.dragGetY_(event, contextB);\n      contextB.cancelNextDblclick = false;\n      contextB.tarp.cover();\n    },\n    destroy: function () {\n      var context = this;\n      if (context.isZooming || context.isPanning) {\n        context.isZooming = false;\n        context.dragStartX = null;\n        context.dragStartY = null;\n      }\n      if (context.isPanning) {\n        context.isPanning = false;\n        context.draggingDate = null;\n        context.dateRange = null;\n        for (var i = 0; i < self.axes_.length; i++) {\n          delete self.axes_[i].draggingValue;\n          delete self.axes_[i].dragValueRange;\n        }\n      }\n      context.tarp.uncover();\n    }\n  };\n  var interactionModel = this.getOption(\"interactionModel\");\n\n  // Self is the graph.\n  var self = this;\n\n  // Function that binds the graph and context to the handler.\n  var bindHandler = function (handler) {\n    return function (event) {\n      handler(event, self, context);\n    };\n  };\n  for (var eventName in interactionModel) {\n    if (!interactionModel.hasOwnProperty(eventName)) continue;\n    this.addAndTrackEvent(this.mouseEventElement_, eventName, bindHandler(interactionModel[eventName]));\n  }\n\n  // If the user releases the mouse button during a drag, but not over the\n  // canvas, then it doesn't count as a zooming action.\n  if (!interactionModel.willDestroyContextMyself) {\n    var mouseUpHandler = function (event) {\n      context.destroy();\n    };\n    this.addAndTrackEvent(document, 'mouseup', mouseUpHandler);\n  }\n};\n\n/**\n * Draw a gray zoom rectangle over the desired area of the canvas. Also clears\n * up any previous zoom rectangles that were drawn. This could be optimized to\n * avoid extra redrawing, but it's tricky to avoid interactions with the status\n * dots.\n *\n * @param {number} direction the direction of the zoom rectangle. Acceptable\n *     values are utils.HORIZONTAL and utils.VERTICAL.\n * @param {number} startX The X position where the drag started, in canvas\n *     coordinates.\n * @param {number} endX The current X position of the drag, in canvas coords.\n * @param {number} startY The Y position where the drag started, in canvas\n *     coordinates.\n * @param {number} endY The current Y position of the drag, in canvas coords.\n * @param {number} prevDirection the value of direction on the previous call to\n *     this function. Used to avoid excess redrawing\n * @param {number} prevEndX The value of endX on the previous call to this\n *     function. Used to avoid excess redrawing\n * @param {number} prevEndY The value of endY on the previous call to this\n *     function. Used to avoid excess redrawing\n * @private\n */\nDygraph.prototype.drawZoomRect_ = function (direction, startX, endX, startY, endY, prevDirection, prevEndX, prevEndY) {\n  var ctx = this.canvas_ctx_;\n\n  // Clean up from the previous rect if necessary\n  if (prevDirection == utils.HORIZONTAL) {\n    ctx.clearRect(Math.min(startX, prevEndX), this.layout_.getPlotArea().y, Math.abs(startX - prevEndX), this.layout_.getPlotArea().h);\n  } else if (prevDirection == utils.VERTICAL) {\n    ctx.clearRect(this.layout_.getPlotArea().x, Math.min(startY, prevEndY), this.layout_.getPlotArea().w, Math.abs(startY - prevEndY));\n  }\n\n  // Draw a light-grey rectangle to show the new viewing area\n  if (direction == utils.HORIZONTAL) {\n    if (endX && startX) {\n      ctx.fillStyle = \"rgba(128,128,128,0.33)\";\n      ctx.fillRect(Math.min(startX, endX), this.layout_.getPlotArea().y, Math.abs(endX - startX), this.layout_.getPlotArea().h);\n    }\n  } else if (direction == utils.VERTICAL) {\n    if (endY && startY) {\n      ctx.fillStyle = \"rgba(128,128,128,0.33)\";\n      ctx.fillRect(this.layout_.getPlotArea().x, Math.min(startY, endY), this.layout_.getPlotArea().w, Math.abs(endY - startY));\n    }\n  }\n};\n\n/**\n * Clear the zoom rectangle (and perform no zoom).\n * @private\n */\nDygraph.prototype.clearZoomRect_ = function () {\n  this.currentZoomRectArgs_ = null;\n  this.canvas_ctx_.clearRect(0, 0, this.width_, this.height_);\n};\n\n/**\n * Zoom to something containing [lowX, highX]. These are pixel coordinates in\n * the canvas. The exact zoom window may be slightly larger if there are no data\n * points near lowX or highX. Don't confuse this function with doZoomXDates,\n * which accepts dates that match the raw data. This function redraws the graph.\n *\n * @param {number} lowX The leftmost pixel value that should be visible.\n * @param {number} highX The rightmost pixel value that should be visible.\n * @private\n */\nDygraph.prototype.doZoomX_ = function (lowX, highX) {\n  this.currentZoomRectArgs_ = null;\n  // Find the earliest and latest dates contained in this canvasx range.\n  // Convert the call to date ranges of the raw data.\n  var minDate = this.toDataXCoord(lowX);\n  var maxDate = this.toDataXCoord(highX);\n  this.doZoomXDates_(minDate, maxDate);\n};\n\n/**\n * Zoom to something containing [minDate, maxDate] values. Don't confuse this\n * method with doZoomX which accepts pixel coordinates. This function redraws\n * the graph.\n *\n * @param {number} minDate The minimum date that should be visible.\n * @param {number} maxDate The maximum date that should be visible.\n * @private\n */\nDygraph.prototype.doZoomXDates_ = function (minDate, maxDate) {\n  // TODO(danvk): when xAxisRange is null (i.e. \"fit to data\", the animation\n  // can produce strange effects. Rather than the x-axis transitioning slowly\n  // between values, it can jerk around.)\n  var old_window = this.xAxisRange();\n  var new_window = [minDate, maxDate];\n  const zoomCallback = this.getFunctionOption('zoomCallback');\n  const that = this;\n  this.doAnimatedZoom(old_window, new_window, null, null, function animatedZoomCallback() {\n    if (zoomCallback) {\n      zoomCallback.call(that, minDate, maxDate, that.yAxisRanges());\n    }\n  });\n};\n\n/**\n * Zoom to something containing [lowY, highY]. These are pixel coordinates in\n * the canvas. This function redraws the graph.\n *\n * @param {number} lowY The topmost pixel value that should be visible.\n * @param {number} highY The lowest pixel value that should be visible.\n * @private\n */\nDygraph.prototype.doZoomY_ = function (lowY, highY) {\n  this.currentZoomRectArgs_ = null;\n  // Find the highest and lowest values in pixel range for each axis.\n  // Note that lowY (in pixels) corresponds to the max Value (in data coords).\n  // This is because pixels increase as you go down on the screen, whereas data\n  // coordinates increase as you go up the screen.\n  var oldValueRanges = this.yAxisRanges();\n  var newValueRanges = [];\n  for (var i = 0; i < this.axes_.length; i++) {\n    var hi = this.toDataYCoord(lowY, i);\n    var low = this.toDataYCoord(highY, i);\n    newValueRanges.push([low, hi]);\n  }\n  const zoomCallback = this.getFunctionOption('zoomCallback');\n  const that = this;\n  this.doAnimatedZoom(null, null, oldValueRanges, newValueRanges, function animatedZoomCallback() {\n    if (zoomCallback) {\n      const [minX, maxX] = that.xAxisRange();\n      zoomCallback.call(that, minX, maxX, that.yAxisRanges());\n    }\n  });\n};\n\n/**\n * Transition function to use in animations. Returns values between 0.0\n * (totally old values) and 1.0 (totally new values) for each frame.\n * @private\n */\nDygraph.zoomAnimationFunction = function (frame, numFrames) {\n  var k = 1.5;\n  return (1.0 - Math.pow(k, -frame)) / (1.0 - Math.pow(k, -numFrames));\n};\n\n/**\n * Reset the zoom to the original view coordinates. This is the same as\n * double-clicking on the graph.\n */\nDygraph.prototype.resetZoom = function () {\n  const dirtyX = this.isZoomed('x');\n  const dirtyY = this.isZoomed('y');\n  const dirty = dirtyX || dirtyY;\n\n  // Clear any selection, since it's likely to be drawn in the wrong place.\n  this.clearSelection();\n  if (!dirty) return;\n\n  // Calculate extremes to avoid lack of padding on reset.\n  const [minDate, maxDate] = this.xAxisExtremes();\n  const animatedZooms = this.getBooleanOption('animatedZooms');\n  const zoomCallback = this.getFunctionOption('zoomCallback');\n\n  // TODO(danvk): merge this block w/ the code below.\n  // TODO(danvk): factor out a generic, public zoomTo method.\n  if (!animatedZooms) {\n    this.dateWindow_ = null;\n    this.axes_.forEach(axis => {\n      if (axis.valueRange) delete axis.valueRange;\n    });\n    this.drawGraph_();\n    if (zoomCallback) {\n      zoomCallback.call(this, minDate, maxDate, this.yAxisRanges());\n    }\n    return;\n  }\n  var oldWindow = null,\n    newWindow = null,\n    oldValueRanges = null,\n    newValueRanges = null;\n  if (dirtyX) {\n    oldWindow = this.xAxisRange();\n    newWindow = [minDate, maxDate];\n  }\n  if (dirtyY) {\n    oldValueRanges = this.yAxisRanges();\n    newValueRanges = this.yAxisExtremes();\n  }\n  const that = this;\n  this.doAnimatedZoom(oldWindow, newWindow, oldValueRanges, newValueRanges, function animatedZoomCallback() {\n    that.dateWindow_ = null;\n    that.axes_.forEach(axis => {\n      if (axis.valueRange) delete axis.valueRange;\n    });\n    if (zoomCallback) {\n      zoomCallback.call(that, minDate, maxDate, that.yAxisRanges());\n    }\n  });\n};\n\n/**\n * Combined animation logic for all zoom functions.\n * either the x parameters or y parameters may be null.\n * @private\n */\nDygraph.prototype.doAnimatedZoom = function (oldXRange, newXRange, oldYRanges, newYRanges, callback) {\n  var steps = this.getBooleanOption(\"animatedZooms\") ? Dygraph.ANIMATION_STEPS : 1;\n  var windows = [];\n  var valueRanges = [];\n  var step, frac;\n  if (oldXRange !== null && newXRange !== null) {\n    for (step = 1; step <= steps; step++) {\n      frac = Dygraph.zoomAnimationFunction(step, steps);\n      windows[step - 1] = [oldXRange[0] * (1 - frac) + frac * newXRange[0], oldXRange[1] * (1 - frac) + frac * newXRange[1]];\n    }\n  }\n  if (oldYRanges !== null && newYRanges !== null) {\n    for (step = 1; step <= steps; step++) {\n      frac = Dygraph.zoomAnimationFunction(step, steps);\n      var thisRange = [];\n      for (var j = 0; j < this.axes_.length; j++) {\n        thisRange.push([oldYRanges[j][0] * (1 - frac) + frac * newYRanges[j][0], oldYRanges[j][1] * (1 - frac) + frac * newYRanges[j][1]]);\n      }\n      valueRanges[step - 1] = thisRange;\n    }\n  }\n  const that = this;\n  utils.repeatAndCleanup(function (step) {\n    if (valueRanges.length) {\n      for (var i = 0; i < that.axes_.length; i++) {\n        var w = valueRanges[step][i];\n        that.axes_[i].valueRange = [w[0], w[1]];\n      }\n    }\n    if (windows.length) {\n      that.dateWindow_ = windows[step];\n    }\n    that.drawGraph_();\n  }, steps, Dygraph.ANIMATION_DURATION / steps, callback);\n};\n\n/**\n * Get the current graph's area object.\n *\n * Returns: {x, y, w, h}\n */\nDygraph.prototype.getArea = function () {\n  return this.plotter_.area;\n};\n\n/**\n * Convert a mouse event to DOM coordinates relative to the graph origin.\n *\n * Returns a two-element array: [X, Y].\n */\nDygraph.prototype.eventToDomCoords = function (event) {\n  if (event.offsetX && event.offsetY) {\n    return [event.offsetX, event.offsetY];\n  } else {\n    var eventElementPos = utils.findPos(this.mouseEventElement_);\n    var canvasx = utils.pageX(event) - eventElementPos.x;\n    var canvasy = utils.pageY(event) - eventElementPos.y;\n    return [canvasx, canvasy];\n  }\n};\n\n/**\n * Given a canvas X coordinate, find the closest row.\n * @param {number} domX graph-relative DOM X coordinate\n * Returns {number} row number.\n * @private\n */\nDygraph.prototype.findClosestRow = function (domX) {\n  var minDistX = Infinity;\n  var closestRow = -1;\n  var sets = this.layout_.points;\n  for (var i = 0; i < sets.length; i++) {\n    var points = sets[i];\n    var len = points.length;\n    for (var j = 0; j < len; j++) {\n      var point = points[j];\n      if (!utils.isValidPoint(point, true)) continue;\n      var dist = Math.abs(point.canvasx - domX);\n      if (dist < minDistX) {\n        minDistX = dist;\n        closestRow = point.idx;\n      }\n    }\n  }\n  return closestRow;\n};\n\n/**\n * Given canvas X,Y coordinates, find the closest point.\n *\n * This finds the individual data point across all visible series\n * that's closest to the supplied DOM coordinates using the standard\n * Euclidean X,Y distance.\n *\n * @param {number} domX graph-relative DOM X coordinate\n * @param {number} domY graph-relative DOM Y coordinate\n * Returns: {row, seriesName, point}\n * @private\n */\nDygraph.prototype.findClosestPoint = function (domX, domY) {\n  var minDist = Infinity;\n  var dist, dx, dy, point, closestPoint, closestSeries, closestRow;\n  for (var setIdx = this.layout_.points.length - 1; setIdx >= 0; --setIdx) {\n    var points = this.layout_.points[setIdx];\n    for (var i = 0; i < points.length; ++i) {\n      point = points[i];\n      if (!utils.isValidPoint(point)) continue;\n      dx = point.canvasx - domX;\n      dy = point.canvasy - domY;\n      dist = dx * dx + dy * dy;\n      if (dist < minDist) {\n        minDist = dist;\n        closestPoint = point;\n        closestSeries = setIdx;\n        closestRow = point.idx;\n      }\n    }\n  }\n  var name = this.layout_.setNames[closestSeries];\n  return {\n    row: closestRow,\n    seriesName: name,\n    point: closestPoint\n  };\n};\n\n/**\n * Given canvas X,Y coordinates, find the touched area in a stacked graph.\n *\n * This first finds the X data point closest to the supplied DOM X coordinate,\n * then finds the series which puts the Y coordinate on top of its filled area,\n * using linear interpolation between adjacent point pairs.\n *\n * @param {number} domX graph-relative DOM X coordinate\n * @param {number} domY graph-relative DOM Y coordinate\n * Returns: {row, seriesName, point}\n * @private\n */\nDygraph.prototype.findStackedPoint = function (domX, domY) {\n  var row = this.findClosestRow(domX);\n  var closestPoint, closestSeries;\n  for (var setIdx = 0; setIdx < this.layout_.points.length; ++setIdx) {\n    var boundary = this.getLeftBoundary_(setIdx);\n    var rowIdx = row - boundary;\n    var points = this.layout_.points[setIdx];\n    if (rowIdx >= points.length) continue;\n    var p1 = points[rowIdx];\n    if (!utils.isValidPoint(p1)) continue;\n    var py = p1.canvasy;\n    if (domX > p1.canvasx && rowIdx + 1 < points.length) {\n      // interpolate series Y value using next point\n      var p2 = points[rowIdx + 1];\n      if (utils.isValidPoint(p2)) {\n        var dx = p2.canvasx - p1.canvasx;\n        if (dx > 0) {\n          var r = (domX - p1.canvasx) / dx;\n          py += r * (p2.canvasy - p1.canvasy);\n        }\n      }\n    } else if (domX < p1.canvasx && rowIdx > 0) {\n      // interpolate series Y value using previous point\n      var p0 = points[rowIdx - 1];\n      if (utils.isValidPoint(p0)) {\n        var dx = p1.canvasx - p0.canvasx;\n        if (dx > 0) {\n          var r = (p1.canvasx - domX) / dx;\n          py += r * (p0.canvasy - p1.canvasy);\n        }\n      }\n    }\n    // Stop if the point (domX, py) is above this series' upper edge\n    if (setIdx === 0 || py < domY) {\n      closestPoint = p1;\n      closestSeries = setIdx;\n    }\n  }\n  var name = this.layout_.setNames[closestSeries];\n  return {\n    row: row,\n    seriesName: name,\n    point: closestPoint\n  };\n};\n\n/**\n * When the mouse moves in the canvas, display information about a nearby data\n * point and draw dots over those points in the data series. This function\n * takes care of cleanup of previously-drawn dots.\n * @param {Object} event The mousemove event from the browser.\n * @private\n */\nDygraph.prototype.mouseMove_ = function (event) {\n  // This prevents JS errors when mousing over the canvas before data loads.\n  var points = this.layout_.points;\n  if (points === undefined || points === null) return;\n  var canvasCoords = this.eventToDomCoords(event);\n  var canvasx = canvasCoords[0];\n  var canvasy = canvasCoords[1];\n  var highlightSeriesOpts = this.getOption(\"highlightSeriesOpts\");\n  var selectionChanged = false;\n  if (highlightSeriesOpts && !this.isSeriesLocked()) {\n    var closest;\n    if (this.getBooleanOption(\"stackedGraph\")) {\n      closest = this.findStackedPoint(canvasx, canvasy);\n    } else {\n      closest = this.findClosestPoint(canvasx, canvasy);\n    }\n    selectionChanged = this.setSelection(closest.row, closest.seriesName);\n  } else {\n    var idx = this.findClosestRow(canvasx);\n    selectionChanged = this.setSelection(idx);\n  }\n  var callback = this.getFunctionOption(\"highlightCallback\");\n  if (callback && selectionChanged) {\n    callback.call(this, event, this.lastx_, this.selPoints_, this.lastRow_, this.highlightSet_);\n  }\n};\n\n/**\n * Fetch left offset from the specified set index or if not passed, the\n * first defined boundaryIds record (see bug #236).\n * @private\n */\nDygraph.prototype.getLeftBoundary_ = function (setIdx) {\n  if (this.boundaryIds_[setIdx]) {\n    return this.boundaryIds_[setIdx][0];\n  } else {\n    for (var i = 0; i < this.boundaryIds_.length; i++) {\n      if (this.boundaryIds_[i] !== undefined) {\n        return this.boundaryIds_[i][0];\n      }\n    }\n    return 0;\n  }\n};\nDygraph.prototype.animateSelection_ = function (direction) {\n  var totalSteps = 10;\n  var millis = 30;\n  if (this.fadeLevel === undefined) this.fadeLevel = 0;\n  if (this.animateId === undefined) this.animateId = 0;\n  var start = this.fadeLevel;\n  var steps = direction < 0 ? start : totalSteps - start;\n  if (steps <= 0) {\n    if (this.fadeLevel) {\n      this.updateSelection_(1.0);\n    }\n    return;\n  }\n  var thisId = ++this.animateId;\n  var that = this;\n  var cleanupIfClearing = function () {\n    // if we haven't reached fadeLevel 0 in the max frame time,\n    // ensure that the clear happens and just go to 0\n    if (that.fadeLevel !== 0 && direction < 0) {\n      that.fadeLevel = 0;\n      that.clearSelection();\n    }\n  };\n  utils.repeatAndCleanup(function (n) {\n    // ignore simultaneous animations\n    if (that.animateId != thisId) return;\n    that.fadeLevel += direction;\n    if (that.fadeLevel === 0) {\n      that.clearSelection();\n    } else {\n      that.updateSelection_(that.fadeLevel / totalSteps);\n    }\n  }, steps, millis, cleanupIfClearing);\n};\n\n/**\n * Draw dots over the selectied points in the data series. This function\n * takes care of cleanup of previously-drawn dots.\n * @private\n */\nDygraph.prototype.updateSelection_ = function (opt_animFraction) {\n  /*var defaultPrevented = */\n  this.cascadeEvents_('select', {\n    selectedRow: this.lastRow_ === -1 ? undefined : this.lastRow_,\n    selectedX: this.lastx_ === null ? undefined : this.lastx_,\n    selectedPoints: this.selPoints_\n  });\n  // TODO(danvk): use defaultPrevented here?\n\n  // Clear the previously drawn vertical, if there is one\n  var i;\n  var ctx = this.canvas_ctx_;\n  if (this.getOption('highlightSeriesOpts')) {\n    ctx.clearRect(0, 0, this.width_, this.height_);\n    var alpha = 1.0 - this.getNumericOption('highlightSeriesBackgroundAlpha');\n    var backgroundColor = utils.toRGB_(this.getOption('highlightSeriesBackgroundColor'));\n    if (alpha) {\n      // Activating background fade includes an animation effect for a gradual\n      // fade. TODO(klausw): make this independently configurable if it causes\n      // issues? Use a shared preference to control animations?\n      var animateBackgroundFade = this.getBooleanOption('animateBackgroundFade');\n      if (animateBackgroundFade) {\n        if (opt_animFraction === undefined) {\n          // start a new animation\n          this.animateSelection_(1);\n          return;\n        }\n        alpha *= opt_animFraction;\n      }\n      ctx.fillStyle = 'rgba(' + backgroundColor.r + ',' + backgroundColor.g + ',' + backgroundColor.b + ',' + alpha + ')';\n      ctx.fillRect(0, 0, this.width_, this.height_);\n    }\n\n    // Redraw only the highlighted series in the interactive canvas (not the\n    // static plot canvas, which is where series are usually drawn).\n    this.plotter_._renderLineChart(this.highlightSet_, ctx);\n  } else if (this.previousVerticalX_ >= 0) {\n    // Determine the maximum highlight circle size.\n    var maxCircleSize = 0;\n    var labels = this.attr_('labels');\n    for (i = 1; i < labels.length; i++) {\n      var r = this.getNumericOption('highlightCircleSize', labels[i]);\n      if (r > maxCircleSize) maxCircleSize = r;\n    }\n    var px = this.previousVerticalX_;\n    ctx.clearRect(px - maxCircleSize - 1, 0, 2 * maxCircleSize + 2, this.height_);\n  }\n  if (this.selPoints_.length > 0) {\n    // Draw colored circles over the center of each selected point\n    var canvasx = this.selPoints_[0].canvasx;\n    ctx.save();\n    for (i = 0; i < this.selPoints_.length; i++) {\n      var pt = this.selPoints_[i];\n      if (isNaN(pt.canvasy)) continue;\n      var circleSize = this.getNumericOption('highlightCircleSize', pt.name);\n      var callback = this.getFunctionOption(\"drawHighlightPointCallback\", pt.name);\n      var color = this.plotter_.colors[pt.name];\n      if (!callback) {\n        callback = utils.Circles.DEFAULT;\n      }\n      ctx.lineWidth = this.getNumericOption('strokeWidth', pt.name);\n      ctx.strokeStyle = color;\n      ctx.fillStyle = color;\n      callback.call(this, this, pt.name, ctx, canvasx, pt.canvasy, color, circleSize, pt.idx);\n    }\n    ctx.restore();\n    this.previousVerticalX_ = canvasx;\n  }\n};\n\n/**\n * Manually set the selected points and display information about them in the\n * legend. The selection can be cleared using clearSelection() and queried\n * using getSelection().\n *\n * To set a selected series but not a selected point, call setSelection with\n * row=false and the selected series name.\n *\n * @param {number} row Row number that should be highlighted (i.e. appear with\n * hover dots on the chart).\n * @param {seriesName} optional series name to highlight that series with the\n * the highlightSeriesOpts setting.\n * @param {locked} optional If true, keep seriesName selected when mousing\n * over the graph, disabling closest-series highlighting. Call clearSelection()\n * to unlock it.\n * @param {trigger_highlight_callback} optional If true, trigger any\n * user-defined highlightCallback if highlightCallback has been set.\n */\nDygraph.prototype.setSelection = function setSelection(row, opt_seriesName, opt_locked, opt_trigger_highlight_callback) {\n  // Extract the points we've selected\n  this.selPoints_ = [];\n  var changed = false;\n  if (row !== false && row >= 0) {\n    if (row != this.lastRow_) changed = true;\n    this.lastRow_ = row;\n    for (var setIdx = 0; setIdx < this.layout_.points.length; ++setIdx) {\n      var points = this.layout_.points[setIdx];\n      // Check if the point at the appropriate index is the point we're looking\n      // for.  If it is, just use it, otherwise search the array for a point\n      // in the proper place.\n      var setRow = row - this.getLeftBoundary_(setIdx);\n      if (setRow >= 0 && setRow < points.length && points[setRow].idx == row) {\n        var point = points[setRow];\n        if (point.yval !== null) this.selPoints_.push(point);\n      } else {\n        for (var pointIdx = 0; pointIdx < points.length; ++pointIdx) {\n          var point = points[pointIdx];\n          if (point.idx == row) {\n            if (point.yval !== null) {\n              this.selPoints_.push(point);\n            }\n            break;\n          }\n        }\n      }\n    }\n  } else {\n    if (this.lastRow_ >= 0) changed = true;\n    this.lastRow_ = -1;\n  }\n  if (this.selPoints_.length) {\n    this.lastx_ = this.selPoints_[0].xval;\n  } else {\n    this.lastx_ = null;\n  }\n  if (opt_seriesName !== undefined) {\n    if (this.highlightSet_ !== opt_seriesName) changed = true;\n    this.highlightSet_ = opt_seriesName;\n  }\n  if (opt_locked !== undefined) {\n    this.lockedSet_ = opt_locked;\n  }\n  if (changed) {\n    this.updateSelection_(undefined);\n    if (opt_trigger_highlight_callback) {\n      var callback = this.getFunctionOption(\"highlightCallback\");\n      if (callback) {\n        var event = {};\n        callback.call(this, event, this.lastx_, this.selPoints_, this.lastRow_, this.highlightSet_);\n      }\n    }\n  }\n  return changed;\n};\n\n/**\n * The mouse has left the canvas. Clear out whatever artifacts remain\n * @param {Object} event the mouseout event from the browser.\n * @private\n */\nDygraph.prototype.mouseOut_ = function (event) {\n  if (this.getFunctionOption(\"unhighlightCallback\")) {\n    this.getFunctionOption(\"unhighlightCallback\").call(this, event);\n  }\n  if (this.getBooleanOption(\"hideOverlayOnMouseOut\") && !this.lockedSet_) {\n    this.clearSelection();\n  }\n};\n\n/**\n * Clears the current selection (i.e. points that were highlighted by moving\n * the mouse over the chart).\n */\nDygraph.prototype.clearSelection = function () {\n  this.cascadeEvents_('deselect', {});\n  this.lockedSet_ = false;\n  // Get rid of the overlay data\n  if (this.fadeLevel) {\n    this.animateSelection_(-1);\n    return;\n  }\n  this.canvas_ctx_.clearRect(0, 0, this.width_, this.height_);\n  this.fadeLevel = 0;\n  this.selPoints_ = [];\n  this.lastx_ = null;\n  this.lastRow_ = -1;\n  this.highlightSet_ = null;\n};\n\n/**\n * Returns the number of the currently selected row. To get data for this row,\n * you can use the getValue method.\n * @return {number} row number, or -1 if nothing is selected\n */\nDygraph.prototype.getSelection = function () {\n  if (!this.selPoints_ || this.selPoints_.length < 1) {\n    return -1;\n  }\n  for (var setIdx = 0; setIdx < this.layout_.points.length; setIdx++) {\n    var points = this.layout_.points[setIdx];\n    for (var row = 0; row < points.length; row++) {\n      if (points[row].x == this.selPoints_[0].x) {\n        return points[row].idx;\n      }\n    }\n  }\n  return -1;\n};\n\n/**\n * Returns the name of the currently-highlighted series.\n * Only available when the highlightSeriesOpts option is in use.\n */\nDygraph.prototype.getHighlightSeries = function () {\n  return this.highlightSet_;\n};\n\n/**\n * Returns true if the currently-highlighted series was locked\n * via setSelection(..., seriesName, true).\n */\nDygraph.prototype.isSeriesLocked = function () {\n  return this.lockedSet_;\n};\n\n/**\n * Fires when there's data available to be graphed.\n * @param {string} data Raw CSV data to be plotted\n * @private\n */\nDygraph.prototype.loadedEvent_ = function (data) {\n  this.rawData_ = this.parseCSV_(data);\n  this.cascadeDataDidUpdateEvent_();\n  this.predraw_();\n};\n\n/**\n * Add ticks on the x-axis representing years, months, quarters, weeks, or days\n * @private\n */\nDygraph.prototype.addXTicks_ = function () {\n  // Determine the correct ticks scale on the x-axis: quarterly, monthly, ...\n  var range;\n  if (this.dateWindow_) {\n    range = [this.dateWindow_[0], this.dateWindow_[1]];\n  } else {\n    range = this.xAxisExtremes();\n  }\n  var xAxisOptionsView = this.optionsViewForAxis_('x');\n  var xTicks = xAxisOptionsView('ticker')(range[0], range[1], this.plotter_.area.w,\n  // TODO(danvk): should be area.width\n  xAxisOptionsView, this);\n  // var msg = 'ticker(' + range[0] + ', ' + range[1] + ', ' + this.width_ + ', ' + this.attr_('pixelsPerXLabel') + ') -> ' + JSON.stringify(xTicks);\n  // console.log(msg);\n  this.layout_.setXTicks(xTicks);\n};\n\n/**\n * Returns the correct handler class for the currently set options.\n * @private\n */\nDygraph.prototype.getHandlerClass_ = function () {\n  var handlerClass;\n  if (this.attr_('dataHandler')) {\n    handlerClass = this.attr_('dataHandler');\n  } else if (this.fractions_) {\n    if (this.getBooleanOption('errorBars')) {\n      handlerClass = FractionsBarsHandler;\n    } else {\n      handlerClass = DefaultFractionHandler;\n    }\n  } else if (this.getBooleanOption('customBars')) {\n    handlerClass = CustomBarsHandler;\n  } else if (this.getBooleanOption('errorBars')) {\n    handlerClass = ErrorBarsHandler;\n  } else {\n    handlerClass = DefaultHandler;\n  }\n  return handlerClass;\n};\n\n/**\n * @private\n * This function is called once when the chart's data is changed or the options\n * dictionary is updated. It is _not_ called when the user pans or zooms. The\n * idea is that values derived from the chart's data can be computed here,\n * rather than every time the chart is drawn. This includes things like the\n * number of axes, rolling averages, etc.\n */\nDygraph.prototype.predraw_ = function () {\n  var start = new Date();\n\n  // Create the correct dataHandler\n  this.dataHandler_ = new (this.getHandlerClass_())();\n  this.layout_.computePlotArea();\n\n  // TODO(danvk): move more computations out of drawGraph_ and into here.\n  this.computeYAxes_();\n  if (!this.is_initial_draw_) {\n    this.canvas_ctx_.restore();\n    this.hidden_ctx_.restore();\n  }\n  this.canvas_ctx_.save();\n  this.hidden_ctx_.save();\n\n  // Create a new plotter.\n  this.plotter_ = new DygraphCanvasRenderer(this, this.hidden_, this.hidden_ctx_, this.layout_);\n\n  // The roller sits in the bottom left corner of the chart. We don't know where\n  // this will be until the options are available, so it's positioned here.\n  this.createRollInterface_();\n  this.cascadeEvents_('predraw');\n\n  // Convert the raw data (a 2D array) into the internal format and compute\n  // rolling averages.\n  this.rolledSeries_ = [null]; // x-axis is the first series and it's special\n  for (var i = 1; i < this.numColumns(); i++) {\n    // var logScale = this.attr_('logscale', i); // TODO(klausw): this looks wrong // konigsberg thinks so too.\n    var series = this.dataHandler_.extractSeries(this.rawData_, i, this.attributes_);\n    if (this.rollPeriod_ > 1) {\n      series = this.dataHandler_.rollingAverage(series, this.rollPeriod_, this.attributes_, i);\n    }\n    this.rolledSeries_.push(series);\n  }\n\n  // If the data or options have changed, then we'd better redraw.\n  this.drawGraph_();\n\n  // This is used to determine whether to do various animations.\n  var end = new Date();\n  this.drawingTimeMs_ = end - start;\n};\n\n/**\n * Point structure.\n *\n * xval_* and yval_* are the original unscaled data values,\n * while x_* and y_* are scaled to the range (0.0-1.0) for plotting.\n * yval_stacked is the cumulative Y value used for stacking graphs,\n * and bottom/top/minus/plus are used for high/low band graphs.\n *\n * @typedef {{\n *     idx: number,\n *     name: string,\n *     x: ?number,\n *     xval: ?number,\n *     y_bottom: ?number,\n *     y: ?number,\n *     y_stacked: ?number,\n *     y_top: ?number,\n *     yval_minus: ?number,\n *     yval: ?number,\n *     yval_plus: ?number,\n *     yval_stacked\n * }}\n */\nDygraph.PointType = undefined;\n\n/**\n * Calculates point stacking for stackedGraph=true.\n *\n * For stacking purposes, interpolate or extend neighboring data across\n * NaN values based on stackedGraphNaNFill settings. This is for display\n * only, the underlying data value as shown in the legend remains NaN.\n *\n * @param {Array.<Dygraph.PointType>} points Point array for a single series.\n *     Updates each Point's yval_stacked property.\n * @param {Array.<number>} cumulativeYval Accumulated top-of-graph stacked Y\n *     values for the series seen so far. Index is the row number. Updated\n *     based on the current series's values.\n * @param {Array.<number>} seriesExtremes Min and max values, updated\n *     to reflect the stacked values.\n * @param {string} fillMethod Interpolation method, one of 'all', 'inside', or\n *     'none'.\n * @private\n */\nDygraph.stackPoints_ = function (points, cumulativeYval, seriesExtremes, fillMethod) {\n  var lastXval = null;\n  var prevPoint = null;\n  var nextPoint = null;\n  var nextPointIdx = -1;\n\n  // Find the next stackable point starting from the given index.\n  var updateNextPoint = function (idx) {\n    // If we've previously found a non-NaN point and haven't gone past it yet,\n    // just use that.\n    if (nextPointIdx >= idx) return;\n\n    // We haven't found a non-NaN point yet or have moved past it,\n    // look towards the right to find a non-NaN point.\n    for (var j = idx; j < points.length; ++j) {\n      // Clear out a previously-found point (if any) since it's no longer\n      // valid, we shouldn't use it for interpolation anymore.\n      nextPoint = null;\n      if (!isNaN(points[j].yval) && points[j].yval !== null) {\n        nextPointIdx = j;\n        nextPoint = points[j];\n        break;\n      }\n    }\n  };\n  for (var i = 0; i < points.length; ++i) {\n    var point = points[i];\n    var xval = point.xval;\n    if (cumulativeYval[xval] === undefined) {\n      cumulativeYval[xval] = 0;\n    }\n    var actualYval = point.yval;\n    if (isNaN(actualYval) || actualYval === null) {\n      if (fillMethod == 'none') {\n        actualYval = 0;\n      } else {\n        // Interpolate/extend for stacking purposes if possible.\n        updateNextPoint(i);\n        if (prevPoint && nextPoint && fillMethod != 'none') {\n          // Use linear interpolation between prevPoint and nextPoint.\n          actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) * ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\n        } else if (prevPoint && fillMethod == 'all') {\n          actualYval = prevPoint.yval;\n        } else if (nextPoint && fillMethod == 'all') {\n          actualYval = nextPoint.yval;\n        } else {\n          actualYval = 0;\n        }\n      }\n    } else {\n      prevPoint = point;\n    }\n    var stackedYval = cumulativeYval[xval];\n    if (lastXval != xval) {\n      // If an x-value is repeated, we ignore the duplicates.\n      stackedYval += actualYval;\n      cumulativeYval[xval] = stackedYval;\n    }\n    lastXval = xval;\n    point.yval_stacked = stackedYval;\n    if (stackedYval > seriesExtremes[1]) {\n      seriesExtremes[1] = stackedYval;\n    }\n    if (stackedYval < seriesExtremes[0]) {\n      seriesExtremes[0] = stackedYval;\n    }\n  }\n};\n\n/**\n * Loop over all fields and create datasets, calculating extreme y-values for\n * each series and extreme x-indices as we go.\n *\n * dateWindow is passed in as an explicit parameter so that we can compute\n * extreme values \"speculatively\", i.e. without actually setting state on the\n * dygraph.\n *\n * @param {Array.<Array.<Array.<(number|Array<number>)>>} rolledSeries, where\n *     rolledSeries[seriesIndex][row] = raw point, where\n *     seriesIndex is the column number starting with 1, and\n *     rawPoint is [x,y] or [x, [y, err]] or [x, [y, yminus, yplus]].\n * @param {?Array.<number>} dateWindow [xmin, xmax] pair, or null.\n * @return {{\n *     points: Array.<Array.<Dygraph.PointType>>,\n *     seriesExtremes: Array.<Array.<number>>,\n *     boundaryIds: Array.<number>}}\n * @private\n */\nDygraph.prototype.gatherDatasets_ = function (rolledSeries, dateWindow) {\n  var boundaryIds = [];\n  var points = [];\n  var cumulativeYval = []; // For stacked series.\n  var extremes = {}; // series name -> [low, high]\n  var seriesIdx, sampleIdx;\n  var firstIdx, lastIdx;\n  var axisIdx;\n\n  // Loop over the fields (series).  Go from the last to the first,\n  // because if they're stacked that's how we accumulate the values.\n  var num_series = rolledSeries.length - 1;\n  var series;\n  for (seriesIdx = num_series; seriesIdx >= 1; seriesIdx--) {\n    if (!this.visibility()[seriesIdx - 1]) continue;\n\n    // Prune down to the desired range, if necessary (for zooming)\n    // Because there can be lines going to points outside of the visible area,\n    // we actually prune to visible points, plus one on either side.\n    if (dateWindow) {\n      series = rolledSeries[seriesIdx];\n      var low = dateWindow[0];\n      var high = dateWindow[1];\n\n      // TODO(danvk): do binary search instead of linear search.\n      // TODO(danvk): pass firstIdx and lastIdx directly to the renderer.\n      firstIdx = null;\n      lastIdx = null;\n      for (sampleIdx = 0; sampleIdx < series.length; sampleIdx++) {\n        if (series[sampleIdx][0] >= low && firstIdx === null) {\n          firstIdx = sampleIdx;\n        }\n        if (series[sampleIdx][0] <= high) {\n          lastIdx = sampleIdx;\n        }\n      }\n      if (firstIdx === null) firstIdx = 0;\n      var correctedFirstIdx = firstIdx;\n      var isInvalidValue = true;\n      while (isInvalidValue && correctedFirstIdx > 0) {\n        correctedFirstIdx--;\n        // check if the y value is null.\n        isInvalidValue = series[correctedFirstIdx][1] === null;\n      }\n      if (lastIdx === null) lastIdx = series.length - 1;\n      var correctedLastIdx = lastIdx;\n      isInvalidValue = true;\n      while (isInvalidValue && correctedLastIdx < series.length - 1) {\n        correctedLastIdx++;\n        isInvalidValue = series[correctedLastIdx][1] === null;\n      }\n      if (correctedFirstIdx !== firstIdx) {\n        firstIdx = correctedFirstIdx;\n      }\n      if (correctedLastIdx !== lastIdx) {\n        lastIdx = correctedLastIdx;\n      }\n      boundaryIds[seriesIdx - 1] = [firstIdx, lastIdx];\n\n      // .slice's end is exclusive, we want to include lastIdx.\n      series = series.slice(firstIdx, lastIdx + 1);\n    } else {\n      series = rolledSeries[seriesIdx];\n      boundaryIds[seriesIdx - 1] = [0, series.length - 1];\n    }\n    var seriesName = this.attr_(\"labels\")[seriesIdx];\n    var seriesExtremes = this.dataHandler_.getExtremeYValues(series, dateWindow, this.getBooleanOption(\"stepPlot\", seriesName));\n    var seriesPoints = this.dataHandler_.seriesToPoints(series, seriesName, boundaryIds[seriesIdx - 1][0]);\n    if (this.getBooleanOption(\"stackedGraph\")) {\n      axisIdx = this.attributes_.axisForSeries(seriesName);\n      if (cumulativeYval[axisIdx] === undefined) {\n        cumulativeYval[axisIdx] = [];\n      }\n      Dygraph.stackPoints_(seriesPoints, cumulativeYval[axisIdx], seriesExtremes, this.getBooleanOption(\"stackedGraphNaNFill\"));\n    }\n    extremes[seriesName] = seriesExtremes;\n    points[seriesIdx] = seriesPoints;\n  }\n  return {\n    points: points,\n    extremes: extremes,\n    boundaryIds: boundaryIds\n  };\n};\n\n/**\n * Update the graph with new data. This method is called when the viewing area\n * has changed. If the underlying data or options have changed, predraw_ will\n * be called before drawGraph_ is called.\n *\n * @private\n */\nDygraph.prototype.drawGraph_ = function () {\n  var start = new Date();\n\n  // This is used to set the second parameter to drawCallback, below.\n  var is_initial_draw = this.is_initial_draw_;\n  this.is_initial_draw_ = false;\n  this.layout_.removeAllDatasets();\n  this.setColors_();\n  this.attrs_.pointSize = 0.5 * this.getNumericOption('highlightCircleSize');\n  var packed = this.gatherDatasets_(this.rolledSeries_, this.dateWindow_);\n  var points = packed.points;\n  var extremes = packed.extremes;\n  this.boundaryIds_ = packed.boundaryIds;\n  this.setIndexByName_ = {};\n  var labels = this.attr_(\"labels\");\n  var dataIdx = 0;\n  for (var i = 1; i < points.length; i++) {\n    if (!this.visibility()[i - 1]) continue;\n    this.layout_.addDataset(labels[i], points[i]);\n    this.datasetIndex_[i] = dataIdx++;\n  }\n  for (var i = 0; i < labels.length; i++) {\n    this.setIndexByName_[labels[i]] = i;\n  }\n  this.computeYAxisRanges_(extremes);\n  this.layout_.setYAxes(this.axes_);\n  this.addXTicks_();\n\n  // Tell PlotKit to use this new data and render itself\n  this.layout_.evaluate();\n  this.renderGraph_(is_initial_draw);\n  if (this.getStringOption(\"timingName\")) {\n    var end = new Date();\n    console.log(this.getStringOption(\"timingName\") + \" - drawGraph: \" + (end - start) + \"ms\");\n  }\n};\n\n/**\n * This does the work of drawing the chart. It assumes that the layout and axis\n * scales have already been set (e.g. by predraw_).\n *\n * @private\n */\nDygraph.prototype.renderGraph_ = function (is_initial_draw) {\n  this.cascadeEvents_('clearChart');\n  this.plotter_.clear();\n  const underlayCallback = this.getFunctionOption('underlayCallback');\n  if (underlayCallback) {\n    // NOTE: we pass the dygraph object to this callback twice to avoid breaking\n    // users who expect a deprecated form of this callback.\n    underlayCallback.call(this, this.hidden_ctx_, this.layout_.getPlotArea(), this, this);\n  }\n  var e = {\n    canvas: this.hidden_,\n    drawingContext: this.hidden_ctx_\n  };\n  this.cascadeEvents_('willDrawChart', e);\n  this.plotter_.render();\n  this.cascadeEvents_('didDrawChart', e);\n  this.lastRow_ = -1; // because plugins/legend.js clears the legend\n\n  // TODO(danvk): is this a performance bottleneck when panning?\n  // The interaction canvas should already be empty in that situation.\n  this.canvas_.getContext('2d').clearRect(0, 0, this.width_, this.height_);\n  const drawCallback = this.getFunctionOption(\"drawCallback\");\n  if (drawCallback !== null) {\n    drawCallback.call(this, this, is_initial_draw);\n  }\n  if (is_initial_draw) {\n    this.readyFired_ = true;\n    while (this.readyFns_.length > 0) {\n      var fn = this.readyFns_.pop();\n      fn(this);\n    }\n  }\n};\n\n/**\n * @private\n * Determine properties of the y-axes which are independent of the data\n * currently being displayed. This includes things like the number of axes and\n * the style of the axes. It does not include the range of each axis and its\n * tick marks.\n * This fills in this.axes_.\n * axes_ = [ { options } ]\n *   indices are into the axes_ array.\n */\nDygraph.prototype.computeYAxes_ = function () {\n  var axis, index, opts, v;\n\n  // this.axes_ doesn't match this.attributes_.axes_.options. It's used for\n  // data computation as well as options storage.\n  // Go through once and add all the axes.\n  this.axes_ = [];\n  for (axis = 0; axis < this.attributes_.numAxes(); axis++) {\n    // Add a new axis, making a copy of its per-axis options.\n    opts = {\n      g: this\n    };\n    utils.update(opts, this.attributes_.axisOptions(axis));\n    this.axes_[axis] = opts;\n  }\n  for (axis = 0; axis < this.axes_.length; axis++) {\n    if (axis === 0) {\n      opts = this.optionsViewForAxis_('y' + (axis ? '2' : ''));\n      v = opts(\"valueRange\");\n      if (v) this.axes_[axis].valueRange = v;\n    } else {\n      // To keep old behavior\n      var axes = this.user_attrs_.axes;\n      if (axes && axes.y2) {\n        v = axes.y2.valueRange;\n        if (v) this.axes_[axis].valueRange = v;\n      }\n    }\n  }\n};\n\n/**\n * Returns the number of y-axes on the chart.\n * @return {number} the number of axes.\n */\nDygraph.prototype.numAxes = function () {\n  return this.attributes_.numAxes();\n};\n\n/**\n * @private\n * Returns axis properties for the given series.\n * @param {string} setName The name of the series for which to get axis\n * properties, e.g. 'Y1'.\n * @return {Object} The axis properties.\n */\nDygraph.prototype.axisPropertiesForSeries = function (series) {\n  // TODO(danvk): handle errors.\n  return this.axes_[this.attributes_.axisForSeries(series)];\n};\n\n/**\n * @private\n * Determine the value range and tick marks for each axis.\n * @param {Object} extremes A mapping from seriesName -> [low, high]\n * This fills in the valueRange and ticks fields in each entry of this.axes_.\n */\nDygraph.prototype.computeYAxisRanges_ = function (extremes) {\n  var isNullUndefinedOrNaN = function (num) {\n    return isNaN(parseFloat(num));\n  };\n  var numAxes = this.attributes_.numAxes();\n  var ypadCompat, span, series, ypad;\n  var p_axis;\n\n  // Compute extreme values, a span and tick marks for each axis.\n  for (var i = 0; i < numAxes; i++) {\n    var axis = this.axes_[i];\n    var logscale = this.attributes_.getForAxis(\"logscale\", i);\n    var includeZero = this.attributes_.getForAxis(\"includeZero\", i);\n    var independentTicks = this.attributes_.getForAxis(\"independentTicks\", i);\n    series = this.attributes_.seriesForAxis(i);\n\n    // Add some padding. This supports two Y padding operation modes:\n    //\n    // - backwards compatible (yRangePad not set):\n    //   10% padding for automatic Y ranges, but not for user-supplied\n    //   ranges, and move a close-to-zero edge to zero, since drawing at the edge\n    //   results in invisible lines. Unfortunately lines drawn at the edge of a\n    //   user-supplied range will still be invisible. If logscale is\n    //   set, add a variable amount of padding at the top but\n    //   none at the bottom.\n    //\n    // - new-style (yRangePad set by the user):\n    //   always add the specified Y padding.\n    //\n    ypadCompat = true;\n    ypad = 0.1; // add 10%\n    const yRangePad = this.getNumericOption('yRangePad');\n    if (yRangePad !== null) {\n      ypadCompat = false;\n      // Convert pixel padding to ratio\n      ypad = yRangePad / this.plotter_.area.h;\n    }\n    if (series.length === 0) {\n      // If no series are defined or visible then use a reasonable default\n      axis.extremeRange = [0, 1];\n    } else {\n      // Calculate the extremes of extremes.\n      var minY = Infinity; // extremes[series[0]][0];\n      var maxY = -Infinity; // extremes[series[0]][1];\n      var extremeMinY, extremeMaxY;\n      for (var j = 0; j < series.length; j++) {\n        // this skips invisible series\n        if (!extremes.hasOwnProperty(series[j])) continue;\n\n        // Only use valid extremes to stop null data series' from corrupting the scale.\n        extremeMinY = extremes[series[j]][0];\n        if (extremeMinY !== null) {\n          minY = Math.min(extremeMinY, minY);\n        }\n        extremeMaxY = extremes[series[j]][1];\n        if (extremeMaxY !== null) {\n          maxY = Math.max(extremeMaxY, maxY);\n        }\n      }\n\n      // Include zero if requested by the user.\n      if (includeZero && !logscale) {\n        if (minY > 0) minY = 0;\n        if (maxY < 0) maxY = 0;\n      }\n\n      // Ensure we have a valid scale, otherwise default to [0, 1] for safety.\n      if (minY == Infinity) minY = 0;\n      if (maxY == -Infinity) maxY = 1;\n      span = maxY - minY;\n      // special case: if we have no sense of scale, center on the sole value.\n      if (span === 0) {\n        if (maxY !== 0) {\n          span = Math.abs(maxY);\n        } else {\n          // ... and if the sole value is zero, use range 0-1.\n          maxY = 1;\n          span = 1;\n        }\n      }\n      var maxAxisY = maxY,\n        minAxisY = minY;\n      if (ypadCompat) {\n        if (logscale) {\n          maxAxisY = maxY + ypad * span;\n          minAxisY = minY;\n        } else {\n          maxAxisY = maxY + ypad * span;\n          minAxisY = minY - ypad * span;\n\n          // Backwards-compatible behavior: Move the span to start or end at zero if it's\n          // close to zero.\n          if (minAxisY < 0 && minY >= 0) minAxisY = 0;\n          if (maxAxisY > 0 && maxY <= 0) maxAxisY = 0;\n        }\n      }\n      axis.extremeRange = [minAxisY, maxAxisY];\n    }\n    if (axis.valueRange) {\n      // This is a user-set value range for this axis.\n      var y0 = isNullUndefinedOrNaN(axis.valueRange[0]) ? axis.extremeRange[0] : axis.valueRange[0];\n      var y1 = isNullUndefinedOrNaN(axis.valueRange[1]) ? axis.extremeRange[1] : axis.valueRange[1];\n      axis.computedValueRange = [y0, y1];\n    } else {\n      axis.computedValueRange = axis.extremeRange;\n    }\n    if (!ypadCompat) {\n      // When using yRangePad, adjust the upper/lower bounds to add\n      // padding unless the user has zoomed/panned the Y axis range.\n\n      y0 = axis.computedValueRange[0];\n      y1 = axis.computedValueRange[1];\n\n      // special case #781: if we have no sense of scale, center on the sole value.\n      if (y0 === y1) {\n        if (y0 === 0) {\n          y1 = 1;\n        } else {\n          var delta = Math.abs(y0 / 10);\n          y0 -= delta;\n          y1 += delta;\n        }\n      }\n      if (logscale) {\n        var y0pct = ypad / (2 * ypad - 1);\n        var y1pct = (ypad - 1) / (2 * ypad - 1);\n        axis.computedValueRange[0] = utils.logRangeFraction(y0, y1, y0pct);\n        axis.computedValueRange[1] = utils.logRangeFraction(y0, y1, y1pct);\n      } else {\n        span = y1 - y0;\n        axis.computedValueRange[0] = y0 - span * ypad;\n        axis.computedValueRange[1] = y1 + span * ypad;\n      }\n    }\n    if (independentTicks) {\n      axis.independentTicks = independentTicks;\n      var opts = this.optionsViewForAxis_('y' + (i ? '2' : ''));\n      var ticker = opts('ticker');\n      axis.ticks = ticker(axis.computedValueRange[0], axis.computedValueRange[1], this.plotter_.area.h, opts, this);\n      // Define the first independent axis as primary axis.\n      if (!p_axis) p_axis = axis;\n    }\n  }\n  if (p_axis === undefined) {\n    throw \"Configuration Error: At least one axis has to have the \\\"independentTicks\\\" option activated.\";\n  }\n  // Add ticks. By default, all axes inherit the tick positions of the\n  // primary axis. However, if an axis is specifically marked as having\n  // independent ticks, then that is permissible as well.\n  for (var i = 0; i < numAxes; i++) {\n    var axis = this.axes_[i];\n    if (!axis.independentTicks) {\n      var opts = this.optionsViewForAxis_('y' + (i ? '2' : ''));\n      var ticker = opts('ticker');\n      var p_ticks = p_axis.ticks;\n      var p_scale = p_axis.computedValueRange[1] - p_axis.computedValueRange[0];\n      var scale = axis.computedValueRange[1] - axis.computedValueRange[0];\n      var tick_values = [];\n      for (var k = 0; k < p_ticks.length; k++) {\n        var y_frac = (p_ticks[k].v - p_axis.computedValueRange[0]) / p_scale;\n        var y_val = axis.computedValueRange[0] + y_frac * scale;\n        tick_values.push(y_val);\n      }\n      axis.ticks = ticker(axis.computedValueRange[0], axis.computedValueRange[1], this.plotter_.area.h, opts, this, tick_values);\n    }\n  }\n};\n\n/**\n * Detects the type of the str (date or numeric) and sets the various\n * formatting attributes in this.attrs_ based on this type.\n * @param {string} str An x value.\n * @private\n */\nDygraph.prototype.detectTypeFromString_ = function (str) {\n  var isDate = false;\n  var dashPos = str.indexOf('-'); // could be 2006-01-01 _or_ 1.0e-2\n  if (dashPos > 0 && str[dashPos - 1] != 'e' && str[dashPos - 1] != 'E' || str.indexOf('/') >= 0 || isNaN(parseFloat(str))) {\n    isDate = true;\n  }\n  this.setXAxisOptions_(isDate);\n};\nDygraph.prototype.setXAxisOptions_ = function (isDate) {\n  if (isDate) {\n    this.attrs_.xValueParser = utils.dateParser;\n    this.attrs_.axes.x.valueFormatter = utils.dateValueFormatter;\n    this.attrs_.axes.x.ticker = DygraphTickers.dateTicker;\n    this.attrs_.axes.x.axisLabelFormatter = utils.dateAxisLabelFormatter;\n  } else {\n    /** @private (shut up, jsdoc!) */\n    this.attrs_.xValueParser = function (x) {\n      return parseFloat(x);\n    };\n    // TODO(danvk): use Dygraph.numberValueFormatter here?\n    /** @private (shut up, jsdoc!) */\n    this.attrs_.axes.x.valueFormatter = function (x) {\n      return x;\n    };\n    this.attrs_.axes.x.ticker = DygraphTickers.numericTicks;\n    this.attrs_.axes.x.axisLabelFormatter = this.attrs_.axes.x.valueFormatter;\n  }\n};\n\n/**\n * @private\n * Parses a string in a special csv format.  We expect a csv file where each\n * line is a date point, and the first field in each line is the date string.\n * We also expect that all remaining fields represent series.\n * if the errorBars attribute is set, then interpret the fields as:\n * date, series1, stddev1, series2, stddev2, ...\n * @param {[Object]} data See above.\n *\n * @return [Object] An array with one entry for each row. These entries\n * are an array of cells in that row. The first entry is the parsed x-value for\n * the row. The second, third, etc. are the y-values. These can take on one of\n * three forms, depending on the CSV and constructor parameters:\n * 1. numeric value\n * 2. [ value, stddev ]\n * 3. [ low value, center value, high value ]\n */\nDygraph.prototype.parseCSV_ = function (data) {\n  var ret = [];\n  var line_delimiter = utils.detectLineDelimiter(data);\n  var lines = data.split(line_delimiter || \"\\n\");\n  var vals, j;\n\n  // Use the default delimiter or fall back to a tab if that makes sense.\n  var delim = this.getStringOption('delimiter');\n  if (lines[0].indexOf(delim) == -1 && lines[0].indexOf('\\t') >= 0) {\n    delim = '\\t';\n  }\n  var start = 0;\n  if (!('labels' in this.user_attrs_)) {\n    // User hasn't explicitly set labels, so they're (presumably) in the CSV.\n    start = 1;\n    this.attrs_.labels = lines[0].split(delim); // NOTE: _not_ user_attrs_.\n    this.attributes_.reparseSeries();\n  }\n  var line_no = 0;\n  var xParser;\n  var defaultParserSet = false; // attempt to auto-detect x value type\n  var expectedCols = this.attr_(\"labels\").length;\n  var outOfOrder = false;\n  for (var i = start; i < lines.length; i++) {\n    var line = lines[i];\n    line_no = i;\n    if (line.length === 0) continue; // skip blank lines\n    if (line[0] == '#') continue; // skip comment lines\n    var inFields = line.split(delim);\n    if (inFields.length < 2) continue;\n    var fields = [];\n    if (!defaultParserSet) {\n      this.detectTypeFromString_(inFields[0]);\n      xParser = this.getFunctionOption(\"xValueParser\");\n      defaultParserSet = true;\n    }\n    fields[0] = xParser(inFields[0], this);\n\n    // If fractions are expected, parse the numbers as \"A/B\"\n    if (this.fractions_) {\n      for (j = 1; j < inFields.length; j++) {\n        // TODO(danvk): figure out an appropriate way to flag parse errors.\n        vals = inFields[j].split(\"/\");\n        if (vals.length != 2) {\n          console.error('Expected fractional \"num/den\" values in CSV data ' + \"but found a value '\" + inFields[j] + \"' on line \" + (1 + i) + \" ('\" + line + \"') which is not of this form.\");\n          fields[j] = [0, 0];\n        } else {\n          fields[j] = [utils.parseFloat_(vals[0], i, line), utils.parseFloat_(vals[1], i, line)];\n        }\n      }\n    } else if (this.getBooleanOption(\"errorBars\")) {\n      // If there are sigma-based high/low bands, values are (value, stddev) pairs\n      if (inFields.length % 2 != 1) {\n        console.error('Expected alternating (value, stdev.) pairs in CSV data ' + 'but line ' + (1 + i) + ' has an odd number of values (' + (inFields.length - 1) + \"): '\" + line + \"'\");\n      }\n      for (j = 1; j < inFields.length; j += 2) {\n        fields[(j + 1) / 2] = [utils.parseFloat_(inFields[j], i, line), utils.parseFloat_(inFields[j + 1], i, line)];\n      }\n    } else if (this.getBooleanOption(\"customBars\")) {\n      // Custom high/low bands are a low;centre;high tuple\n      for (j = 1; j < inFields.length; j++) {\n        var val = inFields[j];\n        if (/^ *$/.test(val)) {\n          fields[j] = [null, null, null];\n        } else {\n          vals = val.split(\";\");\n          if (vals.length == 3) {\n            fields[j] = [utils.parseFloat_(vals[0], i, line), utils.parseFloat_(vals[1], i, line), utils.parseFloat_(vals[2], i, line)];\n          } else {\n            console.warn('When using customBars, values must be either blank ' + 'or \"low;center;high\" tuples (got \"' + val + '\" on line ' + (1 + i) + ')');\n          }\n        }\n      }\n    } else {\n      // Values are just numbers\n      for (j = 1; j < inFields.length; j++) {\n        fields[j] = utils.parseFloat_(inFields[j], i, line);\n      }\n    }\n    if (ret.length > 0 && fields[0] < ret[ret.length - 1][0]) {\n      outOfOrder = true;\n    }\n    if (fields.length != expectedCols) {\n      console.error(\"Number of columns in line \" + i + \" (\" + fields.length + \") does not agree with number of labels (\" + expectedCols + \") \" + line);\n    }\n\n    // If the user specified the 'labels' option and none of the cells of the\n    // first row parsed correctly, then they probably double-specified the\n    // labels. We go with the values set in the option, discard this row and\n    // log a warning to the JS console.\n    if (i === 0 && this.attr_('labels')) {\n      var all_null = true;\n      for (j = 0; all_null && j < fields.length; j++) {\n        if (fields[j]) all_null = false;\n      }\n      if (all_null) {\n        console.warn(\"The dygraphs 'labels' option is set, but the first row \" + \"of CSV data ('\" + line + \"') appears to also contain \" + \"labels. Will drop the CSV labels and use the option \" + \"labels.\");\n        continue;\n      }\n    }\n    ret.push(fields);\n  }\n  if (outOfOrder) {\n    console.warn(\"CSV is out of order; order it correctly to speed loading.\");\n    ret.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n  }\n  return ret;\n};\n\n// In native format, all values must be dates or numbers.\n// This check isn't perfect but will catch most mistaken uses of strings.\nfunction validateNativeFormat(data) {\n  const firstRow = data[0];\n  const firstX = firstRow[0];\n  if (typeof firstX !== 'number' && !utils.isDateLike(firstX)) {\n    throw new Error(\"Expected number or date but got \".concat(typeof firstX, \": \").concat(firstX, \".\"));\n  }\n  for (let i = 1; i < firstRow.length; i++) {\n    const val = firstRow[i];\n    if (val === null || val === undefined) continue;\n    if (typeof val === 'number') continue;\n    if (utils.isArrayLike(val)) continue; // e.g. errorBars or customBars\n    throw new Error(\"Expected number or array but got \".concat(typeof val, \": \").concat(val, \".\"));\n  }\n}\n\n/**\n * The user has provided their data as a pre-packaged JS array. If the x values\n * are numeric, this is the same as dygraphs' internal format. If the x values\n * are dates, we need to convert them from Date objects to ms since epoch.\n * @param {!Array} data\n * @return {Object} data with numeric x values.\n * @private\n */\nDygraph.prototype.parseArray_ = function (data) {\n  // Peek at the first x value to see if it's numeric.\n  if (data.length === 0) {\n    data = [[0]];\n  }\n  if (data[0].length === 0) {\n    console.error(\"Data set cannot contain an empty row\");\n    return null;\n  }\n  validateNativeFormat(data);\n  var i;\n  if (this.attr_(\"labels\") === null) {\n    console.warn(\"Using default labels. Set labels explicitly via 'labels' \" + \"in the options parameter\");\n    this.attrs_.labels = [\"X\"];\n    for (i = 1; i < data[0].length; i++) {\n      this.attrs_.labels.push(\"Y\" + i); // Not user_attrs_.\n    }\n    this.attributes_.reparseSeries();\n  } else {\n    var num_labels = this.attr_(\"labels\");\n    if (num_labels.length != data[0].length) {\n      console.error(\"Mismatch between number of labels (\" + num_labels + \")\" + \" and number of columns in array (\" + data[0].length + \")\");\n      return null;\n    }\n  }\n  if (utils.isDateLike(data[0][0])) {\n    // Some intelligent defaults for a date x-axis.\n    this.attrs_.axes.x.valueFormatter = utils.dateValueFormatter;\n    this.attrs_.axes.x.ticker = DygraphTickers.dateTicker;\n    this.attrs_.axes.x.axisLabelFormatter = utils.dateAxisLabelFormatter;\n\n    // Assume they're all dates.\n    var parsedData = utils.clone(data);\n    for (i = 0; i < data.length; i++) {\n      if (parsedData[i].length === 0) {\n        console.error(\"Row \" + (1 + i) + \" of data is empty\");\n        return null;\n      }\n      if (parsedData[i][0] === null || typeof parsedData[i][0].getTime != 'function' || isNaN(parsedData[i][0].getTime())) {\n        console.error(\"x value in row \" + (1 + i) + \" is not a Date\");\n        return null;\n      }\n      parsedData[i][0] = parsedData[i][0].getTime();\n    }\n    return parsedData;\n  } else {\n    // Some intelligent defaults for a numeric x-axis.\n    /** @private (shut up, jsdoc!) */\n    this.attrs_.axes.x.valueFormatter = function (x) {\n      return x;\n    };\n    this.attrs_.axes.x.ticker = DygraphTickers.numericTicks;\n    this.attrs_.axes.x.axisLabelFormatter = utils.numberAxisLabelFormatter;\n    return data;\n  }\n};\n\n/**\n * Parses a DataTable object from gviz.\n * The data is expected to have a first column that is either a date or a\n * number. All subsequent columns must be numbers. If there is a clear mismatch\n * between this.xValueParser_ and the type of the first column, it will be\n * fixed. Fills out rawData_.\n * @param {!google.visualization.DataTable} data See above.\n * @private\n */\nDygraph.prototype.parseDataTable_ = function (data) {\n  var shortTextForAnnotationNum = function (num) {\n    // converts [0-9]+ [A-Z][a-z]*\n    // example: 0=A, 1=B, 25=Z, 26=Aa, 27=Ab\n    // and continues like.. Ba Bb .. Za .. Zz..Aaa...Zzz Aaaa Zzzz\n    var shortText = String.fromCharCode(65 /* A */ + num % 26);\n    num = Math.floor(num / 26);\n    while (num > 0) {\n      shortText = String.fromCharCode(65 /* A */ + (num - 1) % 26) + shortText.toLowerCase();\n      num = Math.floor((num - 1) / 26);\n    }\n    return shortText;\n  };\n  var cols = data.getNumberOfColumns();\n  var rows = data.getNumberOfRows();\n  var indepType = data.getColumnType(0);\n  if (indepType == 'date' || indepType == 'datetime') {\n    this.attrs_.xValueParser = utils.dateParser;\n    this.attrs_.axes.x.valueFormatter = utils.dateValueFormatter;\n    this.attrs_.axes.x.ticker = DygraphTickers.dateTicker;\n    this.attrs_.axes.x.axisLabelFormatter = utils.dateAxisLabelFormatter;\n  } else if (indepType == 'number') {\n    this.attrs_.xValueParser = function (x) {\n      return parseFloat(x);\n    };\n    this.attrs_.axes.x.valueFormatter = function (x) {\n      return x;\n    };\n    this.attrs_.axes.x.ticker = DygraphTickers.numericTicks;\n    this.attrs_.axes.x.axisLabelFormatter = this.attrs_.axes.x.valueFormatter;\n  } else {\n    throw new Error(\"only 'date', 'datetime' and 'number' types are supported \" + \"for column 1 of DataTable input (Got '\" + indepType + \"')\");\n  }\n\n  // Array of the column indices which contain data (and not annotations).\n  var colIdx = [];\n  var annotationCols = {}; // data index -> [annotation cols]\n  var hasAnnotations = false;\n  var i, j;\n  for (i = 1; i < cols; i++) {\n    var type = data.getColumnType(i);\n    if (type == 'number') {\n      colIdx.push(i);\n    } else if (type == 'string' && this.getBooleanOption('displayAnnotations')) {\n      // This is OK -- it's an annotation column.\n      var dataIdx = colIdx[colIdx.length - 1];\n      if (!annotationCols.hasOwnProperty(dataIdx)) {\n        annotationCols[dataIdx] = [i];\n      } else {\n        annotationCols[dataIdx].push(i);\n      }\n      hasAnnotations = true;\n    } else {\n      throw new Error(\"Only 'number' is supported as a dependent type with Gviz.\" + \" 'string' is only supported if displayAnnotations is true\");\n    }\n  }\n\n  // Read column labels\n  // TODO(danvk): add support back for errorBars\n  var labels = [data.getColumnLabel(0)];\n  for (i = 0; i < colIdx.length; i++) {\n    labels.push(data.getColumnLabel(colIdx[i]));\n    if (this.getBooleanOption(\"errorBars\")) i += 1;\n  }\n  this.attrs_.labels = labels;\n  cols = labels.length;\n  var ret = [];\n  var outOfOrder = false;\n  var annotations = [];\n  for (i = 0; i < rows; i++) {\n    var row = [];\n    if (typeof data.getValue(i, 0) === 'undefined' || data.getValue(i, 0) === null) {\n      console.warn(\"Ignoring row \" + i + \" of DataTable because of undefined or null first column.\");\n      continue;\n    }\n    if (indepType == 'date' || indepType == 'datetime') {\n      row.push(data.getValue(i, 0).getTime());\n    } else {\n      row.push(data.getValue(i, 0));\n    }\n    if (!this.getBooleanOption(\"errorBars\")) {\n      for (j = 0; j < colIdx.length; j++) {\n        var col = colIdx[j];\n        row.push(data.getValue(i, col));\n        if (hasAnnotations && annotationCols.hasOwnProperty(col) && data.getValue(i, annotationCols[col][0]) !== null) {\n          var ann = {};\n          ann.series = data.getColumnLabel(col);\n          ann.xval = row[0];\n          ann.shortText = shortTextForAnnotationNum(annotations.length);\n          ann.text = '';\n          for (var k = 0; k < annotationCols[col].length; k++) {\n            if (k) ann.text += \"\\n\";\n            ann.text += data.getValue(i, annotationCols[col][k]);\n          }\n          annotations.push(ann);\n        }\n      }\n\n      // Strip out infinities, which give dygraphs problems later on.\n      for (j = 0; j < row.length; j++) {\n        if (!isFinite(row[j])) row[j] = null;\n      }\n    } else {\n      for (j = 0; j < cols - 1; j++) {\n        row.push([data.getValue(i, 1 + 2 * j), data.getValue(i, 2 + 2 * j)]);\n      }\n    }\n    if (ret.length > 0 && row[0] < ret[ret.length - 1][0]) {\n      outOfOrder = true;\n    }\n    ret.push(row);\n  }\n  if (outOfOrder) {\n    console.warn(\"DataTable is out of order; order it correctly to speed loading.\");\n    ret.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n  }\n  this.rawData_ = ret;\n  if (annotations.length > 0) {\n    this.setAnnotations(annotations, true);\n  }\n  this.attributes_.reparseSeries();\n};\n\n/**\n * Signals to plugins that the chart data has updated.\n * This happens after the data has updated but before the chart has redrawn.\n * @private\n */\nDygraph.prototype.cascadeDataDidUpdateEvent_ = function () {\n  // TODO(danvk): there are some issues checking xAxisRange() and using\n  // toDomCoords from handlers of this event. The visible range should be set\n  // when the chart is drawn, not derived from the data.\n  this.cascadeEvents_('dataDidUpdate', {});\n};\n\n/**\n * Get the CSV data. If it's in a function, call that function. If it's in a\n * file, do an XMLHttpRequest to get it.\n * @private\n */\nDygraph.prototype.start_ = function () {\n  var data = this.file_;\n\n  // Functions can return references of all other types.\n  if (typeof data == 'function') {\n    data = data();\n  }\n  const datatype = utils.typeArrayLike(data);\n  if (datatype == 'array') {\n    this.rawData_ = this.parseArray_(data);\n    this.cascadeDataDidUpdateEvent_();\n    this.predraw_();\n  } else if (datatype == 'object' && typeof data.getColumnRange == 'function') {\n    // must be a DataTable from gviz.\n    this.parseDataTable_(data);\n    this.cascadeDataDidUpdateEvent_();\n    this.predraw_();\n  } else if (datatype == 'string') {\n    // Heuristic: a newline means it's CSV data. Otherwise it's an URL.\n    var line_delimiter = utils.detectLineDelimiter(data);\n    if (line_delimiter) {\n      this.loadedEvent_(data);\n    } else {\n      // REMOVE_FOR_IE\n      var req;\n      if (window.XMLHttpRequest) {\n        // Firefox, Opera, IE7, and other browsers will use the native object\n        req = new XMLHttpRequest();\n      } else {\n        // IE 5 and 6 will use the ActiveX control\n        req = new ActiveXObject(\"Microsoft.XMLHTTP\");\n      }\n      var caller = this;\n      req.onreadystatechange = function () {\n        if (req.readyState == 4) {\n          if (req.status === 200 ||\n          // Normal http\n          req.status === 0) {\n            // Chrome w/ --allow-file-access-from-files\n            caller.loadedEvent_(req.responseText);\n          }\n        }\n      };\n      req.open(\"GET\", data, true);\n      req.send(null);\n    }\n  } else {\n    console.error(\"Unknown data format: \" + datatype);\n  }\n};\n\n/**\n * Changes various properties of the graph. These can include:\n * <ul>\n * <li>file: changes the source data for the graph</li>\n * <li>errorBars: changes whether the data contains stddev</li>\n * </ul>\n *\n * There's a huge variety of options that can be passed to this method. For a\n * full list, see http://dygraphs.com/options.html.\n *\n * @param {Object} input_attrs The new properties and values\n * @param {boolean} block_redraw Usually the chart is redrawn after every\n *     call to updateOptions(). If you know better, you can pass true to\n *     explicitly block the redraw. This can be useful for chaining\n *     updateOptions() calls, avoiding the occasional infinite loop and\n *     preventing redraws when it's not necessary (e.g. when updating a\n *     callback).\n */\nDygraph.prototype.updateOptions = function (input_attrs, block_redraw) {\n  if (typeof block_redraw == 'undefined') block_redraw = false;\n\n  // copyUserAttrs_ drops the \"file\" parameter as a convenience to us.\n  var file = input_attrs.file;\n  var attrs = Dygraph.copyUserAttrs_(input_attrs);\n  var prevNumAxes = this.attributes_.numAxes();\n\n  // TODO(danvk): this is a mess. Move these options into attr_.\n  if ('rollPeriod' in attrs) {\n    this.rollPeriod_ = attrs.rollPeriod;\n  }\n  if ('dateWindow' in attrs) {\n    this.dateWindow_ = attrs.dateWindow;\n  }\n\n  // TODO(danvk): validate per-series options.\n  // Supported:\n  // strokeWidth\n  // pointSize\n  // drawPoints\n  // highlightCircleSize\n\n  // Check if this set options will require new points.\n  var requiresNewPoints = utils.isPixelChangingOptionList(this.attr_(\"labels\"), attrs);\n  utils.updateDeep(this.user_attrs_, attrs);\n  this.attributes_.reparseSeries();\n  if (prevNumAxes < this.attributes_.numAxes()) this.plotter_.clear();\n  if (file) {\n    // This event indicates that the data is about to change, but hasn't yet.\n    // TODO(danvk): support cancellation of the update via this event.\n    this.cascadeEvents_('dataWillUpdate', {});\n    this.file_ = file;\n    if (!block_redraw) this.start_();\n  } else {\n    if (!block_redraw) {\n      if (requiresNewPoints) {\n        this.predraw_();\n      } else {\n        this.renderGraph_(false);\n      }\n    }\n  }\n};\n\n/**\n * Make a copy of input attributes, removing file as a convenience.\n * @private\n */\nDygraph.copyUserAttrs_ = function (attrs) {\n  var my_attrs = {};\n  for (var k in attrs) {\n    if (!attrs.hasOwnProperty(k)) continue;\n    if (k == 'file') continue;\n    if (attrs.hasOwnProperty(k)) my_attrs[k] = attrs[k];\n  }\n  return my_attrs;\n};\n\n/**\n * Resizes the dygraph. If no parameters are specified, resizes to fill the\n * containing div (which has presumably changed size since the dygraph was\n * instantiated). If the width/height are specified, the div will be resized.\n *\n * This is far more efficient than destroying and re-instantiating a\n * Dygraph, since it doesn't have to reparse the underlying data.\n *\n * @param {number} width Width (in pixels)\n * @param {number} height Height (in pixels)\n */\nDygraph.prototype.resize = function (width, height) {\n  if (this.resize_lock) {\n    return;\n  }\n  this.resize_lock = true;\n  if (width === null != (height === null)) {\n    console.warn(\"Dygraph.resize() should be called with zero parameters or \" + \"two non-NULL parameters. Pretending it was zero.\");\n    width = height = null;\n  }\n  var old_width = this.width_;\n  var old_height = this.height_;\n  if (width) {\n    this.maindiv_.style.width = width + \"px\";\n    this.maindiv_.style.height = height + \"px\";\n    this.width_ = width;\n    this.height_ = height;\n  } else {\n    this.width_ = this.maindiv_.clientWidth;\n    this.height_ = this.maindiv_.clientHeight;\n  }\n  if (old_width != this.width_ || old_height != this.height_) {\n    // Resizing a canvas erases it, even when the size doesn't change, so\n    // any resize needs to be followed by a redraw.\n    this.resizeElements_();\n    this.predraw_();\n  }\n  this.resize_lock = false;\n};\n\n/**\n * Adjusts the number of points in the rolling average. Updates the graph to\n * reflect the new averaging period.\n * @param {number} length Number of points over which to average the data.\n */\nDygraph.prototype.adjustRoll = function (length) {\n  this.rollPeriod_ = length;\n  this.predraw_();\n};\n\n/**\n * Returns a boolean array of visibility statuses.\n */\nDygraph.prototype.visibility = function () {\n  // Do lazy-initialization, so that this happens after we know the number of\n  // data series.\n  if (!this.getOption(\"visibility\")) {\n    this.attrs_.visibility = [];\n  }\n  // TODO(danvk): it looks like this could go into an infinite loop w/ user_attrs.\n  while (this.getOption(\"visibility\").length < this.numColumns() - 1) {\n    this.attrs_.visibility.push(true);\n  }\n  return this.getOption(\"visibility\");\n};\n\n/**\n * Changes the visibility of one or more series.\n *\n * @param {number|number[]|object} num the series index or an array of series indices\n *                                     or a boolean array of visibility states by index\n *                                     or an object mapping series numbers, as keys, to\n *                                     visibility state (boolean values)\n * @param {boolean} value the visibility state expressed as a boolean\n */\nDygraph.prototype.setVisibility = function (num, value) {\n  var x = this.visibility();\n  var numIsObject = false;\n  if (!Array.isArray(num)) {\n    if (num !== null && typeof num === 'object') {\n      numIsObject = true;\n    } else {\n      num = [num];\n    }\n  }\n  if (numIsObject) {\n    for (var i in num) {\n      if (num.hasOwnProperty(i)) {\n        if (i < 0 || i >= x.length) {\n          console.warn(\"Invalid series number in setVisibility: \" + i);\n        } else {\n          x[i] = num[i];\n        }\n      }\n    }\n  } else {\n    for (var i = 0; i < num.length; i++) {\n      if (typeof num[i] === 'boolean') {\n        if (i >= x.length) {\n          console.warn(\"Invalid series number in setVisibility: \" + i);\n        } else {\n          x[i] = num[i];\n        }\n      } else {\n        if (num[i] < 0 || num[i] >= x.length) {\n          console.warn(\"Invalid series number in setVisibility: \" + num[i]);\n        } else {\n          x[num[i]] = value;\n        }\n      }\n    }\n  }\n  this.predraw_();\n};\n\n/**\n * How large of an area will the dygraph render itself in?\n * This is used for testing.\n * @return A {width: w, height: h} object.\n * @private\n */\nDygraph.prototype.size = function () {\n  return {\n    width: this.width_,\n    height: this.height_\n  };\n};\n\n/**\n * Update the list of annotations and redraw the chart.\n * See dygraphs.com/annotations.html for more info on how to use annotations.\n * @param ann {Array} An array of annotation objects.\n * @param suppressDraw {Boolean} Set to \"true\" to block chart redraw (optional).\n */\nDygraph.prototype.setAnnotations = function (ann, suppressDraw) {\n  // Only add the annotation CSS rule once we know it will be used.\n  this.annotations_ = ann;\n  if (!this.layout_) {\n    console.warn(\"Tried to setAnnotations before dygraph was ready. \" + \"Try setting them in a ready() block. See \" + \"dygraphs.com/tests/annotation.html\");\n    return;\n  }\n  this.layout_.setAnnotations(this.annotations_);\n  if (!suppressDraw) {\n    this.predraw_();\n  }\n};\n\n/**\n * Return the list of annotations.\n */\nDygraph.prototype.annotations = function () {\n  return this.annotations_;\n};\n\n/**\n * Get the list of label names for this graph. The first column is the\n * x-axis, so the data series names start at index 1.\n *\n * Returns null when labels have not yet been defined.\n */\nDygraph.prototype.getLabels = function () {\n  var labels = this.attr_(\"labels\");\n  return labels ? labels.slice() : null;\n};\n\n/**\n * Get the index of a series (column) given its name. The first column is the\n * x-axis, so the data series start with index 1.\n */\nDygraph.prototype.indexFromSetName = function (name) {\n  return this.setIndexByName_[name];\n};\n\n/**\n * Find the row number corresponding to the given x-value.\n * Returns null if there is no such x-value in the data.\n * If there are multiple rows with the same x-value, this will return the\n * first one.\n * @param {number} xVal The x-value to look for (e.g. millis since epoch).\n * @return {?number} The row number, which you can pass to getValue(), or null.\n */\nDygraph.prototype.getRowForX = function (xVal) {\n  var low = 0,\n    high = this.numRows() - 1;\n  while (low <= high) {\n    var idx = high + low >> 1;\n    var x = this.getValue(idx, 0);\n    if (x < xVal) {\n      low = idx + 1;\n    } else if (x > xVal) {\n      high = idx - 1;\n    } else if (low != idx) {\n      // equal, but there may be an earlier match.\n      high = idx;\n    } else {\n      return idx;\n    }\n  }\n  return null;\n};\n\n/**\n * Trigger a callback when the dygraph has drawn itself and is ready to be\n * manipulated. This is primarily useful when dygraphs has to do an XHR for the\n * data (i.e. a URL is passed as the data source) and the chart is drawn\n * asynchronously. If the chart has already drawn, the callback will fire\n * immediately.\n *\n * This is a good place to call setAnnotation().\n *\n * @param {function(!Dygraph)} callback The callback to trigger when the chart\n *     is ready.\n */\nDygraph.prototype.ready = function (callback) {\n  if (this.is_initial_draw_) {\n    this.readyFns_.push(callback);\n  } else {\n    callback.call(this, this);\n  }\n};\n\n/**\n * Add an event handler. This event handler is kept until the graph is\n * destroyed with a call to graph.destroy().\n *\n * @param {!Node} elem The element to add the event to.\n * @param {string} type The type of the event, e.g. 'click' or 'mousemove'.\n * @param {function(Event):(boolean|undefined)} fn The function to call\n *     on the event. The function takes one parameter: the event object.\n * @private\n */\nDygraph.prototype.addAndTrackEvent = function (elem, type, fn) {\n  utils.addEvent(elem, type, fn);\n  this.registeredEvents_.push({\n    elem,\n    type,\n    fn\n  });\n};\nDygraph.prototype.removeTrackedEvents_ = function () {\n  if (this.registeredEvents_) {\n    for (var idx = 0; idx < this.registeredEvents_.length; idx++) {\n      var reg = this.registeredEvents_[idx];\n      utils.removeEvent(reg.elem, reg.type, reg.fn);\n    }\n  }\n  this.registeredEvents_ = [];\n};\n\n// Installed plugins, in order of precedence (most-general to most-specific).\nDygraph.PLUGINS = [LegendPlugin, AxesPlugin, RangeSelectorPlugin,\n// Has to be before ChartLabels so that its callbacks are called after ChartLabels' callbacks.\nChartLabelsPlugin, AnnotationsPlugin, GridPlugin];\n\n// There are many symbols which have historically been available through the\n// Dygraph class. These are exported here for backwards compatibility.\nDygraph.GVizChart = GVizChart;\nDygraph.DASHED_LINE = utils.DASHED_LINE;\nDygraph.DOT_DASH_LINE = utils.DOT_DASH_LINE;\nDygraph.dateAxisLabelFormatter = utils.dateAxisLabelFormatter;\nDygraph.toRGB_ = utils.toRGB_;\nDygraph.findPos = utils.findPos;\nDygraph.pageX = utils.pageX;\nDygraph.pageY = utils.pageY;\nDygraph.dateString_ = utils.dateString_;\nDygraph.defaultInteractionModel = DygraphInteraction.defaultModel;\nDygraph.nonInteractiveModel = Dygraph.nonInteractiveModel_ = DygraphInteraction.nonInteractiveModel_;\nDygraph.Circles = utils.Circles;\nDygraph.Plugins = {\n  Legend: LegendPlugin,\n  Axes: AxesPlugin,\n  Annotations: AnnotationsPlugin,\n  ChartLabels: ChartLabelsPlugin,\n  Grid: GridPlugin,\n  RangeSelector: RangeSelectorPlugin\n};\nDygraph.DataHandlers = {\n  DefaultHandler,\n  BarsHandler,\n  CustomBarsHandler,\n  DefaultFractionHandler,\n  ErrorBarsHandler,\n  FractionsBarsHandler\n};\nDygraph.startPan = DygraphInteraction.startPan;\nDygraph.startZoom = DygraphInteraction.startZoom;\nDygraph.movePan = DygraphInteraction.movePan;\nDygraph.moveZoom = DygraphInteraction.moveZoom;\nDygraph.endPan = DygraphInteraction.endPan;\nDygraph.endZoom = DygraphInteraction.endZoom;\nDygraph.numericLinearTicks = DygraphTickers.numericLinearTicks;\nDygraph.numericTicks = DygraphTickers.numericTicks;\nDygraph.dateTicker = DygraphTickers.dateTicker;\nDygraph.Granularity = DygraphTickers.Granularity;\nDygraph.getDateAxis = DygraphTickers.getDateAxis;\nDygraph.floatFormat = utils.floatFormat;\nutils.setupDOMready_(Dygraph);\nexport default Dygraph;","map":{"version":3,"names":["DygraphLayout","DygraphCanvasRenderer","DygraphOptions","DygraphInteraction","DygraphTickers","utils","DEFAULT_ATTRS","OPTIONS_REFERENCE","IFrameTarp","DefaultHandler","ErrorBarsHandler","CustomBarsHandler","DefaultFractionHandler","FractionsBarsHandler","BarsHandler","AnnotationsPlugin","AxesPlugin","ChartLabelsPlugin","GridPlugin","LegendPlugin","RangeSelectorPlugin","GVizChart","Dygraph","div","data","opts","__init__","NAME","VERSION","_addrequire","_require","require","what","_b","add","towhat","DEFAULT_ROLL_PERIOD","DEFAULT_WIDTH","DEFAULT_HEIGHT","ANIMATION_STEPS","ANIMATION_DURATION","Plotters","_Plotters","addedAnnotationCSS","prototype","file","attrs","is_initial_draw_","readyFns_","undefined","copyUserAttrs_","document","getElementById","Error","maindiv_","file_","rollPeriod_","rollPeriod","previousVerticalX_","fractions_","fractions","dateWindow_","dateWindow","annotations_","innerHTML","resolved","window","getComputedStyle","paddingLeft","paddingRight","paddingTop","paddingBottom","console","error","style","width","height","clientHeight","width_","clientWidth","height_","stackedGraph","fillGraph","user_attrs_","update","attrs_","updateDeep","boundaryIds_","setIndexByName_","datasetIndex_","registeredEvents_","eventListeners_","attributes_","createInterface_","plugins_","plugins","PLUGINS","concat","getOption","i","length","Plugin","pluginInstance","activate","pluginDict","plugin","events","options","pluginOptions","handlers","eventName","hasOwnProperty","push","plugin_dict","callback","pair","createDragInterface_","start_","cascadeEvents_","name","extra_props","e","dygraph","cancelable","defaultPrevented","preventDefault","propagationStopped","stopPropagation","callback_plugin_pairs","call","getPluginInstance_","type","p","isZoomed","axis","isZoomedX","isZoomedY","axes_","map","valueRange","indexOf","toString","maindiv","id","attr_","seriesName","process","env","NODE_ENV","getForSeries","get","opt_seriesName","getNumericOption","getStringOption","getBooleanOption","getFunctionOption","getOptionForAxis","getForAxis","optionsViewForAxis_","self","opt","axis_opts","axes","xAxisRange","xAxisExtremes","pad","plotter_","area","w","numRows","left","rawData_","right","range","yAxisExtremes","packed","gatherDatasets_","rolledSeries_","extremes","saveAxes","computeYAxisRanges_","newAxes","extremeRange","yAxisRange","idx","computedValueRange","yAxisRanges","ret","toDomCoords","x","y","toDomXCoord","toDomYCoord","xRange","pct","toPercentYCoord","h","toDataCoords","toDataXCoord","toDataYCoord","logRangeFraction","yRange","logscale","logr0","log10","logr1","toPercentXCoord","numColumns","getValue","row","col","enclosing","graphDiv","createElement","textAlign","position","appendChild","canvas_","createCanvas","top","hidden_","createPlotKitCanvas_","canvas_ctx_","getContext","hidden_ctx_","resizeElements_","mouseEventElement_","createMouseEventElement_","layout_","mouseMoveHandler_","mouseMove_","mouseOutHandler_","target","fromElement","relatedTarget","toElement","isNodeContainedBy","mouseOut_","addAndTrackEvent","resizeHandler_","resize","resizeObserver_","resizeMode","ResizeObserver","maindivOverflow","overflow","observe","pixelRatioOption","canvasScale","getContextPixelRatio","scale","hiddenScale","destroy","restore","pop","removeRecursive","node","hasChildNodes","firstChild","removeChild","removeTrackedEvents_","removeEvent","disconnect","nullOut","obj","n","canvas","setColors_","labels","getLabels","num","colors_","colorsMap_","sat","val","half","Math","ceil","colors","visibility","label","colorStr","hue","hsvToRGB","getColors","getPropertiesForSeries","series_name","column","visible","color","axisForSeries","createRollInterface_","roller","roller_","display","className","getArea","textAttr","size","value","that","onchange","adjustRoll","context","isZooming","isPanning","is2DPan","dragStartX","dragStartY","dragEndX","dragEndY","dragDirection","prevEndX","prevEndY","prevDragDirection","cancelNextDblclick","initialLeftmostDate","xUnitsPerPixel","dateRange","px","py","boundedDates","boundedValues","tarp","initializeMouseDown","event","g","contextB","returnValue","cancelBubble","canvasPos","findPos","dragGetX_","dragGetY_","cover","draggingDate","draggingValue","dragValueRange","uncover","interactionModel","bindHandler","handler","willDestroyContextMyself","mouseUpHandler","drawZoomRect_","direction","startX","endX","startY","endY","prevDirection","ctx","HORIZONTAL","clearRect","min","getPlotArea","abs","VERTICAL","fillStyle","fillRect","clearZoomRect_","currentZoomRectArgs_","doZoomX_","lowX","highX","minDate","maxDate","doZoomXDates_","old_window","new_window","zoomCallback","doAnimatedZoom","animatedZoomCallback","doZoomY_","lowY","highY","oldValueRanges","newValueRanges","hi","low","minX","maxX","zoomAnimationFunction","frame","numFrames","k","pow","resetZoom","dirtyX","dirtyY","dirty","clearSelection","animatedZooms","forEach","drawGraph_","oldWindow","newWindow","oldXRange","newXRange","oldYRanges","newYRanges","steps","windows","valueRanges","step","frac","thisRange","j","repeatAndCleanup","eventToDomCoords","offsetX","offsetY","eventElementPos","canvasx","pageX","canvasy","pageY","findClosestRow","domX","minDistX","Infinity","closestRow","sets","points","len","point","isValidPoint","dist","findClosestPoint","domY","minDist","dx","dy","closestPoint","closestSeries","setIdx","setNames","findStackedPoint","boundary","getLeftBoundary_","rowIdx","p1","p2","r","p0","canvasCoords","highlightSeriesOpts","selectionChanged","isSeriesLocked","closest","setSelection","lastx_","selPoints_","lastRow_","highlightSet_","animateSelection_","totalSteps","millis","fadeLevel","animateId","start","updateSelection_","thisId","cleanupIfClearing","opt_animFraction","selectedRow","selectedX","selectedPoints","alpha","backgroundColor","toRGB_","animateBackgroundFade","b","_renderLineChart","maxCircleSize","save","pt","isNaN","circleSize","Circles","DEFAULT","lineWidth","strokeStyle","opt_locked","opt_trigger_highlight_callback","changed","setRow","yval","pointIdx","xval","lockedSet_","getSelection","getHighlightSeries","loadedEvent_","parseCSV_","cascadeDataDidUpdateEvent_","predraw_","addXTicks_","xAxisOptionsView","xTicks","setXTicks","getHandlerClass_","handlerClass","Date","dataHandler_","computePlotArea","computeYAxes_","series","extractSeries","rollingAverage","end","drawingTimeMs_","PointType","stackPoints_","cumulativeYval","seriesExtremes","fillMethod","lastXval","prevPoint","nextPoint","nextPointIdx","updateNextPoint","actualYval","stackedYval","yval_stacked","rolledSeries","boundaryIds","seriesIdx","sampleIdx","firstIdx","lastIdx","axisIdx","num_series","high","correctedFirstIdx","isInvalidValue","correctedLastIdx","slice","getExtremeYValues","seriesPoints","seriesToPoints","is_initial_draw","removeAllDatasets","pointSize","dataIdx","addDataset","setYAxes","evaluate","renderGraph_","log","clear","underlayCallback","drawingContext","render","drawCallback","readyFired_","fn","index","v","numAxes","axisOptions","y2","axisPropertiesForSeries","isNullUndefinedOrNaN","parseFloat","ypadCompat","span","ypad","p_axis","includeZero","independentTicks","seriesForAxis","yRangePad","minY","maxY","extremeMinY","extremeMaxY","max","maxAxisY","minAxisY","y0","y1","delta","y0pct","y1pct","ticker","ticks","p_ticks","p_scale","tick_values","y_frac","y_val","detectTypeFromString_","str","isDate","dashPos","setXAxisOptions_","xValueParser","dateParser","valueFormatter","dateValueFormatter","dateTicker","axisLabelFormatter","dateAxisLabelFormatter","numericTicks","line_delimiter","detectLineDelimiter","lines","split","vals","delim","reparseSeries","line_no","xParser","defaultParserSet","expectedCols","outOfOrder","line","inFields","fields","parseFloat_","test","warn","all_null","sort","a","validateNativeFormat","firstRow","firstX","isDateLike","isArrayLike","parseArray_","num_labels","parsedData","clone","getTime","numberAxisLabelFormatter","parseDataTable_","shortTextForAnnotationNum","shortText","String","fromCharCode","floor","toLowerCase","cols","getNumberOfColumns","rows","getNumberOfRows","indepType","getColumnType","colIdx","annotationCols","hasAnnotations","getColumnLabel","annotations","ann","text","isFinite","setAnnotations","datatype","typeArrayLike","getColumnRange","req","XMLHttpRequest","ActiveXObject","caller","onreadystatechange","readyState","status","responseText","open","send","updateOptions","input_attrs","block_redraw","prevNumAxes","requiresNewPoints","isPixelChangingOptionList","my_attrs","resize_lock","old_width","old_height","setVisibility","numIsObject","Array","isArray","suppressDraw","indexFromSetName","getRowForX","xVal","ready","elem","addEvent","reg","DASHED_LINE","DOT_DASH_LINE","dateString_","defaultInteractionModel","defaultModel","nonInteractiveModel","nonInteractiveModel_","Plugins","Legend","Axes","Annotations","ChartLabels","Grid","RangeSelector","DataHandlers","startPan","startZoom","movePan","moveZoom","endPan","endZoom","numericLinearTicks","Granularity","getDateAxis","floatFormat","setupDOMready_"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontEnd/node_modules/dygraphs/src/dygraph.js"],"sourcesContent":["/**\n * @license\n * Copyright 2006 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview Creates an interactive, zoomable graph based on a CSV file or\n * string. Dygraph can handle multiple series with or without high/low bands.\n * The date/value ranges will be automatically set. Dygraph uses the\n * &lt;canvas&gt; tag, so it only works in FF1.5+.\n * See the source or https://dygraphs.com/ for more information.\n * @author danvdk@gmail.com (Dan Vanderkam)\n */\n\n/*\n  Usage:\n   <div id=\"graphdiv\" style=\"width:800px; height:500px;\"></div>\n   <script type=\"text/javascript\"><!--//--><![CDATA[//><!--\n   $(function onDOMready() {\n     new Dygraph(document.getElementById(\"graphdiv\"),\n                 \"datafile.csv\",  // CSV file with headers\n                 { }); // options\n   });\n   //--><!]]></script>\n\n The CSV file is of the form\n\n   Date,SeriesA,SeriesB,SeriesC\n   YYYY-MM-DD,A1,B1,C1\n   YYYY-MM-DD,A2,B2,C2\n\n If the 'errorBars' option is set in the constructor, the input should be of\n the form\n   Date,SeriesA,SeriesB,...\n   YYYY-MM-DD,A1,sigmaA1,B1,sigmaB1,...\n   YYYY-MM-DD,A2,sigmaA2,B2,sigmaB2,...\n\n If the 'fractions' option is set, the input should be of the form:\n\n   Date,SeriesA,SeriesB,...\n   YYYY-MM-DD,A1/B1,A2/B2,...\n   YYYY-MM-DD,A1/B1,A2/B2,...\n\n And high/low bands will be calculated automatically using a binomial distribution.\n\n For further documentation and examples, see http://dygraphs.com/\n */\n\nimport DygraphLayout from './dygraph-layout';\nimport DygraphCanvasRenderer from './dygraph-canvas';\nimport DygraphOptions from './dygraph-options';\nimport DygraphInteraction from './dygraph-interaction-model';\nimport * as DygraphTickers from './dygraph-tickers';\nimport * as utils from './dygraph-utils';\nimport DEFAULT_ATTRS from './dygraph-default-attrs';\nimport OPTIONS_REFERENCE from './dygraph-options-reference';\nimport IFrameTarp from './iframe-tarp';\n\nimport DefaultHandler from './datahandler/default';\nimport ErrorBarsHandler from './datahandler/bars-error';\nimport CustomBarsHandler from './datahandler/bars-custom';\nimport DefaultFractionHandler from './datahandler/default-fractions';\nimport FractionsBarsHandler from './datahandler/bars-fractions';\nimport BarsHandler from './datahandler/bars';\n\nimport AnnotationsPlugin from './plugins/annotations';\nimport AxesPlugin from './plugins/axes';\nimport ChartLabelsPlugin from './plugins/chart-labels';\nimport GridPlugin from './plugins/grid';\nimport LegendPlugin from './plugins/legend';\nimport RangeSelectorPlugin from './plugins/range-selector';\n\nimport GVizChart from './dygraph-gviz';\n\n\"use strict\";\n\n/**\n * @class Creates an interactive, zoomable chart.\n * @name Dygraph\n *\n * @constructor\n * @param {div | String} div A div or the id of a div into which to construct\n * the chart. Must not have any padding.\n * @param {String | Function} file A file containing CSV data or a function\n * that returns this data. The most basic expected format for each line is\n * \"YYYY/MM/DD,val1,val2,...\". For more information, see\n * http://dygraphs.com/data.html.\n * @param {Object} attrs Various other attributes, e.g. errorBars determines\n * whether the input data contains error ranges. For a complete list of\n * options, see http://dygraphs.com/options.html.\n */\nvar Dygraph = function Dygraph(div, data, opts) {\n  this.__init__(div, data, opts);\n};\n\nDygraph.NAME = \"Dygraph\";\nDygraph.VERSION = \"2.2.1\";\n\n// internal autoloader workaround\nvar _addrequire = {};\nDygraph._require = function require(what) {\n  return (what in _addrequire ? _addrequire[what] : Dygraph._require._b(what));\n};\nDygraph._require._b = null; // set by xfrmmodmap-dy.js\nDygraph._require.add = function add(what, towhat) {\n  _addrequire[what] = towhat;\n};\n\n// Various default values\nDygraph.DEFAULT_ROLL_PERIOD = 1;\nDygraph.DEFAULT_WIDTH = 480;\nDygraph.DEFAULT_HEIGHT = 320;\n\n// For max 60 Hz. animation:\nDygraph.ANIMATION_STEPS = 12;\nDygraph.ANIMATION_DURATION = 200;\n\n/**\n * Standard plotters. These may be used by clients.\n * Available plotters are:\n * - Dygraph.Plotters.linePlotter: draws central lines (most common)\n * - Dygraph.Plotters.errorPlotter: draws high/low bands\n * - Dygraph.Plotters.fillPlotter: draws fills under lines (used with fillGraph)\n *\n * By default, the plotter is [fillPlotter, errorPlotter, linePlotter].\n * This causes all the lines to be drawn over all the fills/bands.\n */\nDygraph.Plotters = DygraphCanvasRenderer._Plotters;\n\n// Used for initializing annotation CSS rules only once.\nDygraph.addedAnnotationCSS = false;\n\n/**\n * Initializes the Dygraph. This creates a new DIV and constructs the PlotKit\n * and context &lt;canvas&gt; inside of it. See the constructor for details.\n * on the parameters.\n * @param {Element} div the Element to render the graph into.\n * @param {string | Function} file Source data\n * @param {Object} attrs Miscellaneous other options\n * @private\n */\nDygraph.prototype.__init__ = function(div, file, attrs) {\n  this.is_initial_draw_ = true;\n  this.readyFns_ = [];\n\n  // Support two-argument constructor\n  if (attrs === null || attrs === undefined) { attrs = {}; }\n\n  attrs = Dygraph.copyUserAttrs_(attrs);\n\n  if (typeof(div) == 'string') {\n    div = document.getElementById(div);\n  }\n\n  if (!div) {\n    throw new Error('Constructing dygraph with a non-existent div!');\n  }\n\n  // Copy the important bits into the object\n  // TODO(danvk): most of these should just stay in the attrs_ dictionary.\n  this.maindiv_ = div;\n  this.file_ = file;\n  this.rollPeriod_ = attrs.rollPeriod || Dygraph.DEFAULT_ROLL_PERIOD;\n  this.previousVerticalX_ = -1;\n  this.fractions_ = attrs.fractions || false;\n  this.dateWindow_ = attrs.dateWindow || null;\n\n  this.annotations_ = [];\n\n  // Clear the div. This ensure that, if multiple dygraphs are passed the same\n  // div, then only one will be drawn.\n  div.innerHTML = \"\";\n\n  const resolved = window.getComputedStyle(div, null);\n  if (resolved.paddingLeft !== \"0px\" ||\n      resolved.paddingRight !== \"0px\" ||\n      resolved.paddingTop !== \"0px\" ||\n      resolved.paddingBottom !== \"0px\")\n    console.error('Main div contains padding; graph will misbehave');\n\n  // For historical reasons, the 'width' and 'height' options trump all CSS\n  // rules _except_ for an explicit 'width' or 'height' on the div.\n  // As an added convenience, if the div has zero height (like <div></div> does\n  // without any styles), then we use a default height/width.\n  if (div.style.width === '' && attrs.width) {\n    div.style.width = attrs.width + \"px\";\n  }\n  if (div.style.height === '' && attrs.height) {\n    div.style.height = attrs.height + \"px\";\n  }\n  if (div.style.height === '' && div.clientHeight === 0) {\n    div.style.height = Dygraph.DEFAULT_HEIGHT + \"px\";\n    if (div.style.width === '') {\n      div.style.width = Dygraph.DEFAULT_WIDTH + \"px\";\n    }\n  }\n  // These will be zero if the dygraph's div is hidden. In that case,\n  // use the user-specified attributes if present. If not, use zero\n  // and assume the user will call resize to fix things later.\n  this.width_ = div.clientWidth || attrs.width || 0;\n  this.height_ = div.clientHeight || attrs.height || 0;\n\n  // TODO(danvk): set fillGraph to be part of attrs_ here, not user_attrs_.\n  if (attrs.stackedGraph) {\n    attrs.fillGraph = true;\n    // TODO(nikhilk): Add any other stackedGraph checks here.\n  }\n\n  // DEPRECATION WARNING: All option processing should be moved from\n  // attrs_ and user_attrs_ to options_, which holds all this information.\n  //\n  // Dygraphs has many options, some of which interact with one another.\n  // To keep track of everything, we maintain two sets of options:\n  //\n  //  this.user_attrs_   only options explicitly set by the user.\n  //  this.attrs_        defaults, options derived from user_attrs_, data.\n  //\n  // Options are then accessed this.attr_('attr'), which first looks at\n  // user_attrs_ and then computed attrs_. This way Dygraphs can set intelligent\n  // defaults without overriding behavior that the user specifically asks for.\n  this.user_attrs_ = {};\n  utils.update(this.user_attrs_, attrs);\n\n  // This sequence ensures that Dygraph.DEFAULT_ATTRS is never modified.\n  this.attrs_ = {};\n  utils.updateDeep(this.attrs_, DEFAULT_ATTRS);\n\n  this.boundaryIds_ = [];\n  this.setIndexByName_ = {};\n  this.datasetIndex_ = [];\n\n  this.registeredEvents_ = [];\n  this.eventListeners_ = {};\n\n  this.attributes_ = new DygraphOptions(this);\n\n  // Create the containing DIV and other interactive elements\n  this.createInterface_();\n\n  // Activate plugins.\n  this.plugins_ = [];\n  var plugins = Dygraph.PLUGINS.concat(this.getOption('plugins'));\n  for (var i = 0; i < plugins.length; i++) {\n    // the plugins option may contain either plugin classes or instances.\n    // Plugin instances contain an activate method.\n    var Plugin = plugins[i];  // either a constructor or an instance.\n    var pluginInstance;\n    if (typeof(Plugin.activate) !== 'undefined') {\n      pluginInstance = Plugin;\n    } else {\n      pluginInstance = new Plugin();\n    }\n\n    var pluginDict = {\n      plugin: pluginInstance,\n      events: {},\n      options: {},\n      pluginOptions: {}\n    };\n\n    var handlers = pluginInstance.activate(this);\n    for (var eventName in handlers) {\n      if (!handlers.hasOwnProperty(eventName)) continue;\n      // TODO(danvk): validate eventName.\n      pluginDict.events[eventName] = handlers[eventName];\n    }\n\n    this.plugins_.push(pluginDict);\n  }\n\n  // At this point, plugins can no longer register event handlers.\n  // Construct a map from event -> ordered list of [callback, plugin].\n  for (var i = 0; i < this.plugins_.length; i++) {\n    var plugin_dict = this.plugins_[i];\n    for (var eventName in plugin_dict.events) {\n      if (!plugin_dict.events.hasOwnProperty(eventName)) continue;\n      var callback = plugin_dict.events[eventName];\n\n      var pair = [plugin_dict.plugin, callback];\n      if (!(eventName in this.eventListeners_)) {\n        this.eventListeners_[eventName] = [pair];\n      } else {\n        this.eventListeners_[eventName].push(pair);\n      }\n    }\n  }\n\n  this.createDragInterface_();\n\n  this.start_();\n};\n\n/**\n * Triggers a cascade of events to the various plugins which are interested in them.\n * Returns true if the \"default behavior\" should be prevented, i.e. if one\n * of the event listeners called event.preventDefault().\n * @private\n */\nDygraph.prototype.cascadeEvents_ = function(name, extra_props) {\n  if (!(name in this.eventListeners_)) return false;\n\n  // QUESTION: can we use objects & prototypes to speed this up?\n  var e = {\n    dygraph: this,\n    cancelable: false,\n    defaultPrevented: false,\n    preventDefault: function() {\n      if (!e.cancelable) throw \"Cannot call preventDefault on non-cancelable event.\";\n      e.defaultPrevented = true;\n    },\n    propagationStopped: false,\n    stopPropagation: function() {\n      e.propagationStopped = true;\n    }\n  };\n  utils.update(e, extra_props);\n\n  var callback_plugin_pairs = this.eventListeners_[name];\n  if (callback_plugin_pairs) {\n    for (var i = callback_plugin_pairs.length - 1; i >= 0; i--) {\n      var plugin = callback_plugin_pairs[i][0];\n      var callback = callback_plugin_pairs[i][1];\n      callback.call(plugin, e);\n      if (e.propagationStopped) break;\n    }\n  }\n  return e.defaultPrevented;\n};\n\n/**\n * Fetch a plugin instance of a particular class. Only for testing.\n * @private\n * @param {!Class} type The type of the plugin.\n * @return {Object} Instance of the plugin, or null if there is none.\n */\nDygraph.prototype.getPluginInstance_ = function(type) {\n  for (var i = 0; i < this.plugins_.length; i++) {\n    var p = this.plugins_[i];\n    if (p.plugin instanceof type) {\n      return p.plugin;\n    }\n  }\n  return null;\n};\n\n/**\n * Returns the zoomed status of the chart for one or both axes.\n *\n * Axis is an optional parameter. Can be set to 'x' or 'y'.\n *\n * The zoomed status for an axis is set whenever a user zooms using the mouse\n * or when the dateWindow or valueRange are updated. Double-clicking or calling\n * resetZoom() resets the zoom status for the chart.\n */\nDygraph.prototype.isZoomed = function(axis) {\n  const isZoomedX = !!this.dateWindow_;\n  if (axis === 'x') return isZoomedX;\n\n  const isZoomedY = this.axes_.map(axis => !!axis.valueRange).indexOf(true) >= 0;\n  if (axis === null || axis === undefined) {\n    return isZoomedX || isZoomedY;\n  }\n  if (axis === 'y') return isZoomedY;\n\n  throw new Error(`axis parameter is [${axis}] must be null, 'x' or 'y'.`);\n};\n\n/**\n * Returns information about the Dygraph object, including its containing ID.\n */\nDygraph.prototype.toString = function() {\n  var maindiv = this.maindiv_;\n  var id = (maindiv && maindiv.id) ? maindiv.id : maindiv;\n  return \"[Dygraph \" + id + \"]\";\n};\n\n/**\n * @private\n * Returns the value of an option. This may be set by the user (either in the\n * constructor or by calling updateOptions) or by dygraphs, and may be set to a\n * per-series value.\n * @param {string} name The name of the option, e.g. 'rollPeriod'.\n * @param {string} [seriesName] The name of the series to which the option\n * will be applied. If no per-series value of this option is available, then\n * the global value is returned. This is optional.\n * @return {...} The value of the option.\n */\nDygraph.prototype.attr_ = function(name, seriesName) {\n  if (typeof process !== 'undefined' && process.env.NODE_ENV != 'production') {\n    // For \"production\" code, this gets removed by uglifyjs.\n    if (typeof(OPTIONS_REFERENCE) === 'undefined') {\n      console.error('Must include options reference JS for testing');\n    } else if (!OPTIONS_REFERENCE.hasOwnProperty(name)) {\n      console.error('Dygraphs is using property ' + name + ', which has no ' +\n                    'entry in the Dygraphs.OPTIONS_REFERENCE listing.');\n      // Only log this error once.\n      OPTIONS_REFERENCE[name] = true;\n    }\n  }\n  return seriesName ? this.attributes_.getForSeries(name, seriesName) : this.attributes_.get(name);\n};\n\n/**\n * Returns the current value for an option, as set in the constructor or via\n * updateOptions. You may pass in an (optional) series name to get per-series\n * values for the option.\n *\n * All values returned by this method should be considered immutable. If you\n * modify them, there is no guarantee that the changes will be honored or that\n * dygraphs will remain in a consistent state. If you want to modify an option,\n * use updateOptions() instead.\n *\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {*} The value of the option.\n */\nDygraph.prototype.getOption = function(name, opt_seriesName) {\n  return this.attr_(name, opt_seriesName);\n};\n\n/**\n * Like getOption(), but specifically returns a number.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {number} The value of the option.\n * @private\n */\nDygraph.prototype.getNumericOption = function(name, opt_seriesName) {\n  return /** @type{number} */(this.getOption(name, opt_seriesName));\n};\n\n/**\n * Like getOption(), but specifically returns a string.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {string} The value of the option.\n * @private\n */\nDygraph.prototype.getStringOption = function(name, opt_seriesName) {\n  return /** @type{string} */(this.getOption(name, opt_seriesName));\n};\n\n/**\n * Like getOption(), but specifically returns a boolean.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {boolean} The value of the option.\n * @private\n */\nDygraph.prototype.getBooleanOption = function(name, opt_seriesName) {\n  return /** @type{boolean} */(this.getOption(name, opt_seriesName));\n};\n\n/**\n * Like getOption(), but specifically returns a function.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {function(...)} The value of the option.\n * @private\n */\nDygraph.prototype.getFunctionOption = function(name, opt_seriesName) {\n  return /** @type{function(...)} */(this.getOption(name, opt_seriesName));\n};\n\nDygraph.prototype.getOptionForAxis = function(name, axis) {\n  return this.attributes_.getForAxis(name, axis);\n};\n\n/**\n * @private\n * @param {string} axis The name of the axis (i.e. 'x', 'y' or 'y2')\n * @return {...} A function mapping string -> option value\n */\nDygraph.prototype.optionsViewForAxis_ = function(axis) {\n  var self = this;\n  return function(opt) {\n    var axis_opts = self.user_attrs_.axes;\n    if (axis_opts && axis_opts[axis] && axis_opts[axis].hasOwnProperty(opt)) {\n      return axis_opts[axis][opt];\n    }\n\n    // I don't like that this is in a second spot.\n    if (axis === 'x' && opt === 'logscale') {\n      // return the default value.\n      // TODO(konigsberg): pull the default from a global default.\n      return false;\n    }\n\n    // user-specified attributes always trump defaults, even if they're less\n    // specific.\n    if (typeof(self.user_attrs_[opt]) != 'undefined') {\n      return self.user_attrs_[opt];\n    }\n\n    axis_opts = self.attrs_.axes;\n    if (axis_opts && axis_opts[axis] && axis_opts[axis].hasOwnProperty(opt)) {\n      return axis_opts[axis][opt];\n    }\n    // check old-style axis options\n    // TODO(danvk): add a deprecation warning if either of these match.\n    if (axis == 'y' && self.axes_[0].hasOwnProperty(opt)) {\n      return self.axes_[0][opt];\n    } else if (axis == 'y2' && self.axes_[1].hasOwnProperty(opt)) {\n      return self.axes_[1][opt];\n    }\n    return self.attr_(opt);\n  };\n};\n\n/**\n * Returns the current rolling period, as set by the user or an option.\n * @return {number} The number of points in the rolling window\n */\nDygraph.prototype.rollPeriod = function() {\n  return this.rollPeriod_;\n};\n\n/**\n * Returns the currently-visible x-range. This can be affected by zooming,\n * panning or a call to updateOptions.\n * Returns a two-element array: [left, right].\n * If the Dygraph has dates on the x-axis, these will be millis since epoch.\n */\nDygraph.prototype.xAxisRange = function() {\n  return this.dateWindow_ ? this.dateWindow_ : this.xAxisExtremes();\n};\n\n/**\n * Returns the lower- and upper-bound x-axis values of the data set.\n */\nDygraph.prototype.xAxisExtremes = function() {\n  var pad = this.getNumericOption('xRangePad') / this.plotter_.area.w;\n  if (this.numRows() === 0) {\n    return [0 - pad, 1 + pad];\n  }\n  var left = this.rawData_[0][0];\n  var right = this.rawData_[this.rawData_.length - 1][0];\n  if (pad) {\n    // Must keep this in sync with dygraph-layout _evaluateLimits()\n    var range = right - left;\n    left -= range * pad;\n    right += range * pad;\n  }\n  return [left, right];\n};\n\n/**\n * Returns the lower- and upper-bound y-axis values for each axis. These are\n * the ranges you'll get if you double-click to zoom out or call resetZoom().\n * The return value is an array of [low, high] tuples, one for each y-axis.\n */\nDygraph.prototype.yAxisExtremes = function() {\n  // TODO(danvk): this is pretty inefficient\n  const packed = this.gatherDatasets_(this.rolledSeries_, null);\n  const { extremes } = packed;\n  const saveAxes = this.axes_;\n  this.computeYAxisRanges_(extremes);\n  const newAxes = this.axes_;\n  this.axes_ = saveAxes;\n  return newAxes.map(axis => axis.extremeRange);\n}\n\n/**\n * Returns the currently-visible y-range for an axis. This can be affected by\n * zooming, panning or a call to updateOptions. Axis indices are zero-based. If\n * called with no arguments, returns the range of the first axis.\n * Returns a two-element array: [bottom, top].\n */\nDygraph.prototype.yAxisRange = function(idx) {\n  if (typeof(idx) == \"undefined\") idx = 0;\n  if (idx < 0 || idx >= this.axes_.length) {\n    return null;\n  }\n  var axis = this.axes_[idx];\n  return [ axis.computedValueRange[0], axis.computedValueRange[1] ];\n};\n\n/**\n * Returns the currently-visible y-ranges for each axis. This can be affected by\n * zooming, panning, calls to updateOptions, etc.\n * Returns an array of [bottom, top] pairs, one for each y-axis.\n */\nDygraph.prototype.yAxisRanges = function() {\n  var ret = [];\n  for (var i = 0; i < this.axes_.length; i++) {\n    ret.push(this.yAxisRange(i));\n  }\n  return ret;\n};\n\n// TODO(danvk): use these functions throughout dygraphs.\n/**\n * Convert from data coordinates to canvas/div X/Y coordinates.\n * If specified, do this conversion for the coordinate system of a particular\n * axis. Uses the first axis by default.\n * Returns a two-element array: [X, Y]\n *\n * Note: use toDomXCoord instead of toDomCoords(x, null) and use toDomYCoord\n * instead of toDomCoords(null, y, axis).\n */\nDygraph.prototype.toDomCoords = function(x, y, axis) {\n  return [ this.toDomXCoord(x), this.toDomYCoord(y, axis) ];\n};\n\n/**\n * Convert from data x coordinates to canvas/div X coordinate.\n * If specified, do this conversion for the coordinate system of a particular\n * axis.\n * Returns a single value or null if x is null.\n */\nDygraph.prototype.toDomXCoord = function(x) {\n  if (x === null) {\n    return null;\n  }\n\n  var area = this.plotter_.area;\n  var xRange = this.xAxisRange();\n  return area.x + (x - xRange[0]) / (xRange[1] - xRange[0]) * area.w;\n};\n\n/**\n * Convert from data x coordinates to canvas/div Y coordinate and optional\n * axis. Uses the first axis by default.\n *\n * returns a single value or null if y is null.\n */\nDygraph.prototype.toDomYCoord = function(y, axis) {\n  var pct = this.toPercentYCoord(y, axis);\n\n  if (pct === null) {\n    return null;\n  }\n  var area = this.plotter_.area;\n  return area.y + pct * area.h;\n};\n\n/**\n * Convert from canvas/div coords to data coordinates.\n * If specified, do this conversion for the coordinate system of a particular\n * axis. Uses the first axis by default.\n * Returns a two-element array: [X, Y].\n *\n * Note: use toDataXCoord instead of toDataCoords(x, null) and use toDataYCoord\n * instead of toDataCoords(null, y, axis).\n */\nDygraph.prototype.toDataCoords = function(x, y, axis) {\n  return [ this.toDataXCoord(x), this.toDataYCoord(y, axis) ];\n};\n\n/**\n * Convert from canvas/div x coordinate to data coordinate.\n *\n * If x is null, this returns null.\n */\nDygraph.prototype.toDataXCoord = function(x) {\n  if (x === null) {\n    return null;\n  }\n\n  var area = this.plotter_.area;\n  var xRange = this.xAxisRange();\n\n  if (!this.attributes_.getForAxis(\"logscale\", 'x')) {\n    return xRange[0] + (x - area.x) / area.w * (xRange[1] - xRange[0]);\n  } else {\n    var pct = (x - area.x) / area.w;\n    return utils.logRangeFraction(xRange[0], xRange[1], pct);\n  }\n};\n\n/**\n * Convert from canvas/div y coord to value.\n *\n * If y is null, this returns null.\n * if axis is null, this uses the first axis.\n */\nDygraph.prototype.toDataYCoord = function(y, axis) {\n  if (y === null) {\n    return null;\n  }\n\n  var area = this.plotter_.area;\n  var yRange = this.yAxisRange(axis);\n\n  if (typeof(axis) == \"undefined\") axis = 0;\n  if (!this.attributes_.getForAxis(\"logscale\", axis)) {\n    return yRange[0] + (area.y + area.h - y) / area.h * (yRange[1] - yRange[0]);\n  } else {\n    // Computing the inverse of toDomCoord.\n    var pct = (y - area.y) / area.h;\n    // Note reversed yRange, y1 is on top with pct==0.\n    return utils.logRangeFraction(yRange[1], yRange[0], pct);\n  }\n};\n\n/**\n * Converts a y for an axis to a percentage from the top to the\n * bottom of the drawing area.\n *\n * If the coordinate represents a value visible on the canvas, then\n * the value will be between 0 and 1, where 0 is the top of the canvas.\n * However, this method will return values outside the range, as\n * values can fall outside the canvas.\n *\n * If y is null, this returns null.\n * if axis is null, this uses the first axis.\n *\n * @param {number} y The data y-coordinate.\n * @param {number} [axis] The axis number on which the data coordinate lives.\n * @return {number} A fraction in [0, 1] where 0 = the top edge.\n */\nDygraph.prototype.toPercentYCoord = function(y, axis) {\n  if (y === null) {\n    return null;\n  }\n  if (typeof(axis) == \"undefined\") axis = 0;\n\n  var yRange = this.yAxisRange(axis);\n\n  var pct;\n  var logscale = this.attributes_.getForAxis(\"logscale\", axis);\n  if (logscale) {\n    var logr0 = utils.log10(yRange[0]);\n    var logr1 = utils.log10(yRange[1]);\n    pct = (logr1 - utils.log10(y)) / (logr1 - logr0);\n  } else {\n    // yRange[1] - y is unit distance from the bottom.\n    // yRange[1] - yRange[0] is the scale of the range.\n    // (yRange[1] - y) / (yRange[1] - yRange[0]) is the % from the bottom.\n    pct = (yRange[1] - y) / (yRange[1] - yRange[0]);\n  }\n  return pct;\n};\n\n/**\n * Converts an x value to a percentage from the left to the right of\n * the drawing area.\n *\n * If the coordinate represents a value visible on the canvas, then\n * the value will be between 0 and 1, where 0 is the left of the canvas.\n * However, this method will return values outside the range, as\n * values can fall outside the canvas.\n *\n * If x is null, this returns null.\n * @param {number} x The data x-coordinate.\n * @return {number} A fraction in [0, 1] where 0 = the left edge.\n */\nDygraph.prototype.toPercentXCoord = function(x) {\n  if (x === null) {\n    return null;\n  }\n\n  var xRange = this.xAxisRange();\n  var pct;\n  var logscale = this.attributes_.getForAxis(\"logscale\", 'x') ;\n  if (logscale === true) {  // logscale can be null so we test for true explicitly.\n    var logr0 = utils.log10(xRange[0]);\n    var logr1 = utils.log10(xRange[1]);\n    pct = (utils.log10(x) - logr0) / (logr1 - logr0);\n  } else {\n    // x - xRange[0] is unit distance from the left.\n    // xRange[1] - xRange[0] is the scale of the range.\n    // The full expression below is the % from the left.\n    pct = (x - xRange[0]) / (xRange[1] - xRange[0]);\n  }\n  return pct;\n};\n\n/**\n * Returns the number of columns (including the independent variable).\n * @return {number} The number of columns.\n */\nDygraph.prototype.numColumns = function() {\n  if (!this.rawData_) return 0;\n  return this.rawData_[0] ? this.rawData_[0].length : this.attr_(\"labels\").length;\n};\n\n/**\n * Returns the number of rows (excluding any header/label row).\n * @return {number} The number of rows, less any header.\n */\nDygraph.prototype.numRows = function() {\n  if (!this.rawData_) return 0;\n  return this.rawData_.length;\n};\n\n/**\n * Returns the value in the given row and column. If the row and column exceed\n * the bounds on the data, returns null. Also returns null if the value is\n * missing.\n * @param {number} row The row number of the data (0-based). Row 0 is the\n *     first row of data, not a header row.\n * @param {number} col The column number of the data (0-based)\n * @return {number} The value in the specified cell or null if the row/col\n *     were out of range.\n */\nDygraph.prototype.getValue = function(row, col) {\n  if (row < 0 || row >= this.rawData_.length) return null;\n  if (col < 0 || col >= this.rawData_[row].length) return null;\n\n  return this.rawData_[row][col];\n};\n\n/**\n * Generates interface elements for the Dygraph: a containing div, a div to\n * display the current point, and a textbox to adjust the rolling average\n * period. Also creates the Renderer/Layout elements.\n * @private\n */\nDygraph.prototype.createInterface_ = function() {\n  // Create the all-enclosing graph div\n  var enclosing = this.maindiv_;\n\n  this.graphDiv = document.createElement(\"div\");\n\n  // TODO(danvk): any other styles that are useful to set here?\n  this.graphDiv.style.textAlign = 'left';  // This is a CSS \"reset\"\n  this.graphDiv.style.position = 'relative';\n  enclosing.appendChild(this.graphDiv);\n\n  // Create the canvas for interactive parts of the chart.\n  this.canvas_ = utils.createCanvas();\n  this.canvas_.style.position = \"absolute\";\n  this.canvas_.style.top = 0;\n  this.canvas_.style.left = 0;\n\n  // ... and for static parts of the chart.\n  this.hidden_ = this.createPlotKitCanvas_(this.canvas_);\n\n  this.canvas_ctx_ = utils.getContext(this.canvas_);\n  this.hidden_ctx_ = utils.getContext(this.hidden_);\n\n  this.resizeElements_();\n\n  // The interactive parts of the graph are drawn on top of the chart.\n  this.graphDiv.appendChild(this.hidden_);\n  this.graphDiv.appendChild(this.canvas_);\n  this.mouseEventElement_ = this.createMouseEventElement_();\n\n  // Create the grapher\n  this.layout_ = new DygraphLayout(this);\n\n  var dygraph = this;\n\n  this.mouseMoveHandler_ = function(e) {\n    dygraph.mouseMove_(e);\n  };\n\n  this.mouseOutHandler_ = function(e) {\n    // The mouse has left the chart if:\n    // 1. e.target is inside the chart\n    // 2. e.relatedTarget is outside the chart\n    var target = e.target || e.fromElement;\n    var relatedTarget = e.relatedTarget || e.toElement;\n    if (utils.isNodeContainedBy(target, dygraph.graphDiv) &&\n        !utils.isNodeContainedBy(relatedTarget, dygraph.graphDiv)) {\n      dygraph.mouseOut_(e);\n    }\n  };\n\n  this.addAndTrackEvent(window, 'mouseout', this.mouseOutHandler_);\n  this.addAndTrackEvent(this.mouseEventElement_, 'mousemove', this.mouseMoveHandler_);\n\n  // Don't recreate and register the resize handler on subsequent calls.\n  // This happens when the graph is resized.\n  if (!this.resizeHandler_) {\n    this.resizeHandler_ = function(e) {\n      dygraph.resize();\n    };\n\n    // Update when the window is resized.\n    // TODO(danvk): drop frames depending on complexity of the chart.\n    this.addAndTrackEvent(window, 'resize', this.resizeHandler_);\n\n    this.resizeObserver_ = null;\n    var resizeMode = this.getStringOption('resizable');\n    if ((typeof(ResizeObserver) === 'undefined') &&\n        (resizeMode !== \"no\")) {\n      console.error('ResizeObserver unavailable; ignoring resizable property');\n      resizeMode = \"no\";\n    }\n    if (resizeMode === \"horizontal\" ||\n        resizeMode === \"vertical\" ||\n        resizeMode === \"both\") {\n      enclosing.style.resize = resizeMode;\n    } else if (resizeMode !== \"passive\") {\n      resizeMode = \"no\";\n    }\n    if (resizeMode !== \"no\") {\n      const maindivOverflow = window.getComputedStyle(enclosing).overflow;\n      if (window.getComputedStyle(enclosing).overflow === 'visible')\n        enclosing.style.overflow = 'hidden';\n      this.resizeObserver_ = new ResizeObserver(this.resizeHandler_);\n      this.resizeObserver_.observe(enclosing);\n    }\n  }\n};\n\nDygraph.prototype.resizeElements_ = function() {\n  this.graphDiv.style.width = this.width_ + \"px\";\n  this.graphDiv.style.height = this.height_ + \"px\";\n\n  var pixelRatioOption = this.getNumericOption('pixelRatio')\n\n  var canvasScale = pixelRatioOption || utils.getContextPixelRatio(this.canvas_ctx_);\n  this.canvas_.width = this.width_ * canvasScale;\n  this.canvas_.height = this.height_ * canvasScale;\n  this.canvas_.style.width = this.width_ + \"px\";    // for IE\n  this.canvas_.style.height = this.height_ + \"px\";  // for IE\n  if (canvasScale !== 1) {\n    this.canvas_ctx_.scale(canvasScale, canvasScale);\n  }\n\n  var hiddenScale = pixelRatioOption || utils.getContextPixelRatio(this.hidden_ctx_);\n  this.hidden_.width = this.width_ * hiddenScale;\n  this.hidden_.height = this.height_ * hiddenScale;\n  this.hidden_.style.width = this.width_ + \"px\";    // for IE\n  this.hidden_.style.height = this.height_ + \"px\";  // for IE\n  if (hiddenScale !== 1) {\n    this.hidden_ctx_.scale(hiddenScale, hiddenScale);\n  }\n};\n\n/**\n * Detach DOM elements in the dygraph and null out all data references.\n * Calling this when you're done with a dygraph can dramatically reduce memory\n * usage. See, e.g., the tests/perf.html example.\n */\nDygraph.prototype.destroy = function() {\n  this.canvas_ctx_.restore();\n  this.hidden_ctx_.restore();\n\n  // Destroy any plugins, in the reverse order that they were registered.\n  for (var i = this.plugins_.length - 1; i >= 0; i--) {\n    var p = this.plugins_.pop();\n    if (p.plugin.destroy) p.plugin.destroy();\n  }\n\n  var removeRecursive = function(node) {\n    while (node.hasChildNodes()) {\n      removeRecursive(node.firstChild);\n      node.removeChild(node.firstChild);\n    }\n  };\n\n  this.removeTrackedEvents_();\n\n  // remove mouse event handlers (This may not be necessary anymore)\n  utils.removeEvent(window, 'mouseout', this.mouseOutHandler_);\n  utils.removeEvent(this.mouseEventElement_, 'mousemove', this.mouseMoveHandler_);\n\n  // dispose of resizing handlers\n  if (this.resizeObserver_) {\n    this.resizeObserver_.disconnect();\n    this.resizeObserver_ = null;\n  }\n  utils.removeEvent(window, 'resize', this.resizeHandler_);\n  this.resizeHandler_ = null;\n\n  removeRecursive(this.maindiv_);\n\n  var nullOut = function nullOut(obj) {\n    for (var n in obj) {\n      if (typeof(obj[n]) === 'object') {\n        obj[n] = null;\n      }\n    }\n  };\n  // These may not all be necessary, but it can't hurt...\n  nullOut(this.layout_);\n  nullOut(this.plotter_);\n  nullOut(this);\n};\n\n/**\n * Creates the canvas on which the chart will be drawn. Only the Renderer ever\n * draws on this particular canvas. All Dygraph work (i.e. drawing hover dots\n * or the zoom rectangles) is done on this.canvas_.\n * @param {Object} canvas The Dygraph canvas over which to overlay the plot\n * @return {Object} The newly-created canvas\n * @private\n */\nDygraph.prototype.createPlotKitCanvas_ = function(canvas) {\n  var h = utils.createCanvas();\n  h.style.position = \"absolute\";\n  // TODO(danvk): h should be offset from canvas. canvas needs to include\n  // some extra area to make it easier to zoom in on the far left and far\n  // right. h needs to be precisely the plot area, so that clipping occurs.\n  h.style.top = canvas.style.top;\n  h.style.left = canvas.style.left;\n  h.width = this.width_;\n  h.height = this.height_;\n  h.style.width = this.width_ + \"px\";    // for IE\n  h.style.height = this.height_ + \"px\";  // for IE\n  return h;\n};\n\n/**\n * Creates an overlay element used to handle mouse events.\n * @return {Object} The mouse event element.\n * @private\n */\nDygraph.prototype.createMouseEventElement_ = function() {\n  return this.canvas_;\n};\n\n/**\n * Generate a set of distinct colors for the data series. This is done with a\n * color wheel. Saturation/Value are customizable, and the hue is\n * equally-spaced around the color wheel. If a custom set of colors is\n * specified, that is used instead.\n * @private\n */\nDygraph.prototype.setColors_ = function() {\n  var labels = this.getLabels();\n  var num = labels.length - 1;\n  this.colors_ = [];\n  this.colorsMap_ = {};\n\n  // These are used for when no custom colors are specified.\n  var sat = this.getNumericOption('colorSaturation') || 1.0;\n  var val = this.getNumericOption('colorValue') || 0.5;\n  var half = Math.ceil(num / 2);\n\n  var colors = this.getOption('colors');\n  var visibility = this.visibility();\n  for (var i = 0; i < num; i++) {\n    if (!visibility[i]) {\n      continue;\n    }\n    var label = labels[i + 1];\n    var colorStr = this.attributes_.getForSeries('color', label);\n    if (!colorStr) {\n      if (colors) {\n        colorStr = colors[i % colors.length];\n      } else {\n        // alternate colors for high contrast.\n        var idx = i % 2 ? (half + (i + 1)/ 2) : Math.ceil((i + 1) / 2);\n        var hue = (1.0 * idx / (1 + num));\n        colorStr = utils.hsvToRGB(hue, sat, val);\n      }\n    }\n    this.colors_.push(colorStr);\n    this.colorsMap_[label] = colorStr;\n  }\n};\n\n/**\n * Return the list of colors. This is either the list of colors passed in the\n * attributes or the autogenerated list of rgb(r,g,b) strings.\n * This does not return colors for invisible series.\n * @return {Array.<string>} The list of colors.\n */\nDygraph.prototype.getColors = function() {\n  return this.colors_;\n};\n\n/**\n * Returns a few attributes of a series, i.e. its color, its visibility, which\n * axis it's assigned to, and its column in the original data.\n * Returns null if the series does not exist.\n * Otherwise, returns an object with column, visibility, color and axis properties.\n * The \"axis\" property will be set to 1 for y1 and 2 for y2.\n * The \"column\" property can be fed back into getValue(row, column) to get\n * values for this series.\n */\nDygraph.prototype.getPropertiesForSeries = function(series_name) {\n  var idx = -1;\n  var labels = this.getLabels();\n  for (var i = 1; i < labels.length; i++) {\n    if (labels[i] == series_name) {\n      idx = i;\n      break;\n    }\n  }\n  if (idx == -1) return null;\n\n  return {\n    name: series_name,\n    column: idx,\n    visible: this.visibility()[idx - 1],\n    color: this.colorsMap_[series_name],\n    axis: 1 + this.attributes_.axisForSeries(series_name)\n  };\n};\n\n/**\n * Create the text box to adjust the averaging period\n * @private\n */\nDygraph.prototype.createRollInterface_ = function() {\n  // Create a roller if one doesn't exist already.\n  var roller = this.roller_;\n  if (!roller) {\n    this.roller_ = roller = document.createElement(\"input\");\n    roller.type = \"text\";\n    roller.style.display = \"none\";\n    roller.className = 'dygraph-roller';\n    this.graphDiv.appendChild(roller);\n  }\n\n  var display = this.getBooleanOption('showRoller') ? 'block' : 'none';\n\n  var area = this.getArea();\n  var textAttr = {\n                   \"top\": (area.y + area.h - 25) + \"px\",\n                   \"left\": (area.x + 1) + \"px\",\n                   \"display\": display\n                 };\n  roller.size = \"2\";\n  roller.value = this.rollPeriod_;\n  utils.update(roller.style, textAttr);\n\n  const that = this;\n  roller.onchange = function onchange() {\n    return that.adjustRoll(roller.value);\n  };\n};\n\n/**\n * Set up all the mouse handlers needed to capture dragging behavior for zoom\n * events.\n * @private\n */\nDygraph.prototype.createDragInterface_ = function() {\n  var context = {\n    // Tracks whether the mouse is down right now\n    isZooming: false,\n    isPanning: false,  // is this drag part of a pan?\n    is2DPan: false,    // if so, is that pan 1- or 2-dimensional?\n    dragStartX: null, // pixel coordinates\n    dragStartY: null, // pixel coordinates\n    dragEndX: null, // pixel coordinates\n    dragEndY: null, // pixel coordinates\n    dragDirection: null,\n    prevEndX: null, // pixel coordinates\n    prevEndY: null, // pixel coordinates\n    prevDragDirection: null,\n    cancelNextDblclick: false,  // see comment in dygraph-interaction-model.js\n\n    // The value on the left side of the graph when a pan operation starts.\n    initialLeftmostDate: null,\n\n    // The number of units each pixel spans. (This won't be valid for log\n    // scales)\n    xUnitsPerPixel: null,\n\n    // TODO(danvk): update this comment\n    // The range in second/value units that the viewport encompasses during a\n    // panning operation.\n    dateRange: null,\n\n    // Top-left corner of the canvas, in DOM coords\n    // TODO(konigsberg): Rename topLeftCanvasX, topLeftCanvasY.\n    px: 0,\n    py: 0,\n\n    // Values for use with panEdgeFraction, which limit how far outside the\n    // graph's data boundaries it can be panned.\n    boundedDates: null, // [minDate, maxDate]\n    boundedValues: null, // [[minValue, maxValue] ...]\n\n    // We cover iframes during mouse interactions. See comments in\n    // dygraph-utils.js for more info on why this is a good idea.\n    tarp: new IFrameTarp(),\n\n    // contextB is the same thing as this context object but renamed.\n    initializeMouseDown: function(event, g, contextB) {\n      // prevents mouse drags from selecting page text.\n      if (event.preventDefault) {\n        event.preventDefault();  // Firefox, Chrome, etc.\n      } else {\n        event.returnValue = false;  // IE\n        event.cancelBubble = true;\n      }\n\n      var canvasPos = utils.findPos(g.canvas_);\n      contextB.px = canvasPos.x;\n      contextB.py = canvasPos.y;\n      contextB.dragStartX = utils.dragGetX_(event, contextB);\n      contextB.dragStartY = utils.dragGetY_(event, contextB);\n      contextB.cancelNextDblclick = false;\n      contextB.tarp.cover();\n    },\n    destroy: function() {\n      var context = this;\n      if (context.isZooming || context.isPanning) {\n        context.isZooming = false;\n        context.dragStartX = null;\n        context.dragStartY = null;\n      }\n\n      if (context.isPanning) {\n        context.isPanning = false;\n        context.draggingDate = null;\n        context.dateRange = null;\n        for (var i = 0; i < self.axes_.length; i++) {\n          delete self.axes_[i].draggingValue;\n          delete self.axes_[i].dragValueRange;\n        }\n      }\n\n      context.tarp.uncover();\n    }\n  };\n\n  var interactionModel = this.getOption(\"interactionModel\");\n\n  // Self is the graph.\n  var self = this;\n\n  // Function that binds the graph and context to the handler.\n  var bindHandler = function(handler) {\n    return function(event) {\n      handler(event, self, context);\n    };\n  };\n\n  for (var eventName in interactionModel) {\n    if (!interactionModel.hasOwnProperty(eventName)) continue;\n    this.addAndTrackEvent(this.mouseEventElement_, eventName,\n        bindHandler(interactionModel[eventName]));\n  }\n\n  // If the user releases the mouse button during a drag, but not over the\n  // canvas, then it doesn't count as a zooming action.\n  if (!interactionModel.willDestroyContextMyself) {\n    var mouseUpHandler = function(event) {\n      context.destroy();\n    };\n\n    this.addAndTrackEvent(document, 'mouseup', mouseUpHandler);\n  }\n};\n\n/**\n * Draw a gray zoom rectangle over the desired area of the canvas. Also clears\n * up any previous zoom rectangles that were drawn. This could be optimized to\n * avoid extra redrawing, but it's tricky to avoid interactions with the status\n * dots.\n *\n * @param {number} direction the direction of the zoom rectangle. Acceptable\n *     values are utils.HORIZONTAL and utils.VERTICAL.\n * @param {number} startX The X position where the drag started, in canvas\n *     coordinates.\n * @param {number} endX The current X position of the drag, in canvas coords.\n * @param {number} startY The Y position where the drag started, in canvas\n *     coordinates.\n * @param {number} endY The current Y position of the drag, in canvas coords.\n * @param {number} prevDirection the value of direction on the previous call to\n *     this function. Used to avoid excess redrawing\n * @param {number} prevEndX The value of endX on the previous call to this\n *     function. Used to avoid excess redrawing\n * @param {number} prevEndY The value of endY on the previous call to this\n *     function. Used to avoid excess redrawing\n * @private\n */\nDygraph.prototype.drawZoomRect_ = function(direction, startX, endX, startY,\n                                           endY, prevDirection, prevEndX,\n                                           prevEndY) {\n  var ctx = this.canvas_ctx_;\n\n  // Clean up from the previous rect if necessary\n  if (prevDirection == utils.HORIZONTAL) {\n    ctx.clearRect(Math.min(startX, prevEndX), this.layout_.getPlotArea().y,\n                  Math.abs(startX - prevEndX), this.layout_.getPlotArea().h);\n  } else if (prevDirection == utils.VERTICAL) {\n    ctx.clearRect(this.layout_.getPlotArea().x, Math.min(startY, prevEndY),\n                  this.layout_.getPlotArea().w, Math.abs(startY - prevEndY));\n  }\n\n  // Draw a light-grey rectangle to show the new viewing area\n  if (direction == utils.HORIZONTAL) {\n    if (endX && startX) {\n      ctx.fillStyle = \"rgba(128,128,128,0.33)\";\n      ctx.fillRect(Math.min(startX, endX), this.layout_.getPlotArea().y,\n                   Math.abs(endX - startX), this.layout_.getPlotArea().h);\n    }\n  } else if (direction == utils.VERTICAL) {\n    if (endY && startY) {\n      ctx.fillStyle = \"rgba(128,128,128,0.33)\";\n      ctx.fillRect(this.layout_.getPlotArea().x, Math.min(startY, endY),\n                   this.layout_.getPlotArea().w, Math.abs(endY - startY));\n    }\n  }\n};\n\n/**\n * Clear the zoom rectangle (and perform no zoom).\n * @private\n */\nDygraph.prototype.clearZoomRect_ = function() {\n  this.currentZoomRectArgs_ = null;\n  this.canvas_ctx_.clearRect(0, 0, this.width_, this.height_);\n};\n\n/**\n * Zoom to something containing [lowX, highX]. These are pixel coordinates in\n * the canvas. The exact zoom window may be slightly larger if there are no data\n * points near lowX or highX. Don't confuse this function with doZoomXDates,\n * which accepts dates that match the raw data. This function redraws the graph.\n *\n * @param {number} lowX The leftmost pixel value that should be visible.\n * @param {number} highX The rightmost pixel value that should be visible.\n * @private\n */\nDygraph.prototype.doZoomX_ = function(lowX, highX) {\n  this.currentZoomRectArgs_ = null;\n  // Find the earliest and latest dates contained in this canvasx range.\n  // Convert the call to date ranges of the raw data.\n  var minDate = this.toDataXCoord(lowX);\n  var maxDate = this.toDataXCoord(highX);\n  this.doZoomXDates_(minDate, maxDate);\n};\n\n/**\n * Zoom to something containing [minDate, maxDate] values. Don't confuse this\n * method with doZoomX which accepts pixel coordinates. This function redraws\n * the graph.\n *\n * @param {number} minDate The minimum date that should be visible.\n * @param {number} maxDate The maximum date that should be visible.\n * @private\n */\nDygraph.prototype.doZoomXDates_ = function(minDate, maxDate) {\n  // TODO(danvk): when xAxisRange is null (i.e. \"fit to data\", the animation\n  // can produce strange effects. Rather than the x-axis transitioning slowly\n  // between values, it can jerk around.)\n  var old_window = this.xAxisRange();\n  var new_window = [minDate, maxDate];\n  const zoomCallback = this.getFunctionOption('zoomCallback');\n  const that = this;\n  this.doAnimatedZoom(old_window, new_window, null, null, function animatedZoomCallback() {\n    if (zoomCallback) {\n      zoomCallback.call(that, minDate, maxDate, that.yAxisRanges());\n    }\n  });\n};\n\n/**\n * Zoom to something containing [lowY, highY]. These are pixel coordinates in\n * the canvas. This function redraws the graph.\n *\n * @param {number} lowY The topmost pixel value that should be visible.\n * @param {number} highY The lowest pixel value that should be visible.\n * @private\n */\nDygraph.prototype.doZoomY_ = function(lowY, highY) {\n  this.currentZoomRectArgs_ = null;\n  // Find the highest and lowest values in pixel range for each axis.\n  // Note that lowY (in pixels) corresponds to the max Value (in data coords).\n  // This is because pixels increase as you go down on the screen, whereas data\n  // coordinates increase as you go up the screen.\n  var oldValueRanges = this.yAxisRanges();\n  var newValueRanges = [];\n  for (var i = 0; i < this.axes_.length; i++) {\n    var hi = this.toDataYCoord(lowY, i);\n    var low = this.toDataYCoord(highY, i);\n    newValueRanges.push([low, hi]);\n  }\n\n  const zoomCallback = this.getFunctionOption('zoomCallback');\n  const that = this;\n  this.doAnimatedZoom(null, null, oldValueRanges, newValueRanges, function animatedZoomCallback() {\n    if (zoomCallback) {\n      const [minX, maxX] = that.xAxisRange();\n      zoomCallback.call(that, minX, maxX, that.yAxisRanges());\n    }\n  });\n};\n\n/**\n * Transition function to use in animations. Returns values between 0.0\n * (totally old values) and 1.0 (totally new values) for each frame.\n * @private\n */\nDygraph.zoomAnimationFunction = function(frame, numFrames) {\n  var k = 1.5;\n  return (1.0 - Math.pow(k, -frame)) / (1.0 - Math.pow(k, -numFrames));\n};\n\n/**\n * Reset the zoom to the original view coordinates. This is the same as\n * double-clicking on the graph.\n */\nDygraph.prototype.resetZoom = function() {\n  const dirtyX = this.isZoomed('x');\n  const dirtyY = this.isZoomed('y');\n  const dirty = dirtyX || dirtyY;\n\n  // Clear any selection, since it's likely to be drawn in the wrong place.\n  this.clearSelection();\n\n  if (!dirty) return;\n\n  // Calculate extremes to avoid lack of padding on reset.\n  const [minDate, maxDate] = this.xAxisExtremes();\n\n  const animatedZooms = this.getBooleanOption('animatedZooms');\n  const zoomCallback = this.getFunctionOption('zoomCallback');\n\n  // TODO(danvk): merge this block w/ the code below.\n  // TODO(danvk): factor out a generic, public zoomTo method.\n  if (!animatedZooms) {\n    this.dateWindow_ = null;\n    this.axes_.forEach(axis => {\n      if (axis.valueRange) delete axis.valueRange;\n    });\n\n    this.drawGraph_();\n    if (zoomCallback) {\n      zoomCallback.call(this, minDate, maxDate, this.yAxisRanges());\n    }\n    return;\n  }\n\n  var oldWindow=null, newWindow=null, oldValueRanges=null, newValueRanges=null;\n  if (dirtyX) {\n    oldWindow = this.xAxisRange();\n    newWindow = [minDate, maxDate];\n  }\n\n  if (dirtyY) {\n    oldValueRanges = this.yAxisRanges();\n    newValueRanges = this.yAxisExtremes();\n  }\n\n  const that = this;\n  this.doAnimatedZoom(oldWindow, newWindow, oldValueRanges, newValueRanges,\n      function animatedZoomCallback() {\n        that.dateWindow_ = null;\n        that.axes_.forEach(axis => {\n          if (axis.valueRange) delete axis.valueRange;\n        });\n        if (zoomCallback) {\n          zoomCallback.call(that, minDate, maxDate, that.yAxisRanges());\n        }\n      });\n};\n\n/**\n * Combined animation logic for all zoom functions.\n * either the x parameters or y parameters may be null.\n * @private\n */\nDygraph.prototype.doAnimatedZoom = function(oldXRange, newXRange, oldYRanges, newYRanges, callback) {\n  var steps = this.getBooleanOption(\"animatedZooms\") ?\n      Dygraph.ANIMATION_STEPS : 1;\n\n  var windows = [];\n  var valueRanges = [];\n  var step, frac;\n\n  if (oldXRange !== null && newXRange !== null) {\n    for (step = 1; step <= steps; step++) {\n      frac = Dygraph.zoomAnimationFunction(step, steps);\n      windows[step-1] = [oldXRange[0]*(1-frac) + frac*newXRange[0],\n                         oldXRange[1]*(1-frac) + frac*newXRange[1]];\n    }\n  }\n\n  if (oldYRanges !== null && newYRanges !== null) {\n    for (step = 1; step <= steps; step++) {\n      frac = Dygraph.zoomAnimationFunction(step, steps);\n      var thisRange = [];\n      for (var j = 0; j < this.axes_.length; j++) {\n        thisRange.push([oldYRanges[j][0]*(1-frac) + frac*newYRanges[j][0],\n                        oldYRanges[j][1]*(1-frac) + frac*newYRanges[j][1]]);\n      }\n      valueRanges[step-1] = thisRange;\n    }\n  }\n\n  const that = this;\n  utils.repeatAndCleanup(function (step) {\n    if (valueRanges.length) {\n      for (var i = 0; i < that.axes_.length; i++) {\n        var w = valueRanges[step][i];\n        that.axes_[i].valueRange = [w[0], w[1]];\n      }\n    }\n    if (windows.length) {\n      that.dateWindow_ = windows[step];\n    }\n    that.drawGraph_();\n  }, steps, Dygraph.ANIMATION_DURATION / steps, callback);\n};\n\n/**\n * Get the current graph's area object.\n *\n * Returns: {x, y, w, h}\n */\nDygraph.prototype.getArea = function() {\n  return this.plotter_.area;\n};\n\n/**\n * Convert a mouse event to DOM coordinates relative to the graph origin.\n *\n * Returns a two-element array: [X, Y].\n */\nDygraph.prototype.eventToDomCoords = function(event) {\n  if (event.offsetX && event.offsetY) {\n    return [ event.offsetX, event.offsetY ];\n  } else {\n    var eventElementPos = utils.findPos(this.mouseEventElement_);\n    var canvasx = utils.pageX(event) - eventElementPos.x;\n    var canvasy = utils.pageY(event) - eventElementPos.y;\n    return [canvasx, canvasy];\n  }\n};\n\n/**\n * Given a canvas X coordinate, find the closest row.\n * @param {number} domX graph-relative DOM X coordinate\n * Returns {number} row number.\n * @private\n */\nDygraph.prototype.findClosestRow = function(domX) {\n  var minDistX = Infinity;\n  var closestRow = -1;\n  var sets = this.layout_.points;\n  for (var i = 0; i < sets.length; i++) {\n    var points = sets[i];\n    var len = points.length;\n    for (var j = 0; j < len; j++) {\n      var point = points[j];\n      if (!utils.isValidPoint(point, true)) continue;\n      var dist = Math.abs(point.canvasx - domX);\n      if (dist < minDistX) {\n        minDistX = dist;\n        closestRow = point.idx;\n      }\n    }\n  }\n\n  return closestRow;\n};\n\n/**\n * Given canvas X,Y coordinates, find the closest point.\n *\n * This finds the individual data point across all visible series\n * that's closest to the supplied DOM coordinates using the standard\n * Euclidean X,Y distance.\n *\n * @param {number} domX graph-relative DOM X coordinate\n * @param {number} domY graph-relative DOM Y coordinate\n * Returns: {row, seriesName, point}\n * @private\n */\nDygraph.prototype.findClosestPoint = function(domX, domY) {\n  var minDist = Infinity;\n  var dist, dx, dy, point, closestPoint, closestSeries, closestRow;\n  for ( var setIdx = this.layout_.points.length - 1 ; setIdx >= 0 ; --setIdx ) {\n    var points = this.layout_.points[setIdx];\n    for (var i = 0; i < points.length; ++i) {\n      point = points[i];\n      if (!utils.isValidPoint(point)) continue;\n      dx = point.canvasx - domX;\n      dy = point.canvasy - domY;\n      dist = dx * dx + dy * dy;\n      if (dist < minDist) {\n        minDist = dist;\n        closestPoint = point;\n        closestSeries = setIdx;\n        closestRow = point.idx;\n      }\n    }\n  }\n  var name = this.layout_.setNames[closestSeries];\n  return {\n    row: closestRow,\n    seriesName: name,\n    point: closestPoint\n  };\n};\n\n/**\n * Given canvas X,Y coordinates, find the touched area in a stacked graph.\n *\n * This first finds the X data point closest to the supplied DOM X coordinate,\n * then finds the series which puts the Y coordinate on top of its filled area,\n * using linear interpolation between adjacent point pairs.\n *\n * @param {number} domX graph-relative DOM X coordinate\n * @param {number} domY graph-relative DOM Y coordinate\n * Returns: {row, seriesName, point}\n * @private\n */\nDygraph.prototype.findStackedPoint = function(domX, domY) {\n  var row = this.findClosestRow(domX);\n  var closestPoint, closestSeries;\n  for (var setIdx = 0; setIdx < this.layout_.points.length; ++setIdx) {\n    var boundary = this.getLeftBoundary_(setIdx);\n    var rowIdx = row - boundary;\n    var points = this.layout_.points[setIdx];\n    if (rowIdx >= points.length) continue;\n    var p1 = points[rowIdx];\n    if (!utils.isValidPoint(p1)) continue;\n    var py = p1.canvasy;\n    if (domX > p1.canvasx && rowIdx + 1 < points.length) {\n      // interpolate series Y value using next point\n      var p2 = points[rowIdx + 1];\n      if (utils.isValidPoint(p2)) {\n        var dx = p2.canvasx - p1.canvasx;\n        if (dx > 0) {\n          var r = (domX - p1.canvasx) / dx;\n          py += r * (p2.canvasy - p1.canvasy);\n        }\n      }\n    } else if (domX < p1.canvasx && rowIdx > 0) {\n      // interpolate series Y value using previous point\n      var p0 = points[rowIdx - 1];\n      if (utils.isValidPoint(p0)) {\n        var dx = p1.canvasx - p0.canvasx;\n        if (dx > 0) {\n          var r = (p1.canvasx - domX) / dx;\n          py += r * (p0.canvasy - p1.canvasy);\n        }\n      }\n    }\n    // Stop if the point (domX, py) is above this series' upper edge\n    if (setIdx === 0 || py < domY) {\n      closestPoint = p1;\n      closestSeries = setIdx;\n    }\n  }\n  var name = this.layout_.setNames[closestSeries];\n  return {\n    row: row,\n    seriesName: name,\n    point: closestPoint\n  };\n};\n\n/**\n * When the mouse moves in the canvas, display information about a nearby data\n * point and draw dots over those points in the data series. This function\n * takes care of cleanup of previously-drawn dots.\n * @param {Object} event The mousemove event from the browser.\n * @private\n */\nDygraph.prototype.mouseMove_ = function(event) {\n  // This prevents JS errors when mousing over the canvas before data loads.\n  var points = this.layout_.points;\n  if (points === undefined || points === null) return;\n\n  var canvasCoords = this.eventToDomCoords(event);\n  var canvasx = canvasCoords[0];\n  var canvasy = canvasCoords[1];\n\n  var highlightSeriesOpts = this.getOption(\"highlightSeriesOpts\");\n  var selectionChanged = false;\n  if (highlightSeriesOpts && !this.isSeriesLocked()) {\n    var closest;\n    if (this.getBooleanOption(\"stackedGraph\")) {\n      closest = this.findStackedPoint(canvasx, canvasy);\n    } else {\n      closest = this.findClosestPoint(canvasx, canvasy);\n    }\n    selectionChanged = this.setSelection(closest.row, closest.seriesName);\n  } else {\n    var idx = this.findClosestRow(canvasx);\n    selectionChanged = this.setSelection(idx);\n  }\n\n  var callback = this.getFunctionOption(\"highlightCallback\");\n  if (callback && selectionChanged) {\n    callback.call(this, event,\n        this.lastx_,\n        this.selPoints_,\n        this.lastRow_,\n        this.highlightSet_);\n  }\n};\n\n/**\n * Fetch left offset from the specified set index or if not passed, the\n * first defined boundaryIds record (see bug #236).\n * @private\n */\nDygraph.prototype.getLeftBoundary_ = function(setIdx) {\n  if (this.boundaryIds_[setIdx]) {\n      return this.boundaryIds_[setIdx][0];\n  } else {\n    for (var i = 0; i < this.boundaryIds_.length; i++) {\n      if (this.boundaryIds_[i] !== undefined) {\n        return this.boundaryIds_[i][0];\n      }\n    }\n    return 0;\n  }\n};\n\nDygraph.prototype.animateSelection_ = function(direction) {\n  var totalSteps = 10;\n  var millis = 30;\n  if (this.fadeLevel === undefined) this.fadeLevel = 0;\n  if (this.animateId === undefined) this.animateId = 0;\n  var start = this.fadeLevel;\n  var steps = direction < 0 ? start : totalSteps - start;\n  if (steps <= 0) {\n    if (this.fadeLevel) {\n      this.updateSelection_(1.0);\n    }\n    return;\n  }\n\n  var thisId = ++this.animateId;\n  var that = this;\n  var cleanupIfClearing = function() {\n    // if we haven't reached fadeLevel 0 in the max frame time,\n    // ensure that the clear happens and just go to 0\n    if (that.fadeLevel !== 0 && direction < 0) {\n      that.fadeLevel = 0;\n      that.clearSelection();\n    }\n  };\n  utils.repeatAndCleanup(\n    function(n) {\n      // ignore simultaneous animations\n      if (that.animateId != thisId) return;\n\n      that.fadeLevel += direction;\n      if (that.fadeLevel === 0) {\n        that.clearSelection();\n      } else {\n        that.updateSelection_(that.fadeLevel / totalSteps);\n      }\n    },\n    steps, millis, cleanupIfClearing);\n};\n\n/**\n * Draw dots over the selectied points in the data series. This function\n * takes care of cleanup of previously-drawn dots.\n * @private\n */\nDygraph.prototype.updateSelection_ = function(opt_animFraction) {\n  /*var defaultPrevented = */\n  this.cascadeEvents_('select', {\n    selectedRow: this.lastRow_ === -1 ? undefined : this.lastRow_,\n    selectedX: this.lastx_ === null ? undefined : this.lastx_,\n    selectedPoints: this.selPoints_\n  });\n  // TODO(danvk): use defaultPrevented here?\n\n  // Clear the previously drawn vertical, if there is one\n  var i;\n  var ctx = this.canvas_ctx_;\n  if (this.getOption('highlightSeriesOpts')) {\n    ctx.clearRect(0, 0, this.width_, this.height_);\n    var alpha = 1.0 - this.getNumericOption('highlightSeriesBackgroundAlpha');\n    var backgroundColor = utils.toRGB_(this.getOption('highlightSeriesBackgroundColor'));\n\n    if (alpha) {\n      // Activating background fade includes an animation effect for a gradual\n      // fade. TODO(klausw): make this independently configurable if it causes\n      // issues? Use a shared preference to control animations?\n      var animateBackgroundFade = this.getBooleanOption('animateBackgroundFade');\n      if (animateBackgroundFade) {\n        if (opt_animFraction === undefined) {\n          // start a new animation\n          this.animateSelection_(1);\n          return;\n        }\n        alpha *= opt_animFraction;\n      }\n      ctx.fillStyle = 'rgba(' + backgroundColor.r + ',' + backgroundColor.g + ',' + backgroundColor.b + ',' + alpha + ')';\n      ctx.fillRect(0, 0, this.width_, this.height_);\n    }\n\n    // Redraw only the highlighted series in the interactive canvas (not the\n    // static plot canvas, which is where series are usually drawn).\n    this.plotter_._renderLineChart(this.highlightSet_, ctx);\n  } else if (this.previousVerticalX_ >= 0) {\n    // Determine the maximum highlight circle size.\n    var maxCircleSize = 0;\n    var labels = this.attr_('labels');\n    for (i = 1; i < labels.length; i++) {\n      var r = this.getNumericOption('highlightCircleSize', labels[i]);\n      if (r > maxCircleSize) maxCircleSize = r;\n    }\n    var px = this.previousVerticalX_;\n    ctx.clearRect(px - maxCircleSize - 1, 0,\n                  2 * maxCircleSize + 2, this.height_);\n  }\n\n  if (this.selPoints_.length > 0) {\n    // Draw colored circles over the center of each selected point\n    var canvasx = this.selPoints_[0].canvasx;\n    ctx.save();\n    for (i = 0; i < this.selPoints_.length; i++) {\n      var pt = this.selPoints_[i];\n      if (isNaN(pt.canvasy)) continue;\n\n      var circleSize = this.getNumericOption('highlightCircleSize', pt.name);\n      var callback = this.getFunctionOption(\"drawHighlightPointCallback\", pt.name);\n      var color = this.plotter_.colors[pt.name];\n      if (!callback) {\n        callback = utils.Circles.DEFAULT;\n      }\n      ctx.lineWidth = this.getNumericOption('strokeWidth', pt.name);\n      ctx.strokeStyle = color;\n      ctx.fillStyle = color;\n      callback.call(this, this, pt.name, ctx, canvasx, pt.canvasy,\n          color, circleSize, pt.idx);\n    }\n    ctx.restore();\n\n    this.previousVerticalX_ = canvasx;\n  }\n};\n\n/**\n * Manually set the selected points and display information about them in the\n * legend. The selection can be cleared using clearSelection() and queried\n * using getSelection().\n *\n * To set a selected series but not a selected point, call setSelection with\n * row=false and the selected series name.\n *\n * @param {number} row Row number that should be highlighted (i.e. appear with\n * hover dots on the chart).\n * @param {seriesName} optional series name to highlight that series with the\n * the highlightSeriesOpts setting.\n * @param {locked} optional If true, keep seriesName selected when mousing\n * over the graph, disabling closest-series highlighting. Call clearSelection()\n * to unlock it.\n * @param {trigger_highlight_callback} optional If true, trigger any\n * user-defined highlightCallback if highlightCallback has been set.\n */\nDygraph.prototype.setSelection = function setSelection(row, opt_seriesName,\n                                                       opt_locked,\n                                                       opt_trigger_highlight_callback) {\n  // Extract the points we've selected\n  this.selPoints_ = [];\n\n  var changed = false;\n  if (row !== false && row >= 0) {\n    if (row != this.lastRow_) changed = true;\n    this.lastRow_ = row;\n    for (var setIdx = 0; setIdx < this.layout_.points.length; ++setIdx) {\n      var points = this.layout_.points[setIdx];\n      // Check if the point at the appropriate index is the point we're looking\n      // for.  If it is, just use it, otherwise search the array for a point\n      // in the proper place.\n      var setRow = row - this.getLeftBoundary_(setIdx);\n      if (setRow >= 0 && setRow < points.length && points[setRow].idx == row) {\n        var point = points[setRow];\n        if (point.yval !== null) this.selPoints_.push(point);\n      } else {\n        for (var pointIdx = 0; pointIdx < points.length; ++pointIdx) {\n          var point = points[pointIdx];\n          if (point.idx == row) {\n            if (point.yval !== null) {\n              this.selPoints_.push(point);\n            }\n            break;\n          }\n        }\n      }\n    }\n  } else {\n    if (this.lastRow_ >= 0) changed = true;\n    this.lastRow_ = -1;\n  }\n\n  if (this.selPoints_.length) {\n    this.lastx_ = this.selPoints_[0].xval;\n  } else {\n    this.lastx_ = null;\n  }\n\n  if (opt_seriesName !== undefined) {\n    if (this.highlightSet_ !== opt_seriesName) changed = true;\n    this.highlightSet_ = opt_seriesName;\n  }\n\n  if (opt_locked !== undefined) {\n    this.lockedSet_ = opt_locked;\n  }\n\n  if (changed) {\n    this.updateSelection_(undefined);\n\n    if (opt_trigger_highlight_callback) {\n      var callback = this.getFunctionOption(\"highlightCallback\");\n      if (callback) {\n        var event = {};\n        callback.call(this, event,\n          this.lastx_,\n          this.selPoints_,\n          this.lastRow_,\n          this.highlightSet_);\n      }\n    }\n  }\n  return changed;\n};\n\n/**\n * The mouse has left the canvas. Clear out whatever artifacts remain\n * @param {Object} event the mouseout event from the browser.\n * @private\n */\nDygraph.prototype.mouseOut_ = function(event) {\n  if (this.getFunctionOption(\"unhighlightCallback\")) {\n    this.getFunctionOption(\"unhighlightCallback\").call(this, event);\n  }\n\n  if (this.getBooleanOption(\"hideOverlayOnMouseOut\") && !this.lockedSet_) {\n    this.clearSelection();\n  }\n};\n\n/**\n * Clears the current selection (i.e. points that were highlighted by moving\n * the mouse over the chart).\n */\nDygraph.prototype.clearSelection = function() {\n  this.cascadeEvents_('deselect', {});\n\n  this.lockedSet_ = false;\n  // Get rid of the overlay data\n  if (this.fadeLevel) {\n    this.animateSelection_(-1);\n    return;\n  }\n  this.canvas_ctx_.clearRect(0, 0, this.width_, this.height_);\n  this.fadeLevel = 0;\n  this.selPoints_ = [];\n  this.lastx_ = null;\n  this.lastRow_ = -1;\n  this.highlightSet_ = null;\n};\n\n/**\n * Returns the number of the currently selected row. To get data for this row,\n * you can use the getValue method.\n * @return {number} row number, or -1 if nothing is selected\n */\nDygraph.prototype.getSelection = function() {\n  if (!this.selPoints_ || this.selPoints_.length < 1) {\n    return -1;\n  }\n\n  for (var setIdx = 0; setIdx < this.layout_.points.length; setIdx++) {\n    var points = this.layout_.points[setIdx];\n    for (var row = 0; row < points.length; row++) {\n      if (points[row].x == this.selPoints_[0].x) {\n        return points[row].idx;\n      }\n    }\n  }\n  return -1;\n};\n\n/**\n * Returns the name of the currently-highlighted series.\n * Only available when the highlightSeriesOpts option is in use.\n */\nDygraph.prototype.getHighlightSeries = function() {\n  return this.highlightSet_;\n};\n\n/**\n * Returns true if the currently-highlighted series was locked\n * via setSelection(..., seriesName, true).\n */\nDygraph.prototype.isSeriesLocked = function() {\n  return this.lockedSet_;\n};\n\n/**\n * Fires when there's data available to be graphed.\n * @param {string} data Raw CSV data to be plotted\n * @private\n */\nDygraph.prototype.loadedEvent_ = function(data) {\n  this.rawData_ = this.parseCSV_(data);\n  this.cascadeDataDidUpdateEvent_();\n  this.predraw_();\n};\n\n/**\n * Add ticks on the x-axis representing years, months, quarters, weeks, or days\n * @private\n */\nDygraph.prototype.addXTicks_ = function() {\n  // Determine the correct ticks scale on the x-axis: quarterly, monthly, ...\n  var range;\n  if (this.dateWindow_) {\n    range = [this.dateWindow_[0], this.dateWindow_[1]];\n  } else {\n    range = this.xAxisExtremes();\n  }\n\n  var xAxisOptionsView = this.optionsViewForAxis_('x');\n  var xTicks = xAxisOptionsView('ticker')(\n      range[0],\n      range[1],\n      this.plotter_.area.w,  // TODO(danvk): should be area.width\n      xAxisOptionsView,\n      this);\n  // var msg = 'ticker(' + range[0] + ', ' + range[1] + ', ' + this.width_ + ', ' + this.attr_('pixelsPerXLabel') + ') -> ' + JSON.stringify(xTicks);\n  // console.log(msg);\n  this.layout_.setXTicks(xTicks);\n};\n\n/**\n * Returns the correct handler class for the currently set options.\n * @private\n */\nDygraph.prototype.getHandlerClass_ = function() {\n  var handlerClass;\n  if (this.attr_('dataHandler')) {\n    handlerClass =  this.attr_('dataHandler');\n  } else if (this.fractions_) {\n    if (this.getBooleanOption('errorBars')) {\n      handlerClass = FractionsBarsHandler;\n    } else {\n      handlerClass = DefaultFractionHandler;\n    }\n  } else if (this.getBooleanOption('customBars')) {\n    handlerClass = CustomBarsHandler;\n  } else if (this.getBooleanOption('errorBars')) {\n    handlerClass = ErrorBarsHandler;\n  } else {\n    handlerClass = DefaultHandler;\n  }\n  return handlerClass;\n};\n\n/**\n * @private\n * This function is called once when the chart's data is changed or the options\n * dictionary is updated. It is _not_ called when the user pans or zooms. The\n * idea is that values derived from the chart's data can be computed here,\n * rather than every time the chart is drawn. This includes things like the\n * number of axes, rolling averages, etc.\n */\nDygraph.prototype.predraw_ = function() {\n  var start = new Date();\n\n  // Create the correct dataHandler\n  this.dataHandler_ = new (this.getHandlerClass_())();\n\n  this.layout_.computePlotArea();\n\n  // TODO(danvk): move more computations out of drawGraph_ and into here.\n  this.computeYAxes_();\n\n  if (!this.is_initial_draw_) {\n    this.canvas_ctx_.restore();\n    this.hidden_ctx_.restore();\n  }\n\n  this.canvas_ctx_.save();\n  this.hidden_ctx_.save();\n\n  // Create a new plotter.\n  this.plotter_ = new DygraphCanvasRenderer(this,\n                                            this.hidden_,\n                                            this.hidden_ctx_,\n                                            this.layout_);\n\n  // The roller sits in the bottom left corner of the chart. We don't know where\n  // this will be until the options are available, so it's positioned here.\n  this.createRollInterface_();\n\n  this.cascadeEvents_('predraw');\n\n  // Convert the raw data (a 2D array) into the internal format and compute\n  // rolling averages.\n  this.rolledSeries_ = [null];  // x-axis is the first series and it's special\n  for (var i = 1; i < this.numColumns(); i++) {\n    // var logScale = this.attr_('logscale', i); // TODO(klausw): this looks wrong // konigsberg thinks so too.\n    var series = this.dataHandler_.extractSeries(this.rawData_, i, this.attributes_);\n    if (this.rollPeriod_ > 1) {\n      series = this.dataHandler_.rollingAverage(series, this.rollPeriod_, this.attributes_, i);\n    }\n\n    this.rolledSeries_.push(series);\n  }\n\n  // If the data or options have changed, then we'd better redraw.\n  this.drawGraph_();\n\n  // This is used to determine whether to do various animations.\n  var end = new Date();\n  this.drawingTimeMs_ = (end - start);\n};\n\n/**\n * Point structure.\n *\n * xval_* and yval_* are the original unscaled data values,\n * while x_* and y_* are scaled to the range (0.0-1.0) for plotting.\n * yval_stacked is the cumulative Y value used for stacking graphs,\n * and bottom/top/minus/plus are used for high/low band graphs.\n *\n * @typedef {{\n *     idx: number,\n *     name: string,\n *     x: ?number,\n *     xval: ?number,\n *     y_bottom: ?number,\n *     y: ?number,\n *     y_stacked: ?number,\n *     y_top: ?number,\n *     yval_minus: ?number,\n *     yval: ?number,\n *     yval_plus: ?number,\n *     yval_stacked\n * }}\n */\nDygraph.PointType = undefined;\n\n/**\n * Calculates point stacking for stackedGraph=true.\n *\n * For stacking purposes, interpolate or extend neighboring data across\n * NaN values based on stackedGraphNaNFill settings. This is for display\n * only, the underlying data value as shown in the legend remains NaN.\n *\n * @param {Array.<Dygraph.PointType>} points Point array for a single series.\n *     Updates each Point's yval_stacked property.\n * @param {Array.<number>} cumulativeYval Accumulated top-of-graph stacked Y\n *     values for the series seen so far. Index is the row number. Updated\n *     based on the current series's values.\n * @param {Array.<number>} seriesExtremes Min and max values, updated\n *     to reflect the stacked values.\n * @param {string} fillMethod Interpolation method, one of 'all', 'inside', or\n *     'none'.\n * @private\n */\nDygraph.stackPoints_ = function(\n    points, cumulativeYval, seriesExtremes, fillMethod) {\n  var lastXval = null;\n  var prevPoint = null;\n  var nextPoint = null;\n  var nextPointIdx = -1;\n\n  // Find the next stackable point starting from the given index.\n  var updateNextPoint = function(idx) {\n    // If we've previously found a non-NaN point and haven't gone past it yet,\n    // just use that.\n    if (nextPointIdx >= idx) return;\n\n    // We haven't found a non-NaN point yet or have moved past it,\n    // look towards the right to find a non-NaN point.\n    for (var j = idx; j < points.length; ++j) {\n      // Clear out a previously-found point (if any) since it's no longer\n      // valid, we shouldn't use it for interpolation anymore.\n      nextPoint = null;\n      if (!isNaN(points[j].yval) && points[j].yval !== null) {\n        nextPointIdx = j;\n        nextPoint = points[j];\n        break;\n      }\n    }\n  };\n\n  for (var i = 0; i < points.length; ++i) {\n    var point = points[i];\n    var xval = point.xval;\n    if (cumulativeYval[xval] === undefined) {\n      cumulativeYval[xval] = 0;\n    }\n\n    var actualYval = point.yval;\n    if (isNaN(actualYval) || actualYval === null) {\n      if(fillMethod == 'none') {\n        actualYval = 0;\n      } else {\n        // Interpolate/extend for stacking purposes if possible.\n        updateNextPoint(i);\n        if (prevPoint && nextPoint && fillMethod != 'none') {\n          // Use linear interpolation between prevPoint and nextPoint.\n          actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\n              ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\n        } else if (prevPoint && fillMethod == 'all') {\n          actualYval = prevPoint.yval;\n        } else if (nextPoint && fillMethod == 'all') {\n          actualYval = nextPoint.yval;\n        } else {\n          actualYval = 0;\n        }\n      }\n    } else {\n      prevPoint = point;\n    }\n\n    var stackedYval = cumulativeYval[xval];\n    if (lastXval != xval) {\n      // If an x-value is repeated, we ignore the duplicates.\n      stackedYval += actualYval;\n      cumulativeYval[xval] = stackedYval;\n    }\n    lastXval = xval;\n\n    point.yval_stacked = stackedYval;\n\n    if (stackedYval > seriesExtremes[1]) {\n      seriesExtremes[1] = stackedYval;\n    }\n    if (stackedYval < seriesExtremes[0]) {\n      seriesExtremes[0] = stackedYval;\n    }\n  }\n};\n\n/**\n * Loop over all fields and create datasets, calculating extreme y-values for\n * each series and extreme x-indices as we go.\n *\n * dateWindow is passed in as an explicit parameter so that we can compute\n * extreme values \"speculatively\", i.e. without actually setting state on the\n * dygraph.\n *\n * @param {Array.<Array.<Array.<(number|Array<number>)>>} rolledSeries, where\n *     rolledSeries[seriesIndex][row] = raw point, where\n *     seriesIndex is the column number starting with 1, and\n *     rawPoint is [x,y] or [x, [y, err]] or [x, [y, yminus, yplus]].\n * @param {?Array.<number>} dateWindow [xmin, xmax] pair, or null.\n * @return {{\n *     points: Array.<Array.<Dygraph.PointType>>,\n *     seriesExtremes: Array.<Array.<number>>,\n *     boundaryIds: Array.<number>}}\n * @private\n */\nDygraph.prototype.gatherDatasets_ = function(rolledSeries, dateWindow) {\n  var boundaryIds = [];\n  var points = [];\n  var cumulativeYval = [];  // For stacked series.\n  var extremes = {};  // series name -> [low, high]\n  var seriesIdx, sampleIdx;\n  var firstIdx, lastIdx;\n  var axisIdx;\n\n  // Loop over the fields (series).  Go from the last to the first,\n  // because if they're stacked that's how we accumulate the values.\n  var num_series = rolledSeries.length - 1;\n  var series;\n  for (seriesIdx = num_series; seriesIdx >= 1; seriesIdx--) {\n    if (!this.visibility()[seriesIdx - 1]) continue;\n\n    // Prune down to the desired range, if necessary (for zooming)\n    // Because there can be lines going to points outside of the visible area,\n    // we actually prune to visible points, plus one on either side.\n    if (dateWindow) {\n      series = rolledSeries[seriesIdx];\n      var low = dateWindow[0];\n      var high = dateWindow[1];\n\n      // TODO(danvk): do binary search instead of linear search.\n      // TODO(danvk): pass firstIdx and lastIdx directly to the renderer.\n      firstIdx = null;\n      lastIdx = null;\n      for (sampleIdx = 0; sampleIdx < series.length; sampleIdx++) {\n        if (series[sampleIdx][0] >= low && firstIdx === null) {\n          firstIdx = sampleIdx;\n        }\n        if (series[sampleIdx][0] <= high) {\n          lastIdx = sampleIdx;\n        }\n      }\n\n      if (firstIdx === null) firstIdx = 0;\n      var correctedFirstIdx = firstIdx;\n      var isInvalidValue = true;\n      while (isInvalidValue && correctedFirstIdx > 0) {\n        correctedFirstIdx--;\n        // check if the y value is null.\n        isInvalidValue = series[correctedFirstIdx][1] === null;\n      }\n\n      if (lastIdx === null) lastIdx = series.length - 1;\n      var correctedLastIdx = lastIdx;\n      isInvalidValue = true;\n      while (isInvalidValue && correctedLastIdx < series.length - 1) {\n        correctedLastIdx++;\n        isInvalidValue = series[correctedLastIdx][1] === null;\n      }\n\n      if (correctedFirstIdx!==firstIdx) {\n        firstIdx = correctedFirstIdx;\n      }\n      if (correctedLastIdx !== lastIdx) {\n        lastIdx = correctedLastIdx;\n      }\n\n      boundaryIds[seriesIdx-1] = [firstIdx, lastIdx];\n\n      // .slice's end is exclusive, we want to include lastIdx.\n      series = series.slice(firstIdx, lastIdx + 1);\n    } else {\n      series = rolledSeries[seriesIdx];\n      boundaryIds[seriesIdx-1] = [0, series.length-1];\n    }\n\n    var seriesName = this.attr_(\"labels\")[seriesIdx];\n    var seriesExtremes = this.dataHandler_.getExtremeYValues(series,\n        dateWindow, this.getBooleanOption(\"stepPlot\", seriesName));\n\n    var seriesPoints = this.dataHandler_.seriesToPoints(series,\n        seriesName, boundaryIds[seriesIdx-1][0]);\n\n    if (this.getBooleanOption(\"stackedGraph\")) {\n      axisIdx = this.attributes_.axisForSeries(seriesName);\n      if (cumulativeYval[axisIdx] === undefined) {\n        cumulativeYval[axisIdx] = [];\n      }\n      Dygraph.stackPoints_(seriesPoints, cumulativeYval[axisIdx], seriesExtremes,\n                           this.getBooleanOption(\"stackedGraphNaNFill\"));\n    }\n\n    extremes[seriesName] = seriesExtremes;\n    points[seriesIdx] = seriesPoints;\n  }\n\n  return { points: points, extremes: extremes, boundaryIds: boundaryIds };\n};\n\n/**\n * Update the graph with new data. This method is called when the viewing area\n * has changed. If the underlying data or options have changed, predraw_ will\n * be called before drawGraph_ is called.\n *\n * @private\n */\nDygraph.prototype.drawGraph_ = function() {\n  var start = new Date();\n\n  // This is used to set the second parameter to drawCallback, below.\n  var is_initial_draw = this.is_initial_draw_;\n  this.is_initial_draw_ = false;\n\n  this.layout_.removeAllDatasets();\n  this.setColors_();\n  this.attrs_.pointSize = 0.5 * this.getNumericOption('highlightCircleSize');\n\n  var packed = this.gatherDatasets_(this.rolledSeries_, this.dateWindow_);\n  var points = packed.points;\n  var extremes = packed.extremes;\n  this.boundaryIds_ = packed.boundaryIds;\n\n  this.setIndexByName_ = {};\n  var labels = this.attr_(\"labels\");\n  var dataIdx = 0;\n  for (var i = 1; i < points.length; i++) {\n    if (!this.visibility()[i - 1]) continue;\n    this.layout_.addDataset(labels[i], points[i]);\n    this.datasetIndex_[i] = dataIdx++;\n  }\n  for (var i = 0; i < labels.length; i++) {\n    this.setIndexByName_[labels[i]] = i;\n  }\n\n  this.computeYAxisRanges_(extremes);\n  this.layout_.setYAxes(this.axes_);\n\n  this.addXTicks_();\n\n  // Tell PlotKit to use this new data and render itself\n  this.layout_.evaluate();\n  this.renderGraph_(is_initial_draw);\n\n  if (this.getStringOption(\"timingName\")) {\n    var end = new Date();\n    console.log(this.getStringOption(\"timingName\") + \" - drawGraph: \" + (end - start) + \"ms\");\n  }\n};\n\n/**\n * This does the work of drawing the chart. It assumes that the layout and axis\n * scales have already been set (e.g. by predraw_).\n *\n * @private\n */\nDygraph.prototype.renderGraph_ = function(is_initial_draw) {\n  this.cascadeEvents_('clearChart');\n  this.plotter_.clear();\n\n  const underlayCallback = this.getFunctionOption('underlayCallback');\n  if (underlayCallback) {\n    // NOTE: we pass the dygraph object to this callback twice to avoid breaking\n    // users who expect a deprecated form of this callback.\n    underlayCallback.call(this,\n        this.hidden_ctx_, this.layout_.getPlotArea(), this, this);\n  }\n\n  var e = {\n    canvas: this.hidden_,\n    drawingContext: this.hidden_ctx_\n  };\n  this.cascadeEvents_('willDrawChart', e);\n  this.plotter_.render();\n  this.cascadeEvents_('didDrawChart', e);\n  this.lastRow_ = -1;  // because plugins/legend.js clears the legend\n\n  // TODO(danvk): is this a performance bottleneck when panning?\n  // The interaction canvas should already be empty in that situation.\n  this.canvas_.getContext('2d').clearRect(0, 0, this.width_, this.height_);\n\n  const drawCallback = this.getFunctionOption(\"drawCallback\");\n  if (drawCallback !== null) {\n    drawCallback.call(this, this, is_initial_draw);\n  }\n  if (is_initial_draw) {\n    this.readyFired_ = true;\n    while (this.readyFns_.length > 0) {\n      var fn = this.readyFns_.pop();\n      fn(this);\n    }\n  }\n};\n\n/**\n * @private\n * Determine properties of the y-axes which are independent of the data\n * currently being displayed. This includes things like the number of axes and\n * the style of the axes. It does not include the range of each axis and its\n * tick marks.\n * This fills in this.axes_.\n * axes_ = [ { options } ]\n *   indices are into the axes_ array.\n */\nDygraph.prototype.computeYAxes_ = function() {\n  var axis, index, opts, v;\n\n  // this.axes_ doesn't match this.attributes_.axes_.options. It's used for\n  // data computation as well as options storage.\n  // Go through once and add all the axes.\n  this.axes_ = [];\n\n  for (axis = 0; axis < this.attributes_.numAxes(); axis++) {\n    // Add a new axis, making a copy of its per-axis options.\n    opts = { g : this };\n    utils.update(opts, this.attributes_.axisOptions(axis));\n    this.axes_[axis] = opts;\n  }\n\n  for (axis = 0; axis < this.axes_.length; axis++) {\n    if (axis === 0) {\n      opts = this.optionsViewForAxis_('y' + (axis ? '2' : ''));\n      v = opts(\"valueRange\");\n      if (v) this.axes_[axis].valueRange = v;\n    } else {  // To keep old behavior\n      var axes = this.user_attrs_.axes;\n      if (axes && axes.y2) {\n        v = axes.y2.valueRange;\n        if (v) this.axes_[axis].valueRange = v;\n      }\n    }\n  }\n};\n\n/**\n * Returns the number of y-axes on the chart.\n * @return {number} the number of axes.\n */\nDygraph.prototype.numAxes = function() {\n  return this.attributes_.numAxes();\n};\n\n/**\n * @private\n * Returns axis properties for the given series.\n * @param {string} setName The name of the series for which to get axis\n * properties, e.g. 'Y1'.\n * @return {Object} The axis properties.\n */\nDygraph.prototype.axisPropertiesForSeries = function(series) {\n  // TODO(danvk): handle errors.\n  return this.axes_[this.attributes_.axisForSeries(series)];\n};\n\n/**\n * @private\n * Determine the value range and tick marks for each axis.\n * @param {Object} extremes A mapping from seriesName -> [low, high]\n * This fills in the valueRange and ticks fields in each entry of this.axes_.\n */\nDygraph.prototype.computeYAxisRanges_ = function(extremes) {\n  var isNullUndefinedOrNaN = function(num) {\n    return isNaN(parseFloat(num));\n  };\n  var numAxes = this.attributes_.numAxes();\n  var ypadCompat, span, series, ypad;\n\n  var p_axis;\n\n  // Compute extreme values, a span and tick marks for each axis.\n  for (var i = 0; i < numAxes; i++) {\n    var axis = this.axes_[i];\n    var logscale = this.attributes_.getForAxis(\"logscale\", i);\n    var includeZero = this.attributes_.getForAxis(\"includeZero\", i);\n    var independentTicks = this.attributes_.getForAxis(\"independentTicks\", i);\n    series = this.attributes_.seriesForAxis(i);\n\n    // Add some padding. This supports two Y padding operation modes:\n    //\n    // - backwards compatible (yRangePad not set):\n    //   10% padding for automatic Y ranges, but not for user-supplied\n    //   ranges, and move a close-to-zero edge to zero, since drawing at the edge\n    //   results in invisible lines. Unfortunately lines drawn at the edge of a\n    //   user-supplied range will still be invisible. If logscale is\n    //   set, add a variable amount of padding at the top but\n    //   none at the bottom.\n    //\n    // - new-style (yRangePad set by the user):\n    //   always add the specified Y padding.\n    //\n    ypadCompat = true;\n    ypad = 0.1; // add 10%\n    const yRangePad = this.getNumericOption('yRangePad');\n    if (yRangePad !== null) {\n      ypadCompat = false;\n      // Convert pixel padding to ratio\n      ypad = yRangePad / this.plotter_.area.h;\n    }\n\n    if (series.length === 0) {\n      // If no series are defined or visible then use a reasonable default\n      axis.extremeRange = [0, 1];\n    } else {\n      // Calculate the extremes of extremes.\n      var minY = Infinity;  // extremes[series[0]][0];\n      var maxY = -Infinity;  // extremes[series[0]][1];\n      var extremeMinY, extremeMaxY;\n\n      for (var j = 0; j < series.length; j++) {\n        // this skips invisible series\n        if (!extremes.hasOwnProperty(series[j])) continue;\n\n        // Only use valid extremes to stop null data series' from corrupting the scale.\n        extremeMinY = extremes[series[j]][0];\n        if (extremeMinY !== null) {\n          minY = Math.min(extremeMinY, minY);\n        }\n        extremeMaxY = extremes[series[j]][1];\n        if (extremeMaxY !== null) {\n          maxY = Math.max(extremeMaxY, maxY);\n        }\n      }\n\n      // Include zero if requested by the user.\n      if (includeZero && !logscale) {\n        if (minY > 0) minY = 0;\n        if (maxY < 0) maxY = 0;\n      }\n\n      // Ensure we have a valid scale, otherwise default to [0, 1] for safety.\n      if (minY == Infinity) minY = 0;\n      if (maxY == -Infinity) maxY = 1;\n\n      span = maxY - minY;\n      // special case: if we have no sense of scale, center on the sole value.\n      if (span === 0) {\n        if (maxY !== 0) {\n          span = Math.abs(maxY);\n        } else {\n          // ... and if the sole value is zero, use range 0-1.\n          maxY = 1;\n          span = 1;\n        }\n      }\n\n      var maxAxisY = maxY, minAxisY = minY;\n      if (ypadCompat) {\n        if (logscale) {\n          maxAxisY = maxY + ypad * span;\n          minAxisY = minY;\n        } else {\n          maxAxisY = maxY + ypad * span;\n          minAxisY = minY - ypad * span;\n\n          // Backwards-compatible behavior: Move the span to start or end at zero if it's\n          // close to zero.\n          if (minAxisY < 0 && minY >= 0) minAxisY = 0;\n          if (maxAxisY > 0 && maxY <= 0) maxAxisY = 0;\n        }\n      }\n      axis.extremeRange = [minAxisY, maxAxisY];\n    }\n    if (axis.valueRange) {\n      // This is a user-set value range for this axis.\n      var y0 = isNullUndefinedOrNaN(axis.valueRange[0]) ? axis.extremeRange[0] : axis.valueRange[0];\n      var y1 = isNullUndefinedOrNaN(axis.valueRange[1]) ? axis.extremeRange[1] : axis.valueRange[1];\n      axis.computedValueRange = [y0, y1];\n    } else {\n      axis.computedValueRange = axis.extremeRange;\n    }\n    if (!ypadCompat) {\n      // When using yRangePad, adjust the upper/lower bounds to add\n      // padding unless the user has zoomed/panned the Y axis range.\n\n      y0 = axis.computedValueRange[0];\n      y1 = axis.computedValueRange[1];\n\n      // special case #781: if we have no sense of scale, center on the sole value.\n      if (y0 === y1) {\n        if(y0 === 0) {\n          y1 = 1;\n        } else {\n          var delta = Math.abs(y0 / 10);\n          y0 -= delta;\n          y1 += delta;\n        }\n      }\n\n      if (logscale) {\n        var y0pct = ypad / (2 * ypad - 1);\n        var y1pct = (ypad - 1) / (2 * ypad - 1);\n        axis.computedValueRange[0] = utils.logRangeFraction(y0, y1, y0pct);\n        axis.computedValueRange[1] = utils.logRangeFraction(y0, y1, y1pct);\n      } else {\n        span = y1 - y0;\n        axis.computedValueRange[0] = y0 - span * ypad;\n        axis.computedValueRange[1] = y1 + span * ypad;\n      }\n    }\n\n    if (independentTicks) {\n      axis.independentTicks = independentTicks;\n      var opts = this.optionsViewForAxis_('y' + (i ? '2' : ''));\n      var ticker = opts('ticker');\n      axis.ticks = ticker(axis.computedValueRange[0],\n              axis.computedValueRange[1],\n              this.plotter_.area.h,\n              opts,\n              this);\n      // Define the first independent axis as primary axis.\n      if (!p_axis) p_axis = axis;\n    }\n  }\n  if (p_axis === undefined) {\n    throw (\"Configuration Error: At least one axis has to have the \\\"independentTicks\\\" option activated.\");\n  }\n  // Add ticks. By default, all axes inherit the tick positions of the\n  // primary axis. However, if an axis is specifically marked as having\n  // independent ticks, then that is permissible as well.\n  for (var i = 0; i < numAxes; i++) {\n    var axis = this.axes_[i];\n\n    if (!axis.independentTicks) {\n      var opts = this.optionsViewForAxis_('y' + (i ? '2' : ''));\n      var ticker = opts('ticker');\n      var p_ticks = p_axis.ticks;\n      var p_scale = p_axis.computedValueRange[1] - p_axis.computedValueRange[0];\n      var scale = axis.computedValueRange[1] - axis.computedValueRange[0];\n      var tick_values = [];\n      for (var k = 0; k < p_ticks.length; k++) {\n        var y_frac = (p_ticks[k].v - p_axis.computedValueRange[0]) / p_scale;\n        var y_val = axis.computedValueRange[0] + y_frac * scale;\n        tick_values.push(y_val);\n      }\n\n      axis.ticks = ticker(axis.computedValueRange[0],\n                          axis.computedValueRange[1],\n                          this.plotter_.area.h,\n                          opts,\n                          this,\n                          tick_values);\n    }\n  }\n};\n\n/**\n * Detects the type of the str (date or numeric) and sets the various\n * formatting attributes in this.attrs_ based on this type.\n * @param {string} str An x value.\n * @private\n */\nDygraph.prototype.detectTypeFromString_ = function(str) {\n  var isDate = false;\n  var dashPos = str.indexOf('-');  // could be 2006-01-01 _or_ 1.0e-2\n  if ((dashPos > 0 && (str[dashPos-1] != 'e' && str[dashPos-1] != 'E')) ||\n      str.indexOf('/') >= 0 ||\n      isNaN(parseFloat(str))) {\n    isDate = true;\n  }\n\n  this.setXAxisOptions_(isDate);\n};\n\nDygraph.prototype.setXAxisOptions_ = function(isDate) {\n  if (isDate) {\n    this.attrs_.xValueParser = utils.dateParser;\n    this.attrs_.axes.x.valueFormatter = utils.dateValueFormatter;\n    this.attrs_.axes.x.ticker = DygraphTickers.dateTicker;\n    this.attrs_.axes.x.axisLabelFormatter = utils.dateAxisLabelFormatter;\n  } else {\n    /** @private (shut up, jsdoc!) */\n    this.attrs_.xValueParser = function(x) { return parseFloat(x); };\n    // TODO(danvk): use Dygraph.numberValueFormatter here?\n    /** @private (shut up, jsdoc!) */\n    this.attrs_.axes.x.valueFormatter = function(x) { return x; };\n    this.attrs_.axes.x.ticker = DygraphTickers.numericTicks;\n    this.attrs_.axes.x.axisLabelFormatter = this.attrs_.axes.x.valueFormatter;\n  }\n};\n\n/**\n * @private\n * Parses a string in a special csv format.  We expect a csv file where each\n * line is a date point, and the first field in each line is the date string.\n * We also expect that all remaining fields represent series.\n * if the errorBars attribute is set, then interpret the fields as:\n * date, series1, stddev1, series2, stddev2, ...\n * @param {[Object]} data See above.\n *\n * @return [Object] An array with one entry for each row. These entries\n * are an array of cells in that row. The first entry is the parsed x-value for\n * the row. The second, third, etc. are the y-values. These can take on one of\n * three forms, depending on the CSV and constructor parameters:\n * 1. numeric value\n * 2. [ value, stddev ]\n * 3. [ low value, center value, high value ]\n */\nDygraph.prototype.parseCSV_ = function(data) {\n  var ret = [];\n  var line_delimiter = utils.detectLineDelimiter(data);\n  var lines = data.split(line_delimiter || \"\\n\");\n  var vals, j;\n\n  // Use the default delimiter or fall back to a tab if that makes sense.\n  var delim = this.getStringOption('delimiter');\n  if (lines[0].indexOf(delim) == -1 && lines[0].indexOf('\\t') >= 0) {\n    delim = '\\t';\n  }\n\n  var start = 0;\n  if (!('labels' in this.user_attrs_)) {\n    // User hasn't explicitly set labels, so they're (presumably) in the CSV.\n    start = 1;\n    this.attrs_.labels = lines[0].split(delim);  // NOTE: _not_ user_attrs_.\n    this.attributes_.reparseSeries();\n  }\n  var line_no = 0;\n\n  var xParser;\n  var defaultParserSet = false;  // attempt to auto-detect x value type\n  var expectedCols = this.attr_(\"labels\").length;\n  var outOfOrder = false;\n  for (var i = start; i < lines.length; i++) {\n    var line = lines[i];\n    line_no = i;\n    if (line.length === 0) continue;  // skip blank lines\n    if (line[0] == '#') continue;    // skip comment lines\n    var inFields = line.split(delim);\n    if (inFields.length < 2) continue;\n\n    var fields = [];\n    if (!defaultParserSet) {\n      this.detectTypeFromString_(inFields[0]);\n      xParser = this.getFunctionOption(\"xValueParser\");\n      defaultParserSet = true;\n    }\n    fields[0] = xParser(inFields[0], this);\n\n    // If fractions are expected, parse the numbers as \"A/B\"\n    if (this.fractions_) {\n      for (j = 1; j < inFields.length; j++) {\n        // TODO(danvk): figure out an appropriate way to flag parse errors.\n        vals = inFields[j].split(\"/\");\n        if (vals.length != 2) {\n          console.error('Expected fractional \"num/den\" values in CSV data ' +\n                        \"but found a value '\" + inFields[j] + \"' on line \" +\n                        (1 + i) + \" ('\" + line + \"') which is not of this form.\");\n          fields[j] = [0, 0];\n        } else {\n          fields[j] = [utils.parseFloat_(vals[0], i, line),\n                       utils.parseFloat_(vals[1], i, line)];\n        }\n      }\n    } else if (this.getBooleanOption(\"errorBars\")) {\n      // If there are sigma-based high/low bands, values are (value, stddev) pairs\n      if (inFields.length % 2 != 1) {\n        console.error('Expected alternating (value, stdev.) pairs in CSV data ' +\n                      'but line ' + (1 + i) + ' has an odd number of values (' +\n                      (inFields.length - 1) + \"): '\" + line + \"'\");\n      }\n      for (j = 1; j < inFields.length; j += 2) {\n        fields[(j + 1) / 2] = [utils.parseFloat_(inFields[j], i, line),\n                               utils.parseFloat_(inFields[j + 1], i, line)];\n      }\n    } else if (this.getBooleanOption(\"customBars\")) {\n      // Custom high/low bands are a low;centre;high tuple\n      for (j = 1; j < inFields.length; j++) {\n        var val = inFields[j];\n        if (/^ *$/.test(val)) {\n          fields[j] = [null, null, null];\n        } else {\n          vals = val.split(\";\");\n          if (vals.length == 3) {\n            fields[j] = [ utils.parseFloat_(vals[0], i, line),\n                          utils.parseFloat_(vals[1], i, line),\n                          utils.parseFloat_(vals[2], i, line) ];\n          } else {\n            console.warn('When using customBars, values must be either blank ' +\n                         'or \"low;center;high\" tuples (got \"' + val +\n                         '\" on line ' + (1+i) + ')');\n          }\n        }\n      }\n    } else {\n      // Values are just numbers\n      for (j = 1; j < inFields.length; j++) {\n        fields[j] = utils.parseFloat_(inFields[j], i, line);\n      }\n    }\n    if (ret.length > 0 && fields[0] < ret[ret.length - 1][0]) {\n      outOfOrder = true;\n    }\n\n    if (fields.length != expectedCols) {\n      console.error(\"Number of columns in line \" + i + \" (\" + fields.length +\n                    \") does not agree with number of labels (\" + expectedCols +\n                    \") \" + line);\n    }\n\n    // If the user specified the 'labels' option and none of the cells of the\n    // first row parsed correctly, then they probably double-specified the\n    // labels. We go with the values set in the option, discard this row and\n    // log a warning to the JS console.\n    if (i === 0 && this.attr_('labels')) {\n      var all_null = true;\n      for (j = 0; all_null && j < fields.length; j++) {\n        if (fields[j]) all_null = false;\n      }\n      if (all_null) {\n        console.warn(\"The dygraphs 'labels' option is set, but the first row \" +\n                     \"of CSV data ('\" + line + \"') appears to also contain \" +\n                     \"labels. Will drop the CSV labels and use the option \" +\n                     \"labels.\");\n        continue;\n      }\n    }\n    ret.push(fields);\n  }\n\n  if (outOfOrder) {\n    console.warn(\"CSV is out of order; order it correctly to speed loading.\");\n    ret.sort(function(a,b) { return a[0] - b[0]; });\n  }\n\n  return ret;\n};\n\n// In native format, all values must be dates or numbers.\n// This check isn't perfect but will catch most mistaken uses of strings.\nfunction validateNativeFormat(data) {\n  const firstRow = data[0];\n  const firstX = firstRow[0];\n  if (typeof firstX !== 'number' && !utils.isDateLike(firstX)) {\n    throw new Error(`Expected number or date but got ${typeof firstX}: ${firstX}.`);\n  }\n  for (let i = 1; i < firstRow.length; i++) {\n    const val = firstRow[i];\n    if (val === null || val === undefined) continue;\n    if (typeof val === 'number') continue;\n    if (utils.isArrayLike(val)) continue;  // e.g. errorBars or customBars\n    throw new Error(`Expected number or array but got ${typeof val}: ${val}.`);\n  }\n}\n\n/**\n * The user has provided their data as a pre-packaged JS array. If the x values\n * are numeric, this is the same as dygraphs' internal format. If the x values\n * are dates, we need to convert them from Date objects to ms since epoch.\n * @param {!Array} data\n * @return {Object} data with numeric x values.\n * @private\n */\nDygraph.prototype.parseArray_ = function(data) {\n  // Peek at the first x value to see if it's numeric.\n  if (data.length === 0) {\n    data = [[0]];\n  }\n  if (data[0].length === 0) {\n    console.error(\"Data set cannot contain an empty row\");\n    return null;\n  }\n\n  validateNativeFormat(data);\n\n  var i;\n  if (this.attr_(\"labels\") === null) {\n    console.warn(\"Using default labels. Set labels explicitly via 'labels' \" +\n                 \"in the options parameter\");\n    this.attrs_.labels = [ \"X\" ];\n    for (i = 1; i < data[0].length; i++) {\n      this.attrs_.labels.push(\"Y\" + i); // Not user_attrs_.\n    }\n    this.attributes_.reparseSeries();\n  } else {\n    var num_labels = this.attr_(\"labels\");\n    if (num_labels.length != data[0].length) {\n      console.error(\"Mismatch between number of labels (\" + num_labels + \")\" +\n                    \" and number of columns in array (\" + data[0].length + \")\");\n      return null;\n    }\n  }\n\n  if (utils.isDateLike(data[0][0])) {\n    // Some intelligent defaults for a date x-axis.\n    this.attrs_.axes.x.valueFormatter = utils.dateValueFormatter;\n    this.attrs_.axes.x.ticker = DygraphTickers.dateTicker;\n    this.attrs_.axes.x.axisLabelFormatter = utils.dateAxisLabelFormatter;\n\n    // Assume they're all dates.\n    var parsedData = utils.clone(data);\n    for (i = 0; i < data.length; i++) {\n      if (parsedData[i].length === 0) {\n        console.error(\"Row \" + (1 + i) + \" of data is empty\");\n        return null;\n      }\n      if (parsedData[i][0] === null ||\n          typeof(parsedData[i][0].getTime) != 'function' ||\n          isNaN(parsedData[i][0].getTime())) {\n        console.error(\"x value in row \" + (1 + i) + \" is not a Date\");\n        return null;\n      }\n      parsedData[i][0] = parsedData[i][0].getTime();\n    }\n    return parsedData;\n  } else {\n    // Some intelligent defaults for a numeric x-axis.\n    /** @private (shut up, jsdoc!) */\n    this.attrs_.axes.x.valueFormatter = function(x) { return x; };\n    this.attrs_.axes.x.ticker = DygraphTickers.numericTicks;\n    this.attrs_.axes.x.axisLabelFormatter = utils.numberAxisLabelFormatter;\n    return data;\n  }\n};\n\n/**\n * Parses a DataTable object from gviz.\n * The data is expected to have a first column that is either a date or a\n * number. All subsequent columns must be numbers. If there is a clear mismatch\n * between this.xValueParser_ and the type of the first column, it will be\n * fixed. Fills out rawData_.\n * @param {!google.visualization.DataTable} data See above.\n * @private\n */\nDygraph.prototype.parseDataTable_ = function(data) {\n  var shortTextForAnnotationNum = function(num) {\n    // converts [0-9]+ [A-Z][a-z]*\n    // example: 0=A, 1=B, 25=Z, 26=Aa, 27=Ab\n    // and continues like.. Ba Bb .. Za .. Zz..Aaa...Zzz Aaaa Zzzz\n    var shortText = String.fromCharCode(65 /* A */ + num % 26);\n    num = Math.floor(num / 26);\n    while ( num > 0 ) {\n      shortText = String.fromCharCode(65 /* A */ + (num - 1) % 26 ) + shortText.toLowerCase();\n      num = Math.floor((num - 1) / 26);\n    }\n    return shortText;\n  };\n\n  var cols = data.getNumberOfColumns();\n  var rows = data.getNumberOfRows();\n\n  var indepType = data.getColumnType(0);\n  if (indepType == 'date' || indepType == 'datetime') {\n    this.attrs_.xValueParser = utils.dateParser;\n    this.attrs_.axes.x.valueFormatter = utils.dateValueFormatter;\n    this.attrs_.axes.x.ticker = DygraphTickers.dateTicker;\n    this.attrs_.axes.x.axisLabelFormatter = utils.dateAxisLabelFormatter;\n  } else if (indepType == 'number') {\n    this.attrs_.xValueParser = function(x) { return parseFloat(x); };\n    this.attrs_.axes.x.valueFormatter = function(x) { return x; };\n    this.attrs_.axes.x.ticker = DygraphTickers.numericTicks;\n    this.attrs_.axes.x.axisLabelFormatter = this.attrs_.axes.x.valueFormatter;\n  } else {\n    throw new Error(\n          \"only 'date', 'datetime' and 'number' types are supported \" +\n          \"for column 1 of DataTable input (Got '\" + indepType + \"')\");\n  }\n\n  // Array of the column indices which contain data (and not annotations).\n  var colIdx = [];\n  var annotationCols = {};  // data index -> [annotation cols]\n  var hasAnnotations = false;\n  var i, j;\n  for (i = 1; i < cols; i++) {\n    var type = data.getColumnType(i);\n    if (type == 'number') {\n      colIdx.push(i);\n    } else if (type == 'string' && this.getBooleanOption('displayAnnotations')) {\n      // This is OK -- it's an annotation column.\n      var dataIdx = colIdx[colIdx.length - 1];\n      if (!annotationCols.hasOwnProperty(dataIdx)) {\n        annotationCols[dataIdx] = [i];\n      } else {\n        annotationCols[dataIdx].push(i);\n      }\n      hasAnnotations = true;\n    } else {\n      throw new Error(\n          \"Only 'number' is supported as a dependent type with Gviz.\" +\n          \" 'string' is only supported if displayAnnotations is true\");\n    }\n  }\n\n  // Read column labels\n  // TODO(danvk): add support back for errorBars\n  var labels = [data.getColumnLabel(0)];\n  for (i = 0; i < colIdx.length; i++) {\n    labels.push(data.getColumnLabel(colIdx[i]));\n    if (this.getBooleanOption(\"errorBars\")) i += 1;\n  }\n  this.attrs_.labels = labels;\n  cols = labels.length;\n\n  var ret = [];\n  var outOfOrder = false;\n  var annotations = [];\n  for (i = 0; i < rows; i++) {\n    var row = [];\n    if (typeof(data.getValue(i, 0)) === 'undefined' ||\n        data.getValue(i, 0) === null) {\n      console.warn(\"Ignoring row \" + i +\n                   \" of DataTable because of undefined or null first column.\");\n      continue;\n    }\n\n    if (indepType == 'date' || indepType == 'datetime') {\n      row.push(data.getValue(i, 0).getTime());\n    } else {\n      row.push(data.getValue(i, 0));\n    }\n    if (!this.getBooleanOption(\"errorBars\")) {\n      for (j = 0; j < colIdx.length; j++) {\n        var col = colIdx[j];\n        row.push(data.getValue(i, col));\n        if (hasAnnotations &&\n            annotationCols.hasOwnProperty(col) &&\n            data.getValue(i, annotationCols[col][0]) !== null) {\n          var ann = {};\n          ann.series = data.getColumnLabel(col);\n          ann.xval = row[0];\n          ann.shortText = shortTextForAnnotationNum(annotations.length);\n          ann.text = '';\n          for (var k = 0; k < annotationCols[col].length; k++) {\n            if (k) ann.text += \"\\n\";\n            ann.text += data.getValue(i, annotationCols[col][k]);\n          }\n          annotations.push(ann);\n        }\n      }\n\n      // Strip out infinities, which give dygraphs problems later on.\n      for (j = 0; j < row.length; j++) {\n        if (!isFinite(row[j])) row[j] = null;\n      }\n    } else {\n      for (j = 0; j < cols - 1; j++) {\n        row.push([ data.getValue(i, 1 + 2 * j), data.getValue(i, 2 + 2 * j) ]);\n      }\n    }\n    if (ret.length > 0 && row[0] < ret[ret.length - 1][0]) {\n      outOfOrder = true;\n    }\n    ret.push(row);\n  }\n\n  if (outOfOrder) {\n    console.warn(\"DataTable is out of order; order it correctly to speed loading.\");\n    ret.sort(function(a,b) { return a[0] - b[0]; });\n  }\n  this.rawData_ = ret;\n\n  if (annotations.length > 0) {\n    this.setAnnotations(annotations, true);\n  }\n  this.attributes_.reparseSeries();\n};\n\n/**\n * Signals to plugins that the chart data has updated.\n * This happens after the data has updated but before the chart has redrawn.\n * @private\n */\nDygraph.prototype.cascadeDataDidUpdateEvent_ = function() {\n  // TODO(danvk): there are some issues checking xAxisRange() and using\n  // toDomCoords from handlers of this event. The visible range should be set\n  // when the chart is drawn, not derived from the data.\n  this.cascadeEvents_('dataDidUpdate', {});\n};\n\n/**\n * Get the CSV data. If it's in a function, call that function. If it's in a\n * file, do an XMLHttpRequest to get it.\n * @private\n */\nDygraph.prototype.start_ = function() {\n  var data = this.file_;\n\n  // Functions can return references of all other types.\n  if (typeof data == 'function') {\n    data = data();\n  }\n\n  const datatype = utils.typeArrayLike(data);\n  if (datatype == 'array') {\n    this.rawData_ = this.parseArray_(data);\n    this.cascadeDataDidUpdateEvent_();\n    this.predraw_();\n  } else if (datatype == 'object' &&\n             typeof data.getColumnRange == 'function') {\n    // must be a DataTable from gviz.\n    this.parseDataTable_(data);\n    this.cascadeDataDidUpdateEvent_();\n    this.predraw_();\n  } else if (datatype == 'string') {\n    // Heuristic: a newline means it's CSV data. Otherwise it's an URL.\n    var line_delimiter = utils.detectLineDelimiter(data);\n    if (line_delimiter) {\n      this.loadedEvent_(data);\n    } else {\n      // REMOVE_FOR_IE\n      var req;\n      if (window.XMLHttpRequest) {\n        // Firefox, Opera, IE7, and other browsers will use the native object\n        req = new XMLHttpRequest();\n      } else {\n        // IE 5 and 6 will use the ActiveX control\n        req = new ActiveXObject(\"Microsoft.XMLHTTP\");\n      }\n\n      var caller = this;\n      req.onreadystatechange = function () {\n        if (req.readyState == 4) {\n          if (req.status === 200 ||  // Normal http\n              req.status === 0) {    // Chrome w/ --allow-file-access-from-files\n            caller.loadedEvent_(req.responseText);\n          }\n        }\n      };\n\n      req.open(\"GET\", data, true);\n      req.send(null);\n    }\n  } else {\n    console.error(\"Unknown data format: \" + datatype);\n  }\n};\n\n/**\n * Changes various properties of the graph. These can include:\n * <ul>\n * <li>file: changes the source data for the graph</li>\n * <li>errorBars: changes whether the data contains stddev</li>\n * </ul>\n *\n * There's a huge variety of options that can be passed to this method. For a\n * full list, see http://dygraphs.com/options.html.\n *\n * @param {Object} input_attrs The new properties and values\n * @param {boolean} block_redraw Usually the chart is redrawn after every\n *     call to updateOptions(). If you know better, you can pass true to\n *     explicitly block the redraw. This can be useful for chaining\n *     updateOptions() calls, avoiding the occasional infinite loop and\n *     preventing redraws when it's not necessary (e.g. when updating a\n *     callback).\n */\nDygraph.prototype.updateOptions = function(input_attrs, block_redraw) {\n  if (typeof(block_redraw) == 'undefined') block_redraw = false;\n\n  // copyUserAttrs_ drops the \"file\" parameter as a convenience to us.\n  var file = input_attrs.file;\n  var attrs = Dygraph.copyUserAttrs_(input_attrs);\n  var prevNumAxes = this.attributes_.numAxes();\n\n  // TODO(danvk): this is a mess. Move these options into attr_.\n  if ('rollPeriod' in attrs) {\n    this.rollPeriod_ = attrs.rollPeriod;\n  }\n  if ('dateWindow' in attrs) {\n    this.dateWindow_ = attrs.dateWindow;\n  }\n\n  // TODO(danvk): validate per-series options.\n  // Supported:\n  // strokeWidth\n  // pointSize\n  // drawPoints\n  // highlightCircleSize\n\n  // Check if this set options will require new points.\n  var requiresNewPoints = utils.isPixelChangingOptionList(this.attr_(\"labels\"), attrs);\n\n  utils.updateDeep(this.user_attrs_, attrs);\n\n  this.attributes_.reparseSeries();\n\n  if (prevNumAxes < this.attributes_.numAxes()) this.plotter_.clear();\n  if (file) {\n    // This event indicates that the data is about to change, but hasn't yet.\n    // TODO(danvk): support cancellation of the update via this event.\n    this.cascadeEvents_('dataWillUpdate', {});\n\n    this.file_ = file;\n    if (!block_redraw) this.start_();\n  } else {\n    if (!block_redraw) {\n      if (requiresNewPoints) {\n        this.predraw_();\n      } else {\n        this.renderGraph_(false);\n      }\n    }\n  }\n};\n\n/**\n * Make a copy of input attributes, removing file as a convenience.\n * @private\n */\nDygraph.copyUserAttrs_ = function(attrs) {\n  var my_attrs = {};\n  for (var k in attrs) {\n    if (!attrs.hasOwnProperty(k)) continue;\n    if (k == 'file') continue;\n    if (attrs.hasOwnProperty(k)) my_attrs[k] = attrs[k];\n  }\n  return my_attrs;\n};\n\n/**\n * Resizes the dygraph. If no parameters are specified, resizes to fill the\n * containing div (which has presumably changed size since the dygraph was\n * instantiated). If the width/height are specified, the div will be resized.\n *\n * This is far more efficient than destroying and re-instantiating a\n * Dygraph, since it doesn't have to reparse the underlying data.\n *\n * @param {number} width Width (in pixels)\n * @param {number} height Height (in pixels)\n */\nDygraph.prototype.resize = function(width, height) {\n  if (this.resize_lock) {\n    return;\n  }\n  this.resize_lock = true;\n\n  if ((width === null) != (height === null)) {\n    console.warn(\"Dygraph.resize() should be called with zero parameters or \" +\n                 \"two non-NULL parameters. Pretending it was zero.\");\n    width = height = null;\n  }\n\n  var old_width = this.width_;\n  var old_height = this.height_;\n\n  if (width) {\n    this.maindiv_.style.width = width + \"px\";\n    this.maindiv_.style.height = height + \"px\";\n    this.width_ = width;\n    this.height_ = height;\n  } else {\n    this.width_ = this.maindiv_.clientWidth;\n    this.height_ = this.maindiv_.clientHeight;\n  }\n\n  if (old_width != this.width_ || old_height != this.height_) {\n    // Resizing a canvas erases it, even when the size doesn't change, so\n    // any resize needs to be followed by a redraw.\n    this.resizeElements_();\n    this.predraw_();\n  }\n\n  this.resize_lock = false;\n};\n\n/**\n * Adjusts the number of points in the rolling average. Updates the graph to\n * reflect the new averaging period.\n * @param {number} length Number of points over which to average the data.\n */\nDygraph.prototype.adjustRoll = function(length) {\n  this.rollPeriod_ = length;\n  this.predraw_();\n};\n\n/**\n * Returns a boolean array of visibility statuses.\n */\nDygraph.prototype.visibility = function() {\n  // Do lazy-initialization, so that this happens after we know the number of\n  // data series.\n  if (!this.getOption(\"visibility\")) {\n    this.attrs_.visibility = [];\n  }\n  // TODO(danvk): it looks like this could go into an infinite loop w/ user_attrs.\n  while (this.getOption(\"visibility\").length < this.numColumns() - 1) {\n    this.attrs_.visibility.push(true);\n  }\n  return this.getOption(\"visibility\");\n};\n\n/**\n * Changes the visibility of one or more series.\n *\n * @param {number|number[]|object} num the series index or an array of series indices\n *                                     or a boolean array of visibility states by index\n *                                     or an object mapping series numbers, as keys, to\n *                                     visibility state (boolean values)\n * @param {boolean} value the visibility state expressed as a boolean\n */\nDygraph.prototype.setVisibility = function(num, value) {\n  var x = this.visibility();\n  var numIsObject = false;\n\n  if (!Array.isArray(num)) {\n    if (num !== null && typeof num === 'object') {\n      numIsObject = true;\n    } else {\n      num = [num];\n    }\n  }\n\n  if (numIsObject) {\n    for (var i in num) {\n      if (num.hasOwnProperty(i)) {\n        if (i < 0 || i >= x.length) {\n          console.warn(\"Invalid series number in setVisibility: \" + i);\n        } else {\n          x[i] = num[i];\n        }\n      }\n    }\n  } else {\n    for (var i = 0; i < num.length; i++) {\n      if (typeof num[i] === 'boolean') {\n        if (i >= x.length) {\n          console.warn(\"Invalid series number in setVisibility: \" + i);\n        } else {\n          x[i] = num[i];\n        }\n      } else {\n        if (num[i] < 0 || num[i] >= x.length) {\n          console.warn(\"Invalid series number in setVisibility: \" + num[i]);\n        } else {\n          x[num[i]] = value;\n        }\n      }\n    }\n  }\n\n  this.predraw_();\n};\n\n/**\n * How large of an area will the dygraph render itself in?\n * This is used for testing.\n * @return A {width: w, height: h} object.\n * @private\n */\nDygraph.prototype.size = function() {\n  return { width: this.width_, height: this.height_ };\n};\n\n/**\n * Update the list of annotations and redraw the chart.\n * See dygraphs.com/annotations.html for more info on how to use annotations.\n * @param ann {Array} An array of annotation objects.\n * @param suppressDraw {Boolean} Set to \"true\" to block chart redraw (optional).\n */\nDygraph.prototype.setAnnotations = function(ann, suppressDraw) {\n  // Only add the annotation CSS rule once we know it will be used.\n  this.annotations_ = ann;\n  if (!this.layout_) {\n    console.warn(\"Tried to setAnnotations before dygraph was ready. \" +\n                 \"Try setting them in a ready() block. See \" +\n                 \"dygraphs.com/tests/annotation.html\");\n    return;\n  }\n\n  this.layout_.setAnnotations(this.annotations_);\n  if (!suppressDraw) {\n    this.predraw_();\n  }\n};\n\n/**\n * Return the list of annotations.\n */\nDygraph.prototype.annotations = function() {\n  return this.annotations_;\n};\n\n/**\n * Get the list of label names for this graph. The first column is the\n * x-axis, so the data series names start at index 1.\n *\n * Returns null when labels have not yet been defined.\n */\nDygraph.prototype.getLabels = function() {\n  var labels = this.attr_(\"labels\");\n  return labels ? labels.slice() : null;\n};\n\n/**\n * Get the index of a series (column) given its name. The first column is the\n * x-axis, so the data series start with index 1.\n */\nDygraph.prototype.indexFromSetName = function(name) {\n  return this.setIndexByName_[name];\n};\n\n/**\n * Find the row number corresponding to the given x-value.\n * Returns null if there is no such x-value in the data.\n * If there are multiple rows with the same x-value, this will return the\n * first one.\n * @param {number} xVal The x-value to look for (e.g. millis since epoch).\n * @return {?number} The row number, which you can pass to getValue(), or null.\n */\nDygraph.prototype.getRowForX = function(xVal) {\n  var low = 0,\n      high = this.numRows() - 1;\n\n  while (low <= high) {\n    var idx = (high + low) >> 1;\n    var x = this.getValue(idx, 0);\n    if (x < xVal) {\n      low = idx + 1;\n    } else if (x > xVal) {\n      high = idx - 1;\n    } else if (low != idx) {  // equal, but there may be an earlier match.\n      high = idx;\n    } else {\n      return idx;\n    }\n  }\n\n  return null;\n};\n\n/**\n * Trigger a callback when the dygraph has drawn itself and is ready to be\n * manipulated. This is primarily useful when dygraphs has to do an XHR for the\n * data (i.e. a URL is passed as the data source) and the chart is drawn\n * asynchronously. If the chart has already drawn, the callback will fire\n * immediately.\n *\n * This is a good place to call setAnnotation().\n *\n * @param {function(!Dygraph)} callback The callback to trigger when the chart\n *     is ready.\n */\nDygraph.prototype.ready = function(callback) {\n  if (this.is_initial_draw_) {\n    this.readyFns_.push(callback);\n  } else {\n    callback.call(this, this);\n  }\n};\n\n/**\n * Add an event handler. This event handler is kept until the graph is\n * destroyed with a call to graph.destroy().\n *\n * @param {!Node} elem The element to add the event to.\n * @param {string} type The type of the event, e.g. 'click' or 'mousemove'.\n * @param {function(Event):(boolean|undefined)} fn The function to call\n *     on the event. The function takes one parameter: the event object.\n * @private\n */\nDygraph.prototype.addAndTrackEvent = function(elem, type, fn) {\n  utils.addEvent(elem, type, fn);\n  this.registeredEvents_.push({elem, type, fn});\n};\n\nDygraph.prototype.removeTrackedEvents_ = function() {\n  if (this.registeredEvents_) {\n    for (var idx = 0; idx < this.registeredEvents_.length; idx++) {\n      var reg = this.registeredEvents_[idx];\n      utils.removeEvent(reg.elem, reg.type, reg.fn);\n    }\n  }\n\n  this.registeredEvents_ = [];\n};\n\n// Installed plugins, in order of precedence (most-general to most-specific).\nDygraph.PLUGINS = [\n  LegendPlugin,\n  AxesPlugin,\n  RangeSelectorPlugin, // Has to be before ChartLabels so that its callbacks are called after ChartLabels' callbacks.\n  ChartLabelsPlugin,\n  AnnotationsPlugin,\n  GridPlugin\n];\n\n// There are many symbols which have historically been available through the\n// Dygraph class. These are exported here for backwards compatibility.\nDygraph.GVizChart = GVizChart;\nDygraph.DASHED_LINE = utils.DASHED_LINE;\nDygraph.DOT_DASH_LINE = utils.DOT_DASH_LINE;\nDygraph.dateAxisLabelFormatter = utils.dateAxisLabelFormatter;\nDygraph.toRGB_ = utils.toRGB_;\nDygraph.findPos = utils.findPos;\nDygraph.pageX = utils.pageX;\nDygraph.pageY = utils.pageY;\nDygraph.dateString_ = utils.dateString_;\nDygraph.defaultInteractionModel = DygraphInteraction.defaultModel;\nDygraph.nonInteractiveModel = Dygraph.nonInteractiveModel_ = DygraphInteraction.nonInteractiveModel_;\nDygraph.Circles = utils.Circles;\n\nDygraph.Plugins = {\n  Legend: LegendPlugin,\n  Axes: AxesPlugin,\n  Annotations: AnnotationsPlugin,\n  ChartLabels: ChartLabelsPlugin,\n  Grid: GridPlugin,\n  RangeSelector: RangeSelectorPlugin\n};\n\nDygraph.DataHandlers = {\n  DefaultHandler,\n  BarsHandler,\n  CustomBarsHandler,\n  DefaultFractionHandler,\n  ErrorBarsHandler,\n  FractionsBarsHandler\n};\n\nDygraph.startPan = DygraphInteraction.startPan;\nDygraph.startZoom = DygraphInteraction.startZoom;\nDygraph.movePan = DygraphInteraction.movePan;\nDygraph.moveZoom = DygraphInteraction.moveZoom;\nDygraph.endPan = DygraphInteraction.endPan;\nDygraph.endZoom = DygraphInteraction.endZoom;\n\nDygraph.numericLinearTicks = DygraphTickers.numericLinearTicks;\nDygraph.numericTicks = DygraphTickers.numericTicks;\nDygraph.dateTicker = DygraphTickers.dateTicker;\nDygraph.Granularity = DygraphTickers.Granularity;\nDygraph.getDateAxis = DygraphTickers.getDateAxis;\nDygraph.floatFormat = utils.floatFormat;\n\nutils.setupDOMready_(Dygraph);\n\nexport default Dygraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}