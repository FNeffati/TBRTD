{"ast":null,"code":"var _jsxFileName = \"/Users/fneffati/Documents/Classes/TBENVDASH/frontEnd/tbenv/src/components/WordCloud.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo, useCallback } from \"react\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport debounce from \"lodash/debounce\";\nimport 'tippy.js/dist/tippy.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordCloud = ({\n  cloud_type,\n  tweets,\n  onWordCloudClick\n}) => {\n  _s();\n  const [words, setWords] = useState([{\n    text: \"UNDER CONSTRUCTION\",\n    value: 20\n  }]);\n  const [loading, setLoading] = useState(false);\n  function extractHashtags(sentence) {\n    const result = [];\n    for (const word of sentence) {\n      if (word[0] === '#' && !result.includes(word)) {\n        result.push(word);\n      }\n    }\n    return result;\n  }\n  const fetchTerms = () => {\n    const justTextCol = [];\n    for (const line of dataFrame) {\n      let modifiedLine = line.replace(/\\bhttps\\w*\\b.*/, '');\n      modifiedLine = modifiedLine.replace(/\\bhttp\\w*\\b.*/, '');\n      justTextCol.push(modifiedLine);\n    }\n    const tokenizedTextColumn = [];\n    for (const line of justTextCol) {\n      const myPunct = ['!', '\"', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_', '-', '`', '{', '|', '}', '~', '»', '«', '“', '”'];\n      const punctPattern = new RegExp(\"[\" + myPunct.map(punct => \"\\\\\" + punct).join(\"\") + \"]\", \"g\");\n      let modifiedLine = line.replace(punctPattern, \"\");\n      modifiedLine = modifiedLine.replace(/[^\\w\\s\\']/g, \"\");\n      modifiedLine = modifiedLine.replace(/\\s+/g, \" \");\n      modifiedLine = modifiedLine.replace(/(https|www).*com/g, \"\");\n      modifiedLine = modifiedLine.trim();\n      const tokenizedText = modifiedLine.split(\" \");\n      if (!tokenizedTextColumn.some(existingText => JSON.stringify(existingText) === JSON.stringify(tokenizedText))) {\n        const hashtags = extractHashtags(tokenizedText);\n        const filteredTags = util.filterHashtags(hashtags);\n        util.geoTagHarvester(filteredTags);\n        tokenizedTextColumn.push(tokenizedText);\n      }\n    }\n  };\n\n  // const fetchTerms = useCallback(\n  //     debounce(() => {\n  //         setLoading(true);\n  //         fetch(\"/get_terms\", {\n  //             method: \"POST\",\n  //             headers: {\n  //                 \"Content-Type\": \"application/json\",\n  //             },\n  //             body: JSON.stringify([cloud_type, tweets]),\n  //         })\n  //             .then((response) => response.json())\n  //             .then((data) => {\n  //                 setWords(data.value1);\n  //                 setLoading(false);\n  //             })\n  //             .catch((error) => {\n  //                 console.error(error);\n  //                 setLoading(false);\n  //             });\n  //     }, 500),\n  //     [cloud_type, tweets]\n  // );\n\n  // useEffect(() => {\n  //     if (tweets.length > 0) {\n  //         setLoading(true)\n  //         fetchTerms();\n  //     }\n  //\n  //     if (tweets.length === 0) {\n  //         setWords([{\n  //             text: \"LOADING\",\n  //             value: 20\n  //         }])\n  //     }\n  // }, [fetchTerms, tweets]);\n  //\n  // useEffect(() => {\n  //     if (words.length === 0) {\n  //         setWords([{\n  //             text: \"NO HASHTAGS AVAILABLE\",\n  //             value: 20\n  //         }])\n  //     }\n  // }, [words]);\n\n  const options = useMemo(() => ({\n    rotations: 1,\n    rotationAngles: [0],\n    fontSizes: [15, 60],\n    colors: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\n    enableTooltip: true,\n    deterministic: true,\n    fontFamily: \"impact\",\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    padding: 1,\n    scale: \"sqrt\",\n    spiral: \"archimedean\",\n    transitionDuration: 1000\n  }), []);\n  const callbacks = useMemo(() => ({\n    onWordClick: word => onWordCloudClick('#' + word.text)\n  }), []);\n  const size = useMemo(() => [500, 600], []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-cloud-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-cloud\",\n      children: /*#__PURE__*/_jsxDEV(ReactWordcloud, {\n        words: words,\n        options: options,\n        size: size,\n        padding: 0,\n        callbacks: callbacks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(WordCloud, \"FWZHzf07OBdq8Eioj1ll5i9MPT8=\");\n_c = WordCloud;\nexport default WordCloud;\nvar _c;\n$RefreshReg$(_c, \"WordCloud\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","useCallback","ReactWordcloud","debounce","jsxDEV","_jsxDEV","WordCloud","cloud_type","tweets","onWordCloudClick","_s","words","setWords","text","value","loading","setLoading","extractHashtags","sentence","result","word","includes","push","fetchTerms","justTextCol","line","dataFrame","modifiedLine","replace","tokenizedTextColumn","myPunct","punctPattern","RegExp","map","punct","join","trim","tokenizedText","split","some","existingText","JSON","stringify","hashtags","filteredTags","util","filterHashtags","geoTagHarvester","options","rotations","rotationAngles","fontSizes","colors","enableTooltip","deterministic","fontFamily","fontStyle","fontWeight","padding","scale","spiral","transitionDuration","callbacks","onWordClick","size","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fneffati/Documents/Classes/TBENVDASH/frontEnd/tbenv/src/components/WordCloud.js"],"sourcesContent":["import React, { useEffect, useState, useMemo, useCallback } from \"react\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport debounce from \"lodash/debounce\";\nimport 'tippy.js/dist/tippy.css';\n\nconst WordCloud = ({ cloud_type, tweets, onWordCloudClick}) => {\n    const [words, setWords] = useState([{\n        text: \"UNDER CONSTRUCTION\",\n        value: 20\n    }]);\n    const [loading, setLoading] = useState(false);\n\n    function extractHashtags(sentence) {\n        const result = [];\n        for (const word of sentence) {\n            if (word[0] === '#' && !result.includes(word)) {\n                result.push(word);\n            }\n        }\n        return result;\n    }\n\n    const fetchTerms = () => {\n        const justTextCol = [];\n        for (const line of dataFrame) {\n            let modifiedLine = line.replace(/\\bhttps\\w*\\b.*/, '');\n            modifiedLine = modifiedLine.replace(/\\bhttp\\w*\\b.*/, '');\n            justTextCol.push(modifiedLine);\n        }\n        const tokenizedTextColumn = [];\n        for (const line of justTextCol) {\n            const myPunct = ['!', '\"', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_', '-', '`', '{', '|', '}', '~', '»', '«', '“', '”'];\n\n            const punctPattern = new RegExp(\"[\" + myPunct.map(punct => \"\\\\\" + punct).join(\"\") + \"]\", \"g\");\n            let modifiedLine = line.replace(punctPattern, \"\");\n            modifiedLine = modifiedLine.replace(/[^\\w\\s\\']/g, \"\");\n            modifiedLine = modifiedLine.replace(/\\s+/g, \" \");\n            modifiedLine = modifiedLine.replace(/(https|www).*com/g, \"\");\n            modifiedLine = modifiedLine.trim();\n            const tokenizedText = modifiedLine.split(\" \");\n\n            if (!tokenizedTextColumn.some(existingText => JSON.stringify(existingText) === JSON.stringify(tokenizedText))) {\n                const hashtags = extractHashtags(tokenizedText);\n                const filteredTags = util.filterHashtags(hashtags);\n                util.geoTagHarvester(filteredTags);\n                tokenizedTextColumn.push(tokenizedText);\n            }\n        }\n\n    }\n\n    // const fetchTerms = useCallback(\n    //     debounce(() => {\n    //         setLoading(true);\n    //         fetch(\"/get_terms\", {\n    //             method: \"POST\",\n    //             headers: {\n    //                 \"Content-Type\": \"application/json\",\n    //             },\n    //             body: JSON.stringify([cloud_type, tweets]),\n    //         })\n    //             .then((response) => response.json())\n    //             .then((data) => {\n    //                 setWords(data.value1);\n    //                 setLoading(false);\n    //             })\n    //             .catch((error) => {\n    //                 console.error(error);\n    //                 setLoading(false);\n    //             });\n    //     }, 500),\n    //     [cloud_type, tweets]\n    // );\n\n    // useEffect(() => {\n    //     if (tweets.length > 0) {\n    //         setLoading(true)\n    //         fetchTerms();\n    //     }\n    //\n    //     if (tweets.length === 0) {\n    //         setWords([{\n    //             text: \"LOADING\",\n    //             value: 20\n    //         }])\n    //     }\n    // }, [fetchTerms, tweets]);\n    //\n    // useEffect(() => {\n    //     if (words.length === 0) {\n    //         setWords([{\n    //             text: \"NO HASHTAGS AVAILABLE\",\n    //             value: 20\n    //         }])\n    //     }\n    // }, [words]);\n\n    const options = useMemo(\n        () => ({\n            rotations: 1,\n            rotationAngles: [0],\n            fontSizes: [15, 60],\n            colors: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\n            enableTooltip: true,\n            deterministic: true,\n            fontFamily: \"impact\",\n            fontStyle: \"normal\",\n            fontWeight: \"normal\",\n            padding: 1,\n            scale: \"sqrt\",\n            spiral: \"archimedean\",\n            transitionDuration: 1000,\n        }),\n        []\n    );\n\n    const callbacks = useMemo(\n        () => ({\n            onWordClick: (word) => onWordCloudClick('#'+word.text)\n        }),\n        []\n    );\n\n    const size = useMemo(() => [500, 600], []);\n\n    return (\n        <div className=\"word-cloud-container\">\n            <div className=\"loading\">{loading && <p>Loading...</p>}</div>\n            <div className=\"word-cloud\">\n                <ReactWordcloud  words={words} options={options} size={size} padding={0} callbacks={callbacks}/>\n            </div>\n        </div>\n    );\n};\n\nexport default WordCloud;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}