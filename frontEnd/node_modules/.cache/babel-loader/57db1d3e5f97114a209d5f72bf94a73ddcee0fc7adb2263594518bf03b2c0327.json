{"ast":null,"code":"// https://d3js.org/d3-scale/ v3.3.0 Copyright 2021 Mike Bostock\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-interpolate'), require('d3-format'), require('d3-time'), require('d3-time-format')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3));\n})(this, function (exports, d3Array, d3Interpolate, d3Format, d3Time, d3TimeFormat) {\n  'use strict';\n\n  function initRange(domain, range) {\n    switch (arguments.length) {\n      case 0:\n        break;\n      case 1:\n        this.range(domain);\n        break;\n      default:\n        this.range(range).domain(domain);\n        break;\n    }\n    return this;\n  }\n  function initInterpolator(domain, interpolator) {\n    switch (arguments.length) {\n      case 0:\n        break;\n      case 1:\n        {\n          if (typeof domain === \"function\") this.interpolator(domain);else this.range(domain);\n          break;\n        }\n      default:\n        {\n          this.domain(domain);\n          if (typeof interpolator === \"function\") this.interpolator(interpolator);else this.range(interpolator);\n          break;\n        }\n    }\n    return this;\n  }\n  const implicit = Symbol(\"implicit\");\n  function ordinal() {\n    var index = new Map(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n    function scale(d) {\n      var key = d + \"\",\n        i = index.get(key);\n      if (!i) {\n        if (unknown !== implicit) return unknown;\n        index.set(key, i = domain.push(d));\n      }\n      return range[(i - 1) % range.length];\n    }\n    scale.domain = function (_) {\n      if (!arguments.length) return domain.slice();\n      domain = [], index = new Map();\n      for (const value of _) {\n        const key = value + \"\";\n        if (index.has(key)) continue;\n        index.set(key, domain.push(value));\n      }\n      return scale;\n    };\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), scale) : range.slice();\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    scale.copy = function () {\n      return ordinal(domain, range).unknown(unknown);\n    };\n    initRange.apply(scale, arguments);\n    return scale;\n  }\n  function band() {\n    var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      r0 = 0,\n      r1 = 1,\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n    delete scale.unknown;\n    function rescale() {\n      var n = domain().length,\n        reverse = r1 < r0,\n        start = reverse ? r1 : r0,\n        stop = reverse ? r0 : r1;\n      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n      if (round) step = Math.floor(step);\n      start += (stop - start - step * (n - paddingInner)) * align;\n      bandwidth = step * (1 - paddingInner);\n      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n      var values = d3Array.range(n).map(function (i) {\n        return start + step * i;\n      });\n      return ordinalRange(reverse ? values.reverse() : values);\n    }\n    scale.domain = function (_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n    scale.range = function (_) {\n      return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\n    };\n    scale.rangeRound = function (_) {\n      return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\n    };\n    scale.bandwidth = function () {\n      return bandwidth;\n    };\n    scale.step = function () {\n      return step;\n    };\n    scale.round = function (_) {\n      return arguments.length ? (round = !!_, rescale()) : round;\n    };\n    scale.padding = function (_) {\n      return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n    };\n    scale.paddingInner = function (_) {\n      return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n    };\n    scale.paddingOuter = function (_) {\n      return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n    };\n    scale.align = function (_) {\n      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n    };\n    scale.copy = function () {\n      return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);\n    };\n    return initRange.apply(rescale(), arguments);\n  }\n  function pointish(scale) {\n    var copy = scale.copy;\n    scale.padding = scale.paddingOuter;\n    delete scale.paddingInner;\n    delete scale.paddingOuter;\n    scale.copy = function () {\n      return pointish(copy());\n    };\n    return scale;\n  }\n  function point() {\n    return pointish(band.apply(null, arguments).paddingInner(1));\n  }\n  function constants(x) {\n    return function () {\n      return x;\n    };\n  }\n  function number$1(x) {\n    return +x;\n  }\n  var unit = [0, 1];\n  function identity$1(x) {\n    return x;\n  }\n  function normalize(a, b) {\n    return (b -= a = +a) ? function (x) {\n      return (x - a) / b;\n    } : constants(isNaN(b) ? NaN : 0.5);\n  }\n  function clamper(a, b) {\n    var t;\n    if (a > b) t = a, a = b, b = t;\n    return function (x) {\n      return Math.max(a, Math.min(b, x));\n    };\n  }\n\n  // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n  // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\n  function bimap(domain, range, interpolate) {\n    var d0 = domain[0],\n      d1 = domain[1],\n      r0 = range[0],\n      r1 = range[1];\n    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n    return function (x) {\n      return r0(d0(x));\n    };\n  }\n  function polymap(domain, range, interpolate) {\n    var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n    // Reverse descending domains.\n    if (domain[j] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++i < j) {\n      d[i] = normalize(domain[i], domain[i + 1]);\n      r[i] = interpolate(range[i], range[i + 1]);\n    }\n    return function (x) {\n      var i = d3Array.bisect(domain, x, 1, j) - 1;\n      return r[i](d[i](x));\n    };\n  }\n  function copy$1(source, target) {\n    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());\n  }\n  function transformer$2() {\n    var domain = unit,\n      range = unit,\n      interpolate = d3Interpolate.interpolate,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity$1,\n      piecewise,\n      output,\n      input;\n    function rescale() {\n      var n = Math.min(domain.length, range.length);\n      if (clamp !== identity$1) clamp = clamper(domain[0], domain[n - 1]);\n      piecewise = n > 2 ? polymap : bimap;\n      output = input = null;\n      return scale;\n    }\n    function scale(x) {\n      return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n    }\n    scale.invert = function (y) {\n      return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));\n    };\n    scale.domain = function (_) {\n      return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();\n    };\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n    };\n    scale.rangeRound = function (_) {\n      return range = Array.from(_), interpolate = d3Interpolate.interpolateRound, rescale();\n    };\n    scale.clamp = function (_) {\n      return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;\n    };\n    scale.interpolate = function (_) {\n      return arguments.length ? (interpolate = _, rescale()) : interpolate;\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    return function (t, u) {\n      transform = t, untransform = u;\n      return rescale();\n    };\n  }\n  function continuous() {\n    return transformer$2()(identity$1, identity$1);\n  }\n  function tickFormat(start, stop, count, specifier) {\n    var step = d3Array.tickStep(start, stop, count),\n      precision;\n    specifier = d3Format.formatSpecifier(specifier == null ? \",f\" : specifier);\n    switch (specifier.type) {\n      case \"s\":\n        {\n          var value = Math.max(Math.abs(start), Math.abs(stop));\n          if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;\n          return d3Format.formatPrefix(specifier, value);\n        }\n      case \"\":\n      case \"e\":\n      case \"g\":\n      case \"p\":\n      case \"r\":\n        {\n          if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n          break;\n        }\n      case \"f\":\n      case \"%\":\n        {\n          if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n          break;\n        }\n    }\n    return d3Format.format(specifier);\n  }\n  function linearish(scale) {\n    var domain = scale.domain;\n    scale.ticks = function (count) {\n      var d = domain();\n      return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n    };\n    scale.tickFormat = function (count, specifier) {\n      var d = domain();\n      return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n    };\n    scale.nice = function (count) {\n      if (count == null) count = 10;\n      var d = domain();\n      var i0 = 0;\n      var i1 = d.length - 1;\n      var start = d[i0];\n      var stop = d[i1];\n      var prestep;\n      var step;\n      var maxIter = 10;\n      if (stop < start) {\n        step = start, start = stop, stop = step;\n        step = i0, i0 = i1, i1 = step;\n      }\n      while (maxIter-- > 0) {\n        step = d3Array.tickIncrement(start, stop, count);\n        if (step === prestep) {\n          d[i0] = start;\n          d[i1] = stop;\n          return domain(d);\n        } else if (step > 0) {\n          start = Math.floor(start / step) * step;\n          stop = Math.ceil(stop / step) * step;\n        } else if (step < 0) {\n          start = Math.ceil(start * step) / step;\n          stop = Math.floor(stop * step) / step;\n        } else {\n          break;\n        }\n        prestep = step;\n      }\n      return scale;\n    };\n    return scale;\n  }\n  function linear() {\n    var scale = continuous();\n    scale.copy = function () {\n      return copy$1(scale, linear());\n    };\n    initRange.apply(scale, arguments);\n    return linearish(scale);\n  }\n  function identity(domain) {\n    var unknown;\n    function scale(x) {\n      return x == null || isNaN(x = +x) ? unknown : x;\n    }\n    scale.invert = scale;\n    scale.domain = scale.range = function (_) {\n      return arguments.length ? (domain = Array.from(_, number$1), scale) : domain.slice();\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    scale.copy = function () {\n      return identity(domain).unknown(unknown);\n    };\n    domain = arguments.length ? Array.from(domain, number$1) : [0, 1];\n    return linearish(scale);\n  }\n  function nice(domain, interval) {\n    domain = domain.slice();\n    var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n    if (x1 < x0) {\n      t = i0, i0 = i1, i1 = t;\n      t = x0, x0 = x1, x1 = t;\n    }\n    domain[i0] = interval.floor(x0);\n    domain[i1] = interval.ceil(x1);\n    return domain;\n  }\n  function transformLog(x) {\n    return Math.log(x);\n  }\n  function transformExp(x) {\n    return Math.exp(x);\n  }\n  function transformLogn(x) {\n    return -Math.log(-x);\n  }\n  function transformExpn(x) {\n    return -Math.exp(-x);\n  }\n  function pow10(x) {\n    return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n  }\n  function powp(base) {\n    return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {\n      return Math.pow(base, x);\n    };\n  }\n  function logp(base) {\n    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {\n      return Math.log(x) / base;\n    });\n  }\n  function reflect(f) {\n    return function (x) {\n      return -f(-x);\n    };\n  }\n  function loggish(transform) {\n    var scale = transform(transformLog, transformExp),\n      domain = scale.domain,\n      base = 10,\n      logs,\n      pows;\n    function rescale() {\n      logs = logp(base), pows = powp(base);\n      if (domain()[0] < 0) {\n        logs = reflect(logs), pows = reflect(pows);\n        transform(transformLogn, transformExpn);\n      } else {\n        transform(transformLog, transformExp);\n      }\n      return scale;\n    }\n    scale.base = function (_) {\n      return arguments.length ? (base = +_, rescale()) : base;\n    };\n    scale.domain = function (_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n    scale.ticks = function (count) {\n      var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n      if (r = v < u) i = u, u = v, v = i;\n      var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n      if (!(base % 1) && j - i < n) {\n        i = Math.floor(i), j = Math.ceil(j);\n        if (u > 0) for (; i <= j; ++i) {\n          for (k = 1, p = pows(i); k < base; ++k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        } else for (; i <= j; ++i) {\n          for (k = base - 1, p = pows(i); k >= 1; --k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        }\n        if (z.length * 2 < n) z = d3Array.ticks(u, v, n);\n      } else {\n        z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);\n      }\n      return r ? z.reverse() : z;\n    };\n    scale.tickFormat = function (count, specifier) {\n      if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n      if (typeof specifier !== \"function\") specifier = d3Format.format(specifier);\n      if (count === Infinity) return specifier;\n      if (count == null) count = 10;\n      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n      return function (d) {\n        var i = d / pows(Math.round(logs(d)));\n        if (i * base < base - 0.5) i *= base;\n        return i <= k ? specifier(d) : \"\";\n      };\n    };\n    scale.nice = function () {\n      return domain(nice(domain(), {\n        floor: function (x) {\n          return pows(Math.floor(logs(x)));\n        },\n        ceil: function (x) {\n          return pows(Math.ceil(logs(x)));\n        }\n      }));\n    };\n    return scale;\n  }\n  function log() {\n    var scale = loggish(transformer$2()).domain([1, 10]);\n    scale.copy = function () {\n      return copy$1(scale, log()).base(scale.base());\n    };\n    initRange.apply(scale, arguments);\n    return scale;\n  }\n  function transformSymlog(c) {\n    return function (x) {\n      return Math.sign(x) * Math.log1p(Math.abs(x / c));\n    };\n  }\n  function transformSymexp(c) {\n    return function (x) {\n      return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n    };\n  }\n  function symlogish(transform) {\n    var c = 1,\n      scale = transform(transformSymlog(c), transformSymexp(c));\n    scale.constant = function (_) {\n      return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n    };\n    return linearish(scale);\n  }\n  function symlog() {\n    var scale = symlogish(transformer$2());\n    scale.copy = function () {\n      return copy$1(scale, symlog()).constant(scale.constant());\n    };\n    return initRange.apply(scale, arguments);\n  }\n  function transformPow(exponent) {\n    return function (x) {\n      return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n    };\n  }\n  function transformSqrt(x) {\n    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\n  }\n  function transformSquare(x) {\n    return x < 0 ? -x * x : x * x;\n  }\n  function powish(transform) {\n    var scale = transform(identity$1, identity$1),\n      exponent = 1;\n    function rescale() {\n      return exponent === 1 ? transform(identity$1, identity$1) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));\n    }\n    scale.exponent = function (_) {\n      return arguments.length ? (exponent = +_, rescale()) : exponent;\n    };\n    return linearish(scale);\n  }\n  function pow() {\n    var scale = powish(transformer$2());\n    scale.copy = function () {\n      return copy$1(scale, pow()).exponent(scale.exponent());\n    };\n    initRange.apply(scale, arguments);\n    return scale;\n  }\n  function sqrt() {\n    return pow.apply(null, arguments).exponent(0.5);\n  }\n  function square(x) {\n    return Math.sign(x) * x * x;\n  }\n  function unsquare(x) {\n    return Math.sign(x) * Math.sqrt(Math.abs(x));\n  }\n  function radial() {\n    var squared = continuous(),\n      range = [0, 1],\n      round = false,\n      unknown;\n    function scale(x) {\n      var y = unsquare(squared(x));\n      return isNaN(y) ? unknown : round ? Math.round(y) : y;\n    }\n    scale.invert = function (y) {\n      return squared.invert(square(y));\n    };\n    scale.domain = function (_) {\n      return arguments.length ? (squared.domain(_), scale) : squared.domain();\n    };\n    scale.range = function (_) {\n      return arguments.length ? (squared.range((range = Array.from(_, number$1)).map(square)), scale) : range.slice();\n    };\n    scale.rangeRound = function (_) {\n      return scale.range(_).round(true);\n    };\n    scale.round = function (_) {\n      return arguments.length ? (round = !!_, scale) : round;\n    };\n    scale.clamp = function (_) {\n      return arguments.length ? (squared.clamp(_), scale) : squared.clamp();\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    scale.copy = function () {\n      return radial(squared.domain(), range).round(round).clamp(squared.clamp()).unknown(unknown);\n    };\n    initRange.apply(scale, arguments);\n    return linearish(scale);\n  }\n  function quantile() {\n    var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n    function rescale() {\n      var i = 0,\n        n = Math.max(1, range.length);\n      thresholds = new Array(n - 1);\n      while (++i < n) thresholds[i - 1] = d3Array.quantileSorted(domain, i / n);\n      return scale;\n    }\n    function scale(x) {\n      return x == null || isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];\n    }\n    scale.invertExtent = function (y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];\n    };\n    scale.domain = function (_) {\n      if (!arguments.length) return domain.slice();\n      domain = [];\n      for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n      domain.sort(d3Array.ascending);\n      return rescale();\n    };\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    scale.quantiles = function () {\n      return thresholds.slice();\n    };\n    scale.copy = function () {\n      return quantile().domain(domain).range(range).unknown(unknown);\n    };\n    return initRange.apply(scale, arguments);\n  }\n  function quantize() {\n    var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n    function scale(x) {\n      return x != null && x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;\n    }\n    function rescale() {\n      var i = -1;\n      domain = new Array(n);\n      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n      return scale;\n    }\n    scale.domain = function (_) {\n      return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];\n    };\n    scale.range = function (_) {\n      return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();\n    };\n    scale.invertExtent = function (y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : scale;\n    };\n    scale.thresholds = function () {\n      return domain.slice();\n    };\n    scale.copy = function () {\n      return quantize().domain([x0, x1]).range(range).unknown(unknown);\n    };\n    return initRange.apply(linearish(scale), arguments);\n  }\n  function threshold() {\n    var domain = [0.5],\n      range = [0, 1],\n      unknown,\n      n = 1;\n    function scale(x) {\n      return x != null && x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;\n    }\n    scale.domain = function (_) {\n      return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n    };\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n    };\n    scale.invertExtent = function (y) {\n      var i = range.indexOf(y);\n      return [domain[i - 1], domain[i]];\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    scale.copy = function () {\n      return threshold().domain(domain).range(range).unknown(unknown);\n    };\n    return initRange.apply(scale, arguments);\n  }\n  function date(t) {\n    return new Date(t);\n  }\n  function number(t) {\n    return t instanceof Date ? +t : +new Date(+t);\n  }\n  function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {\n    var scale = continuous(),\n      invert = scale.invert,\n      domain = scale.domain;\n    var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n    function tickFormat(date) {\n      return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);\n    }\n    scale.invert = function (y) {\n      return new Date(invert(y));\n    };\n    scale.domain = function (_) {\n      return arguments.length ? domain(Array.from(_, number)) : domain().map(date);\n    };\n    scale.ticks = function (interval) {\n      var d = domain();\n      return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);\n    };\n    scale.tickFormat = function (count, specifier) {\n      return specifier == null ? tickFormat : format(specifier);\n    };\n    scale.nice = function (interval) {\n      var d = domain();\n      if (!interval || typeof interval.range !== \"function\") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);\n      return interval ? domain(nice(d, interval)) : scale;\n    };\n    scale.copy = function () {\n      return copy$1(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));\n    };\n    return scale;\n  }\n  function time() {\n    return initRange.apply(calendar(d3Time.timeTicks, d3Time.timeTickInterval, d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n  }\n  function utcTime() {\n    return initRange.apply(calendar(d3Time.utcTicks, d3Time.utcTickInterval, d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\n  }\n  function transformer$1() {\n    var x0 = 0,\n      x1 = 1,\n      t0,\n      t1,\n      k10,\n      transform,\n      interpolator = identity$1,\n      clamp = false,\n      unknown;\n    function scale(x) {\n      return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n    }\n    scale.domain = function (_) {\n      return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n    };\n    scale.clamp = function (_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n    scale.interpolator = function (_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n    function range(interpolate) {\n      return function (_) {\n        var r0, r1;\n        return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];\n      };\n    }\n    scale.range = range(d3Interpolate.interpolate);\n    scale.rangeRound = range(d3Interpolate.interpolateRound);\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    return function (t) {\n      transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n      return scale;\n    };\n  }\n  function copy(source, target) {\n    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());\n  }\n  function sequential() {\n    var scale = linearish(transformer$1()(identity$1));\n    scale.copy = function () {\n      return copy(scale, sequential());\n    };\n    return initInterpolator.apply(scale, arguments);\n  }\n  function sequentialLog() {\n    var scale = loggish(transformer$1()).domain([1, 10]);\n    scale.copy = function () {\n      return copy(scale, sequentialLog()).base(scale.base());\n    };\n    return initInterpolator.apply(scale, arguments);\n  }\n  function sequentialSymlog() {\n    var scale = symlogish(transformer$1());\n    scale.copy = function () {\n      return copy(scale, sequentialSymlog()).constant(scale.constant());\n    };\n    return initInterpolator.apply(scale, arguments);\n  }\n  function sequentialPow() {\n    var scale = powish(transformer$1());\n    scale.copy = function () {\n      return copy(scale, sequentialPow()).exponent(scale.exponent());\n    };\n    return initInterpolator.apply(scale, arguments);\n  }\n  function sequentialSqrt() {\n    return sequentialPow.apply(null, arguments).exponent(0.5);\n  }\n  function sequentialQuantile() {\n    var domain = [],\n      interpolator = identity$1;\n    function scale(x) {\n      if (x != null && !isNaN(x = +x)) return interpolator((d3Array.bisect(domain, x, 1) - 1) / (domain.length - 1));\n    }\n    scale.domain = function (_) {\n      if (!arguments.length) return domain.slice();\n      domain = [];\n      for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n      domain.sort(d3Array.ascending);\n      return scale;\n    };\n    scale.interpolator = function (_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n    scale.range = function () {\n      return domain.map((d, i) => interpolator(i / (domain.length - 1)));\n    };\n    scale.quantiles = function (n) {\n      return Array.from({\n        length: n + 1\n      }, (_, i) => d3Array.quantile(domain, i / n));\n    };\n    scale.copy = function () {\n      return sequentialQuantile(interpolator).domain(domain);\n    };\n    return initInterpolator.apply(scale, arguments);\n  }\n  function transformer() {\n    var x0 = 0,\n      x1 = 0.5,\n      x2 = 1,\n      s = 1,\n      t0,\n      t1,\n      t2,\n      k10,\n      k21,\n      interpolator = identity$1,\n      transform,\n      clamp = false,\n      unknown;\n    function scale(x) {\n      return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n    }\n    scale.domain = function (_) {\n      return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];\n    };\n    scale.clamp = function (_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n    scale.interpolator = function (_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n    function range(interpolate) {\n      return function (_) {\n        var r0, r1, r2;\n        return arguments.length ? ([r0, r1, r2] = _, interpolator = d3Interpolate.piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];\n      };\n    }\n    scale.range = range(d3Interpolate.interpolate);\n    scale.rangeRound = range(d3Interpolate.interpolateRound);\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    return function (t) {\n      transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;\n      return scale;\n    };\n  }\n  function diverging() {\n    var scale = linearish(transformer()(identity$1));\n    scale.copy = function () {\n      return copy(scale, diverging());\n    };\n    return initInterpolator.apply(scale, arguments);\n  }\n  function divergingLog() {\n    var scale = loggish(transformer()).domain([0.1, 1, 10]);\n    scale.copy = function () {\n      return copy(scale, divergingLog()).base(scale.base());\n    };\n    return initInterpolator.apply(scale, arguments);\n  }\n  function divergingSymlog() {\n    var scale = symlogish(transformer());\n    scale.copy = function () {\n      return copy(scale, divergingSymlog()).constant(scale.constant());\n    };\n    return initInterpolator.apply(scale, arguments);\n  }\n  function divergingPow() {\n    var scale = powish(transformer());\n    scale.copy = function () {\n      return copy(scale, divergingPow()).exponent(scale.exponent());\n    };\n    return initInterpolator.apply(scale, arguments);\n  }\n  function divergingSqrt() {\n    return divergingPow.apply(null, arguments).exponent(0.5);\n  }\n  exports.scaleBand = band;\n  exports.scaleDiverging = diverging;\n  exports.scaleDivergingLog = divergingLog;\n  exports.scaleDivergingPow = divergingPow;\n  exports.scaleDivergingSqrt = divergingSqrt;\n  exports.scaleDivergingSymlog = divergingSymlog;\n  exports.scaleIdentity = identity;\n  exports.scaleImplicit = implicit;\n  exports.scaleLinear = linear;\n  exports.scaleLog = log;\n  exports.scaleOrdinal = ordinal;\n  exports.scalePoint = point;\n  exports.scalePow = pow;\n  exports.scaleQuantile = quantile;\n  exports.scaleQuantize = quantize;\n  exports.scaleRadial = radial;\n  exports.scaleSequential = sequential;\n  exports.scaleSequentialLog = sequentialLog;\n  exports.scaleSequentialPow = sequentialPow;\n  exports.scaleSequentialQuantile = sequentialQuantile;\n  exports.scaleSequentialSqrt = sequentialSqrt;\n  exports.scaleSequentialSymlog = sequentialSymlog;\n  exports.scaleSqrt = sqrt;\n  exports.scaleSymlog = symlog;\n  exports.scaleThreshold = threshold;\n  exports.scaleTime = time;\n  exports.scaleUtc = utcTime;\n  exports.tickFormat = tickFormat;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["global","factory","exports","module","require","define","amd","globalThis","self","d3","d3Array","d3Interpolate","d3Format","d3Time","d3TimeFormat","initRange","domain","range","arguments","length","initInterpolator","interpolator","implicit","Symbol","ordinal","index","Map","unknown","scale","d","key","i","get","set","push","_","slice","value","has","Array","from","copy","apply","band","undefined","ordinalRange","r0","r1","step","bandwidth","round","paddingInner","paddingOuter","align","rescale","n","reverse","start","stop","Math","max","floor","values","map","rangeRound","padding","min","pointish","point","constants","x","number$1","unit","identity$1","normalize","a","b","isNaN","NaN","clamper","t","bimap","interpolate","d0","d1","polymap","j","r","bisect","copy$1","source","target","clamp","transformer$2","transform","untransform","piecewise","output","input","invert","y","interpolateNumber","interpolateRound","u","continuous","tickFormat","count","specifier","tickStep","precision","formatSpecifier","type","abs","precisionPrefix","formatPrefix","precisionRound","precisionFixed","format","linearish","ticks","nice","i0","i1","prestep","maxIter","tickIncrement","ceil","linear","identity","interval","x0","x1","transformLog","log","transformExp","exp","transformLogn","transformExpn","pow10","isFinite","powp","base","E","pow","logp","log10","log2","reflect","f","loggish","logs","pows","v","p","k","z","Infinity","transformSymlog","c","sign","log1p","transformSymexp","expm1","symlogish","constant","symlog","transformPow","exponent","transformSqrt","sqrt","transformSquare","powish","square","unsquare","radial","squared","quantile","thresholds","quantileSorted","invertExtent","indexOf","sort","ascending","quantiles","quantize","threshold","date","Date","number","calendar","tickInterval","year","month","week","day","hour","minute","second","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatWeek","formatMonth","formatYear","time","timeTicks","timeTickInterval","timeYear","timeMonth","timeWeek","timeDay","timeHour","timeMinute","timeSecond","timeFormat","utcTime","utcTicks","utcTickInterval","utcYear","utcMonth","utcWeek","utcDay","utcHour","utcMinute","utcSecond","utcFormat","UTC","transformer$1","t0","t1","k10","sequential","sequentialLog","sequentialSymlog","sequentialPow","sequentialSqrt","sequentialQuantile","transformer","x2","s","t2","k21","r2","diverging","divergingLog","divergingSymlog","divergingPow","divergingSqrt","scaleBand","scaleDiverging","scaleDivergingLog","scaleDivergingPow","scaleDivergingSqrt","scaleDivergingSymlog","scaleIdentity","scaleImplicit","scaleLinear","scaleLog","scaleOrdinal","scalePoint","scalePow","scaleQuantile","scaleQuantize","scaleRadial","scaleSequential","scaleSequentialLog","scaleSequentialPow","scaleSequentialQuantile","scaleSequentialSqrt","scaleSequentialSymlog","scaleSqrt","scaleSymlog","scaleThreshold","scaleTime","scaleUtc","Object","defineProperty"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontend/node_modules/d3-scale/dist/d3-scale.js"],"sourcesContent":["// https://d3js.org/d3-scale/ v3.3.0 Copyright 2021 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-interpolate'), require('d3-format'), require('d3-time'), require('d3-time-format')) :\ntypeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format'], factory) :\n(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3));\n}(this, (function (exports, d3Array, d3Interpolate, d3Format, d3Time, d3TimeFormat) { 'use strict';\n\nfunction initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nfunction initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n\nconst implicit = Symbol(\"implicit\");\n\nfunction ordinal() {\n  var index = new Map(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    var key = d + \"\", i = index.get(key);\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new Map();\n    for (const value of _) {\n      const key = value + \"\";\n      if (index.has(key)) continue;\n      index.set(key, domain.push(value));\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nfunction band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      r0 = 0,\n      r1 = 1,\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = r1 < r0,\n        start = reverse ? r1 : r0,\n        stop = reverse ? r0 : r1;\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = d3Array.range(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\n  };\n\n  scale.rangeRound = function(_) {\n    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), [r0, r1])\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nfunction point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n\nfunction constants(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction number$1(x) {\n  return +x;\n}\n\nvar unit = [0, 1];\n\nfunction identity$1(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constants(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = d3Array.bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nfunction copy$1(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nfunction transformer$2() {\n  var domain = unit,\n      range = unit,\n      interpolate = d3Interpolate.interpolate,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity$1,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity$1) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = d3Interpolate.interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nfunction continuous() {\n  return transformer$2()(identity$1, identity$1);\n}\n\nfunction tickFormat(start, stop, count, specifier) {\n  var step = d3Array.tickStep(start, stop, count),\n      precision;\n  specifier = d3Format.formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;\n      return d3Format.formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return d3Format.format(specifier);\n}\n\nfunction linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = d3Array.tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start;\n        d[i1] = stop;\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nfunction linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy$1(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n\nfunction identity(domain) {\n  var unknown;\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = Array.from(_, number$1), scale) : domain.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return identity(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? Array.from(domain, number$1) : [0, 1];\n\n  return linearish(scale);\n}\n\nfunction nice(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : function(x) { return Math.pow(base, x); };\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n}\n\nfunction reflect(f) {\n  return function(x) {\n    return -f(-x);\n  };\n}\n\nfunction loggish(transform) {\n  var scale = transform(transformLog, transformExp),\n      domain = scale.domain,\n      base = 10,\n      logs,\n      pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = function(count) {\n    var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n\n    if (r = v < u) i = u, u = v, v = i;\n\n    var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.floor(i), j = Math.ceil(j);\n      if (u > 0) for (; i <= j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i <= j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n      if (z.length * 2 < n) z = d3Array.ticks(u, v, n);\n    } else {\n      z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n    if (typeof specifier !== \"function\") specifier = d3Format.format(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return function(d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = function() {\n    return domain(nice(domain(), {\n      floor: function(x) { return pows(Math.floor(logs(x))); },\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\n    }));\n  };\n\n  return scale;\n}\n\nfunction log() {\n  var scale = loggish(transformer$2()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy$1(scale, log()).base(scale.base());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nfunction transformSymlog(c) {\n  return function(x) {\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\n  };\n}\n\nfunction transformSymexp(c) {\n  return function(x) {\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n  };\n}\n\nfunction symlogish(transform) {\n  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\n\n  scale.constant = function(_) {\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n  };\n\n  return linearish(scale);\n}\n\nfunction symlog() {\n  var scale = symlogish(transformer$2());\n\n  scale.copy = function() {\n    return copy$1(scale, symlog()).constant(scale.constant());\n  };\n\n  return initRange.apply(scale, arguments);\n}\n\nfunction transformPow(exponent) {\n  return function(x) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  };\n}\n\nfunction transformSqrt(x) {\n  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\n}\n\nfunction transformSquare(x) {\n  return x < 0 ? -x * x : x * x;\n}\n\nfunction powish(transform) {\n  var scale = transform(identity$1, identity$1),\n      exponent = 1;\n\n  function rescale() {\n    return exponent === 1 ? transform(identity$1, identity$1)\n        : exponent === 0.5 ? transform(transformSqrt, transformSquare)\n        : transform(transformPow(exponent), transformPow(1 / exponent));\n  }\n\n  scale.exponent = function(_) {\n    return arguments.length ? (exponent = +_, rescale()) : exponent;\n  };\n\n  return linearish(scale);\n}\n\nfunction pow() {\n  var scale = powish(transformer$2());\n\n  scale.copy = function() {\n    return copy$1(scale, pow()).exponent(scale.exponent());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nfunction sqrt() {\n  return pow.apply(null, arguments).exponent(0.5);\n}\n\nfunction square(x) {\n  return Math.sign(x) * x * x;\n}\n\nfunction unsquare(x) {\n  return Math.sign(x) * Math.sqrt(Math.abs(x));\n}\n\nfunction radial() {\n  var squared = continuous(),\n      range = [0, 1],\n      round = false,\n      unknown;\n\n  function scale(x) {\n    var y = unsquare(squared(x));\n    return isNaN(y) ? unknown : round ? Math.round(y) : y;\n  }\n\n  scale.invert = function(y) {\n    return squared.invert(square(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (squared.domain(_), scale) : squared.domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (squared.range((range = Array.from(_, number$1)).map(square)), scale) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return scale.range(_).round(true);\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, scale) : round;\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (squared.clamp(_), scale) : squared.clamp();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return radial(squared.domain(), range)\n        .round(round)\n        .clamp(squared.clamp())\n        .unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n\nfunction quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = d3Array.quantileSorted(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(d3Array.ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n\nfunction quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n\n  function scale(x) {\n    return x != null && x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN]\n        : i < 1 ? [x0, domain[0]]\n        : i >= n ? [domain[n - 1], x1]\n        : [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : scale;\n  };\n\n  scale.thresholds = function() {\n    return domain.slice();\n  };\n\n  scale.copy = function() {\n    return quantize()\n        .domain([x0, x1])\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(linearish(scale), arguments);\n}\n\nfunction threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      unknown,\n      n = 1;\n\n  function scale(x) {\n    return x != null && x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return threshold()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nfunction calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {\n  var scale = continuous(),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval) {\n    var d = domain();\n    if (!interval || typeof interval.range !== \"function\") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);\n    return interval ? domain(nice(d, interval)) : scale;\n  };\n\n  scale.copy = function() {\n    return copy$1(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));\n  };\n\n  return scale;\n}\n\nfunction time() {\n  return initRange.apply(calendar(d3Time.timeTicks, d3Time.timeTickInterval, d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n}\n\nfunction utcTime() {\n  return initRange.apply(calendar(d3Time.utcTicks, d3Time.utcTickInterval, d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\n}\n\nfunction transformer$1() {\n  var x0 = 0,\n      x1 = 1,\n      t0,\n      t1,\n      k10,\n      transform,\n      interpolator = identity$1,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  function range(interpolate) {\n    return function(_) {\n      var r0, r1;\n      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];\n    };\n  }\n\n  scale.range = range(d3Interpolate.interpolate);\n\n  scale.rangeRound = range(d3Interpolate.interpolateRound);\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n    return scale;\n  };\n}\n\nfunction copy(source, target) {\n  return target\n      .domain(source.domain())\n      .interpolator(source.interpolator())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nfunction sequential() {\n  var scale = linearish(transformer$1()(identity$1));\n\n  scale.copy = function() {\n    return copy(scale, sequential());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialLog() {\n  var scale = loggish(transformer$1()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, sequentialLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialSymlog() {\n  var scale = symlogish(transformer$1());\n\n  scale.copy = function() {\n    return copy(scale, sequentialSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialPow() {\n  var scale = powish(transformer$1());\n\n  scale.copy = function() {\n    return copy(scale, sequentialPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialSqrt() {\n  return sequentialPow.apply(null, arguments).exponent(0.5);\n}\n\nfunction sequentialQuantile() {\n  var domain = [],\n      interpolator = identity$1;\n\n  function scale(x) {\n    if (x != null && !isNaN(x = +x)) return interpolator((d3Array.bisect(domain, x, 1) - 1) / (domain.length - 1));\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(d3Array.ascending);\n    return scale;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.range = function() {\n    return domain.map((d, i) => interpolator(i / (domain.length - 1)));\n  };\n\n  scale.quantiles = function(n) {\n    return Array.from({length: n + 1}, (_, i) => d3Array.quantile(domain, i / n));\n  };\n\n  scale.copy = function() {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction transformer() {\n  var x0 = 0,\n      x1 = 0.5,\n      x2 = 1,\n      s = 1,\n      t0,\n      t1,\n      t2,\n      k10,\n      k21,\n      interpolator = identity$1,\n      transform,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  function range(interpolate) {\n    return function(_) {\n      var r0, r1, r2;\n      return arguments.length ? ([r0, r1, r2] = _, interpolator = d3Interpolate.piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];\n    };\n  }\n\n  scale.range = range(d3Interpolate.interpolate);\n\n  scale.rangeRound = range(d3Interpolate.interpolateRound);\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;\n    return scale;\n  };\n}\n\nfunction diverging() {\n  var scale = linearish(transformer()(identity$1));\n\n  scale.copy = function() {\n    return copy(scale, diverging());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingLog() {\n  var scale = loggish(transformer()).domain([0.1, 1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, divergingLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingSymlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, divergingSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingPow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, divergingPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingSqrt() {\n  return divergingPow.apply(null, arguments).exponent(0.5);\n}\n\nexports.scaleBand = band;\nexports.scaleDiverging = diverging;\nexports.scaleDivergingLog = divergingLog;\nexports.scaleDivergingPow = divergingPow;\nexports.scaleDivergingSqrt = divergingSqrt;\nexports.scaleDivergingSymlog = divergingSymlog;\nexports.scaleIdentity = identity;\nexports.scaleImplicit = implicit;\nexports.scaleLinear = linear;\nexports.scaleLog = log;\nexports.scaleOrdinal = ordinal;\nexports.scalePoint = point;\nexports.scalePow = pow;\nexports.scaleQuantile = quantile;\nexports.scaleQuantize = quantize;\nexports.scaleRadial = radial;\nexports.scaleSequential = sequential;\nexports.scaleSequentialLog = sequentialLog;\nexports.scaleSequentialPow = sequentialPow;\nexports.scaleSequentialQuantile = sequentialQuantile;\nexports.scaleSequentialSqrt = sequentialSqrt;\nexports.scaleSequentialSymlog = sequentialSymlog;\nexports.scaleSqrt = sqrt;\nexports.scaleSymlog = symlog;\nexports.scaleThreshold = threshold;\nexports.scaleTime = time;\nexports.scaleUtc = utcTime;\nexports.tickFormat = tickFormat;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}