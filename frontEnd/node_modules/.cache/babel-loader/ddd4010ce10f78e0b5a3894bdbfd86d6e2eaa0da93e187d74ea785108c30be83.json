{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import Dygraph from'dygraphs';import\"../styling/TimeSeries.css\";import{jsx as _jsx}from\"react/jsx-runtime\";const TwitterTimeSeries=()=>{const graphRef=useRef(null);const[data,setData]=useState();const fetchTweets=()=>{fetch('/get_tweets',{'method':'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify([])}).then(response=>response.json()).then(data=>{setData(data);}).catch(error=>console.error(error));};useEffect(()=>{if(!data){fetchTweets();}},[data]);useEffect(()=>{if(graphRef.current&&data){const tweetCounts={};data.forEach(tweet=>{const date=new Date(tweet.time.$date);const dateString=date.toISOString().split('T')[0];// Extract YYYY-MM-DD\nif(!tweetCounts[dateString]){tweetCounts[dateString]=0;}tweetCounts[dateString]++;});const dyData=Object.entries(tweetCounts).map(_ref=>{let[date,count]=_ref;return{date:new Date(date),count};});dyData.sort((a,b)=>a.date-b.date);const formattedData=dyData.map(_ref2=>{let{date,count}=_ref2;return[date,count];});new Dygraph(graphRef.current,formattedData,{labels:['Date','Tweet Count'],showRoller:false,rollPeriod:0,width:650,height:550});}},[data]);return/*#__PURE__*/_jsx(\"div\",{ref:graphRef,style:{width:'100%',height:'100%'}});};export default TwitterTimeSeries;","map":{"version":3,"names":["React","useEffect","useRef","useState","Dygraph","jsx","_jsx","TwitterTimeSeries","graphRef","data","setData","fetchTweets","fetch","headers","body","JSON","stringify","then","response","json","catch","error","console","current","tweetCounts","forEach","tweet","date","Date","time","$date","dateString","toISOString","split","dyData","Object","entries","map","_ref","count","sort","a","b","formattedData","_ref2","labels","showRoller","rollPeriod","width","height","ref","style"],"sources":["/Users/fneffati/Documents/Classes/TBENVDASH/frontEnd/tbenv/src/components/TimeSeries.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport Dygraph from 'dygraphs';\nimport \"../styling/TimeSeries.css\"\n\nconst TwitterTimeSeries = () => {\n    const graphRef = useRef(null);\n\n    const [data, setData] = useState()\n\n    const fetchTweets = () => {\n        fetch('/get_tweets',\n            {\n                'method':'POST',\n                headers : {\n                    'Content-Type':'application/json'\n                },\n                body: JSON.stringify([])\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                setData(data);\n            })\n            .catch((error) => console.error(error));\n    };\n\n    useEffect(() =>{\n        if (!data){\n            fetchTweets()\n        }\n    },[data])\n\n    useEffect(() => {\n        if (graphRef.current && data) {\n            const tweetCounts = {};\n            data.forEach((tweet) => {\n                const date = new Date(tweet.time.$date);\n                const dateString = date.toISOString().split('T')[0]; // Extract YYYY-MM-DD\n                if (!tweetCounts[dateString]) {\n                    tweetCounts[dateString] = 0;\n                }\n                tweetCounts[dateString]++;\n            });\n\n            const dyData = Object.entries(tweetCounts).map(([date, count]) => ({ date: new Date(date), count }));\n\n            dyData.sort((a, b) => a.date - b.date);\n\n            const formattedData = dyData.map(({ date, count }) => [date, count]);\n\n            new Dygraph(graphRef.current, formattedData, {\n                labels: ['Date', 'Tweet Count'],\n                showRoller: false,\n                rollPeriod: 0,\n                width: 650,\n                height: 550\n            });\n        }\n    }, [data]);\n\n\n\n    return <div ref={graphRef} style={{width:'100%', height:'100%'}}></div>;\n\n};\n\nexport default TwitterTimeSeries;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAO,OAAO,CACxD,MAAO,CAAAC,OAAO,KAAM,UAAU,CAC9B,MAAO,2BAA2B,QAAAC,GAAA,IAAAC,IAAA,yBAElC,KAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,QAAQ,CAAGN,MAAM,CAAC,IAAI,CAAC,CAE7B,KAAM,CAACO,IAAI,CAAEC,OAAO,CAAC,CAAGP,QAAQ,CAAC,CAAC,CAElC,KAAM,CAAAQ,WAAW,CAAGA,CAAA,GAAM,CACtBC,KAAK,CAAC,aAAa,CACf,CACI,QAAQ,CAAC,MAAM,CACfC,OAAO,CAAG,CACN,cAAc,CAAC,kBACnB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,EAAE,CAC3B,CAAC,CAAC,CACDC,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAER,IAAI,EAAK,CACZC,OAAO,CAACD,IAAI,CAAC,CACjB,CAAC,CAAC,CACDW,KAAK,CAAEC,KAAK,EAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAC/C,CAAC,CAEDpB,SAAS,CAAC,IAAK,CACX,GAAI,CAACQ,IAAI,CAAC,CACNE,WAAW,CAAC,CAAC,CACjB,CACJ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAETR,SAAS,CAAC,IAAM,CACZ,GAAIO,QAAQ,CAACe,OAAO,EAAId,IAAI,CAAE,CAC1B,KAAM,CAAAe,WAAW,CAAG,CAAC,CAAC,CACtBf,IAAI,CAACgB,OAAO,CAAEC,KAAK,EAAK,CACpB,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACF,KAAK,CAACG,IAAI,CAACC,KAAK,CAAC,CACvC,KAAM,CAAAC,UAAU,CAAGJ,IAAI,CAACK,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE;AACrD,GAAI,CAACT,WAAW,CAACO,UAAU,CAAC,CAAE,CAC1BP,WAAW,CAACO,UAAU,CAAC,CAAG,CAAC,CAC/B,CACAP,WAAW,CAACO,UAAU,CAAC,EAAE,CAC7B,CAAC,CAAC,CAEF,KAAM,CAAAG,MAAM,CAAGC,MAAM,CAACC,OAAO,CAACZ,WAAW,CAAC,CAACa,GAAG,CAACC,IAAA,MAAC,CAACX,IAAI,CAAEY,KAAK,CAAC,CAAAD,IAAA,OAAM,CAAEX,IAAI,CAAE,GAAI,CAAAC,IAAI,CAACD,IAAI,CAAC,CAAEY,KAAM,CAAC,EAAC,CAAC,CAEpGL,MAAM,CAACM,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAACd,IAAI,CAAGe,CAAC,CAACf,IAAI,CAAC,CAEtC,KAAM,CAAAgB,aAAa,CAAGT,MAAM,CAACG,GAAG,CAACO,KAAA,MAAC,CAAEjB,IAAI,CAAEY,KAAM,CAAC,CAAAK,KAAA,OAAK,CAACjB,IAAI,CAAEY,KAAK,CAAC,GAAC,CAEpE,GAAI,CAAAnC,OAAO,CAACI,QAAQ,CAACe,OAAO,CAAEoB,aAAa,CAAE,CACzCE,MAAM,CAAE,CAAC,MAAM,CAAE,aAAa,CAAC,CAC/BC,UAAU,CAAE,KAAK,CACjBC,UAAU,CAAE,CAAC,CACbC,KAAK,CAAE,GAAG,CACVC,MAAM,CAAE,GACZ,CAAC,CAAC,CACN,CACJ,CAAC,CAAE,CAACxC,IAAI,CAAC,CAAC,CAIV,mBAAOH,IAAA,QAAK4C,GAAG,CAAE1C,QAAS,CAAC2C,KAAK,CAAE,CAACH,KAAK,CAAC,MAAM,CAAEC,MAAM,CAAC,MAAM,CAAE,CAAM,CAAC,CAE3E,CAAC,CAED,cAAe,CAAA1C,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}