{"ast":null,"code":"/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview DataHandler implementation for the fractions option.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n/*global Dygraph:false */\n\"use strict\";\n\nimport DygraphDataHandler from './datahandler';\nimport DefaultHandler from './default';\n\n/**\n * @extends DefaultHandler\n * @constructor\n */\nvar DefaultFractionHandler = function () {};\nDefaultFractionHandler.prototype = new DefaultHandler();\nDefaultFractionHandler.prototype.extractSeries = function (rawData, i, options) {\n  // TODO(danvk): pre-allocate series here.\n  var series = [];\n  var x, y, point, num, den, value;\n  var mult = 100.0;\n  const seriesLabel = options.get(\"labels\")[i];\n  const logScale = options.getForSeries(\"logscale\", seriesLabel);\n  for (var j = 0; j < rawData.length; j++) {\n    x = rawData[j][0];\n    point = rawData[j][i];\n    if (logScale && point !== null) {\n      // On the log scale, points less than zero do not exist.\n      // This will create a gap in the chart.\n      if (point[0] <= 0 || point[1] <= 0) {\n        point = null;\n      }\n    }\n    // Extract to the unified data format.\n    if (point !== null) {\n      num = point[0];\n      den = point[1];\n      if (num !== null && !isNaN(num)) {\n        value = den ? num / den : 0.0;\n        y = mult * value;\n        // preserve original values in extras for further filtering\n        series.push([x, y, [num, den]]);\n      } else {\n        series.push([x, num, [num, den]]);\n      }\n    } else {\n      series.push([x, null, [null, null]]);\n    }\n  }\n  return series;\n};\nDefaultFractionHandler.prototype.rollingAverage = function (originalData, rollPeriod, options, i) {\n  rollPeriod = Math.min(rollPeriod, originalData.length);\n  var rollingData = [];\n  var i;\n  var num = 0;\n  var den = 0; // numerator/denominator\n  var mult = 100.0;\n  for (i = 0; i < originalData.length; i++) {\n    num += originalData[i][2][0];\n    den += originalData[i][2][1];\n    if (i - rollPeriod >= 0) {\n      num -= originalData[i - rollPeriod][2][0];\n      den -= originalData[i - rollPeriod][2][1];\n    }\n    var date = originalData[i][0];\n    var value = den ? num / den : 0.0;\n    rollingData[i] = [date, mult * value];\n  }\n  return rollingData;\n};\nexport default DefaultFractionHandler;","map":{"version":3,"names":["DygraphDataHandler","DefaultHandler","DefaultFractionHandler","prototype","extractSeries","rawData","i","options","series","x","y","point","num","den","value","mult","seriesLabel","get","logScale","getForSeries","j","length","isNaN","push","rollingAverage","originalData","rollPeriod","Math","min","rollingData","date"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontend/node_modules/dygraphs/src/datahandler/default-fractions.js"],"sourcesContent":["/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview DataHandler implementation for the fractions option.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n/*global Dygraph:false */\n\"use strict\";\n\nimport DygraphDataHandler from './datahandler';\nimport DefaultHandler from './default';\n\n/**\n * @extends DefaultHandler\n * @constructor\n */\nvar DefaultFractionHandler = function() {\n};\n\nDefaultFractionHandler.prototype = new DefaultHandler();\n\nDefaultFractionHandler.prototype.extractSeries = function(rawData, i, options) {\n  // TODO(danvk): pre-allocate series here.\n  var series = [];\n  var x, y, point, num, den, value;\n  var mult = 100.0;\n  const seriesLabel = options.get(\"labels\")[i];\n  const logScale = options.getForSeries(\"logscale\", seriesLabel);\n  for ( var j = 0; j < rawData.length; j++) {\n    x = rawData[j][0];\n    point = rawData[j][i];\n    if (logScale && point !== null) {\n      // On the log scale, points less than zero do not exist.\n      // This will create a gap in the chart.\n      if (point[0] <= 0 || point[1] <= 0) {\n        point = null;\n      }\n    }\n    // Extract to the unified data format.\n    if (point !== null) {\n      num = point[0];\n      den = point[1];\n      if (num !== null && !isNaN(num)) {\n        value = den ? num / den : 0.0;\n        y = mult * value;\n        // preserve original values in extras for further filtering\n        series.push([ x, y, [ num, den ] ]);\n      } else {\n        series.push([ x, num, [ num, den ] ]);\n      }\n    } else {\n      series.push([ x, null, [ null, null ] ]);\n    }\n  }\n  return series;\n};\n\nDefaultFractionHandler.prototype.rollingAverage = function(originalData, rollPeriod,\n    options, i) {\n  rollPeriod = Math.min(rollPeriod, originalData.length);\n  var rollingData = [];\n\n  var i;\n  var num = 0;\n  var den = 0; // numerator/denominator\n  var mult = 100.0;\n  for (i = 0; i < originalData.length; i++) {\n    num += originalData[i][2][0];\n    den += originalData[i][2][1];\n    if (i - rollPeriod >= 0) {\n      num -= originalData[i - rollPeriod][2][0];\n      den -= originalData[i - rollPeriod][2][1];\n    }\n\n    var date = originalData[i][0];\n    var value = den ? num / den : 0.0;\n    rollingData[i] = [ date, mult * value ];\n  }\n\n  return rollingData;\n};\n\nexport default DefaultFractionHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}