{"ast":null,"code":"/**\n * @license\n * Copyright 2011 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview Description of this file.\n * @author danvk@google.com (Dan Vanderkam)\n */\n\n/*\n * A ticker is a function with the following interface:\n *\n * function(a, b, pixels, options_view, dygraph, forced_values);\n * -> [ { v: tick1_v, label: tick1_label[, label_v: label_v1] },\n *      { v: tick2_v, label: tick2_label[, label_v: label_v2] },\n *      ...\n *    ]\n *\n * The returned value is called a \"tick list\".\n *\n * Arguments\n * ---------\n *\n * [a, b] is the range of the axis for which ticks are being generated. For a\n * numeric axis, these will simply be numbers. For a date axis, these will be\n * millis since epoch (convertable to Date objects using \"new Date(a)\" and \"new\n * Date(b)\").\n *\n * opts provides access to chart- and axis-specific options. It can be used to\n * access number/date formatting code/options, check for a log scale, etc.\n *\n * pixels is the length of the axis in pixels. opts('pixelsPerLabel') is the\n * minimum amount of space to be allotted to each label. For instance, if\n * pixels=400 and opts('pixelsPerLabel')=40 then the ticker should return\n * between zero and ten (400/40) ticks.\n *\n * dygraph is the Dygraph object for which an axis is being constructed.\n *\n * forced_values is used for secondary y-axes. The tick positions are typically\n * set by the primary y-axis, so the secondary y-axis has no choice in where to\n * put these. It simply has to generate labels for these data values.\n *\n * Tick lists\n * ----------\n * Typically a tick will have both a grid/tick line and a label at one end of\n * that line (at the bottom for an x-axis, at left or right for the y-axis).\n *\n * A tick may be missing one of these two components:\n * - If \"label_v\" is specified instead of \"v\", then there will be no tick or\n *   gridline, just a label.\n * - Similarly, if \"label\" is not specified, then there will be a gridline\n *   without a label.\n *\n * This flexibility is useful in a few situations:\n * - For log scales, some of the tick lines may be too close to all have labels.\n * - For date scales where years are being displayed, it is desirable to display\n *   tick marks at the beginnings of years but labels (e.g. \"2006\") in the\n *   middle of the years.\n */\n\n/*jshint sub:true */\n/*global Dygraph:false */\n\"use strict\";\n\nimport * as utils from './dygraph-utils';\n\n/** @typedef {Array.<{v:number, label:string, label_v:(string|undefined)}>} */\nvar TickList = undefined; // the ' = undefined' keeps jshint happy.\n\n/** @typedef {function(\n *    number,\n *    number,\n *    number,\n *    function(string):*,\n *    Dygraph=,\n *    Array.<number>=\n *  ): TickList}\n */\nvar Ticker = undefined; // the ' = undefined' keeps jshint happy.\n\n/** @type {Ticker} */\nexport var numericLinearTicks = function (a, b, pixels, opts, dygraph, vals) {\n  var nonLogscaleOpts = function (opt) {\n    if (opt === 'logscale') return false;\n    return opts(opt);\n  };\n  return numericTicks(a, b, pixels, nonLogscaleOpts, dygraph, vals);\n};\n\n/** @type {Ticker} */\nexport var numericTicks = function (a, b, pixels, opts, dygraph, vals) {\n  var pixels_per_tick = /** @type{number} */opts('pixelsPerLabel');\n  var ticks = [];\n  var i, j, tickV, nTicks;\n  if (vals) {\n    for (i = 0; i < vals.length; i++) {\n      ticks.push({\n        v: vals[i]\n      });\n    }\n  } else {\n    // TODO(danvk): factor this log-scale block out into a separate function.\n    if (opts(\"logscale\")) {\n      nTicks = Math.floor(pixels / pixels_per_tick);\n      var minIdx = utils.binarySearch(a, PREFERRED_LOG_TICK_VALUES, 1);\n      var maxIdx = utils.binarySearch(b, PREFERRED_LOG_TICK_VALUES, -1);\n      if (minIdx == -1) {\n        minIdx = 0;\n      }\n      if (maxIdx == -1) {\n        maxIdx = PREFERRED_LOG_TICK_VALUES.length - 1;\n      }\n      // Count the number of tick values would appear, if we can get at least\n      // nTicks / 4 accept them.\n      var lastDisplayed = null;\n      if (maxIdx - minIdx >= nTicks / 4) {\n        for (var idx = maxIdx; idx >= minIdx; idx--) {\n          var tickValue = PREFERRED_LOG_TICK_VALUES[idx];\n          var pixel_coord = Math.log(tickValue / a) / Math.log(b / a) * pixels;\n          var tick = {\n            v: tickValue\n          };\n          if (lastDisplayed === null) {\n            lastDisplayed = {\n              tickValue: tickValue,\n              pixel_coord: pixel_coord\n            };\n          } else {\n            if (Math.abs(pixel_coord - lastDisplayed.pixel_coord) >= pixels_per_tick) {\n              lastDisplayed = {\n                tickValue: tickValue,\n                pixel_coord: pixel_coord\n              };\n            } else {\n              tick.label = \"\";\n            }\n          }\n          ticks.push(tick);\n        }\n        // Since we went in backwards order.\n        ticks.reverse();\n      }\n    }\n\n    // ticks.length won't be 0 if the log scale function finds values to insert.\n    if (ticks.length === 0) {\n      // Basic idea:\n      // Try labels every 1, 2, 5, 10, 20, 50, 100, etc.\n      // Calculate the resulting tick spacing (i.e. this.height_ / nTicks).\n      // The first spacing greater than pixelsPerYLabel is what we use.\n      // TODO(danvk): version that works on a log scale.\n      var kmg2 = opts(\"labelsKMG2\");\n      var mults, base;\n      if (kmg2) {\n        mults = [1, 2, 4, 8, 16, 32, 64, 128, 256];\n        base = 16;\n      } else {\n        mults = [1, 2, 5, 10, 20, 50, 100];\n        base = 10;\n      }\n\n      // Get the maximum number of permitted ticks based on the\n      // graph's pixel size and pixels_per_tick setting.\n      var max_ticks = Math.ceil(pixels / pixels_per_tick);\n\n      // Now calculate the data unit equivalent of this tick spacing.\n      // Use abs() since graphs may have a reversed Y axis.\n      var units_per_tick = Math.abs(b - a) / max_ticks;\n\n      // Based on this, get a starting scale which is the largest\n      // integer power of the chosen base (10 or 16) that still remains\n      // below the requested pixels_per_tick spacing.\n      var base_power = Math.floor(Math.log(units_per_tick) / Math.log(base));\n      var base_scale = Math.pow(base, base_power);\n\n      // Now try multiples of the starting scale until we find one\n      // that results in tick marks spaced sufficiently far apart.\n      // The \"mults\" array should cover the range 1 .. base^2 to\n      // adjust for rounding and edge effects.\n      var scale, low_val, high_val, spacing;\n      for (j = 0; j < mults.length; j++) {\n        scale = base_scale * mults[j];\n        low_val = Math.floor(a / scale) * scale;\n        high_val = Math.ceil(b / scale) * scale;\n        nTicks = Math.abs(high_val - low_val) / scale;\n        spacing = pixels / nTicks;\n        if (spacing > pixels_per_tick) break;\n      }\n\n      // Construct the set of ticks.\n      // Allow reverse y-axis if it's explicitly requested.\n      if (low_val > high_val) scale *= -1;\n      for (i = 0; i <= nTicks; i++) {\n        tickV = low_val + i * scale;\n        ticks.push({\n          v: tickV\n        });\n      }\n    }\n  }\n  var formatter = /**@type{AxisLabelFormatter}*/opts('axisLabelFormatter');\n\n  // Add labels to the ticks.\n  for (i = 0; i < ticks.length; i++) {\n    if (ticks[i].label !== undefined) continue; // Use current label.\n    // TODO(danvk): set granularity to something appropriate here.\n    ticks[i].label = formatter.call(dygraph, ticks[i].v, 0, opts, dygraph);\n  }\n  return ticks;\n};\n\n/** @type {Ticker} */\nexport var dateTicker = function (a, b, pixels, opts, dygraph, vals) {\n  var chosen = pickDateTickGranularity(a, b, pixels, opts);\n  if (chosen >= 0) {\n    return getDateAxis(a, b, chosen, opts, dygraph);\n  } else {\n    // this can happen if self.width_ is zero.\n    return [];\n  }\n};\n\n// Time granularity enumeration\nexport var Granularity = {\n  MILLISECONDLY: 0,\n  TWO_MILLISECONDLY: 1,\n  FIVE_MILLISECONDLY: 2,\n  TEN_MILLISECONDLY: 3,\n  FIFTY_MILLISECONDLY: 4,\n  HUNDRED_MILLISECONDLY: 5,\n  FIVE_HUNDRED_MILLISECONDLY: 6,\n  SECONDLY: 7,\n  TWO_SECONDLY: 8,\n  FIVE_SECONDLY: 9,\n  TEN_SECONDLY: 10,\n  THIRTY_SECONDLY: 11,\n  MINUTELY: 12,\n  TWO_MINUTELY: 13,\n  FIVE_MINUTELY: 14,\n  TEN_MINUTELY: 15,\n  THIRTY_MINUTELY: 16,\n  HOURLY: 17,\n  TWO_HOURLY: 18,\n  SIX_HOURLY: 19,\n  DAILY: 20,\n  TWO_DAILY: 21,\n  WEEKLY: 22,\n  MONTHLY: 23,\n  QUARTERLY: 24,\n  BIANNUAL: 25,\n  ANNUAL: 26,\n  DECADAL: 27,\n  CENTENNIAL: 28,\n  NUM_GRANULARITIES: 29\n};\n\n// Date components enumeration (in the order of the arguments in Date)\n// TODO: make this an @enum\nvar DateField = {\n  DATEFIELD_Y: 0,\n  DATEFIELD_M: 1,\n  DATEFIELD_D: 2,\n  DATEFIELD_HH: 3,\n  DATEFIELD_MM: 4,\n  DATEFIELD_SS: 5,\n  DATEFIELD_MS: 6,\n  NUM_DATEFIELDS: 7\n};\n\n/**\n * The value of datefield will start at an even multiple of \"step\", i.e.\n *   if datefield=SS and step=5 then the first tick will be on a multiple of 5s.\n *\n * For granularities <= HOURLY, ticks are generated every `spacing` ms.\n *\n * At coarser granularities, ticks are generated by incrementing `datefield` by\n *   `step`. In this case, the `spacing` value is only used to estimate the\n *   number of ticks. It should roughly correspond to the spacing between\n *   adjacent ticks.\n *\n * @type {Array.<{datefield:number, step:number, spacing:number}>}\n */\nvar TICK_PLACEMENT = [];\nTICK_PLACEMENT[Granularity.MILLISECONDLY] = {\n  datefield: DateField.DATEFIELD_MS,\n  step: 1,\n  spacing: 1\n};\nTICK_PLACEMENT[Granularity.TWO_MILLISECONDLY] = {\n  datefield: DateField.DATEFIELD_MS,\n  step: 2,\n  spacing: 2\n};\nTICK_PLACEMENT[Granularity.FIVE_MILLISECONDLY] = {\n  datefield: DateField.DATEFIELD_MS,\n  step: 5,\n  spacing: 5\n};\nTICK_PLACEMENT[Granularity.TEN_MILLISECONDLY] = {\n  datefield: DateField.DATEFIELD_MS,\n  step: 10,\n  spacing: 10\n};\nTICK_PLACEMENT[Granularity.FIFTY_MILLISECONDLY] = {\n  datefield: DateField.DATEFIELD_MS,\n  step: 50,\n  spacing: 50\n};\nTICK_PLACEMENT[Granularity.HUNDRED_MILLISECONDLY] = {\n  datefield: DateField.DATEFIELD_MS,\n  step: 100,\n  spacing: 100\n};\nTICK_PLACEMENT[Granularity.FIVE_HUNDRED_MILLISECONDLY] = {\n  datefield: DateField.DATEFIELD_MS,\n  step: 500,\n  spacing: 500\n};\nTICK_PLACEMENT[Granularity.SECONDLY] = {\n  datefield: DateField.DATEFIELD_SS,\n  step: 1,\n  spacing: 1000 * 1\n};\nTICK_PLACEMENT[Granularity.TWO_SECONDLY] = {\n  datefield: DateField.DATEFIELD_SS,\n  step: 2,\n  spacing: 1000 * 2\n};\nTICK_PLACEMENT[Granularity.FIVE_SECONDLY] = {\n  datefield: DateField.DATEFIELD_SS,\n  step: 5,\n  spacing: 1000 * 5\n};\nTICK_PLACEMENT[Granularity.TEN_SECONDLY] = {\n  datefield: DateField.DATEFIELD_SS,\n  step: 10,\n  spacing: 1000 * 10\n};\nTICK_PLACEMENT[Granularity.THIRTY_SECONDLY] = {\n  datefield: DateField.DATEFIELD_SS,\n  step: 30,\n  spacing: 1000 * 30\n};\nTICK_PLACEMENT[Granularity.MINUTELY] = {\n  datefield: DateField.DATEFIELD_MM,\n  step: 1,\n  spacing: 1000 * 60\n};\nTICK_PLACEMENT[Granularity.TWO_MINUTELY] = {\n  datefield: DateField.DATEFIELD_MM,\n  step: 2,\n  spacing: 1000 * 60 * 2\n};\nTICK_PLACEMENT[Granularity.FIVE_MINUTELY] = {\n  datefield: DateField.DATEFIELD_MM,\n  step: 5,\n  spacing: 1000 * 60 * 5\n};\nTICK_PLACEMENT[Granularity.TEN_MINUTELY] = {\n  datefield: DateField.DATEFIELD_MM,\n  step: 10,\n  spacing: 1000 * 60 * 10\n};\nTICK_PLACEMENT[Granularity.THIRTY_MINUTELY] = {\n  datefield: DateField.DATEFIELD_MM,\n  step: 30,\n  spacing: 1000 * 60 * 30\n};\nTICK_PLACEMENT[Granularity.HOURLY] = {\n  datefield: DateField.DATEFIELD_HH,\n  step: 1,\n  spacing: 1000 * 3600\n};\nTICK_PLACEMENT[Granularity.TWO_HOURLY] = {\n  datefield: DateField.DATEFIELD_HH,\n  step: 2,\n  spacing: 1000 * 3600 * 2\n};\nTICK_PLACEMENT[Granularity.SIX_HOURLY] = {\n  datefield: DateField.DATEFIELD_HH,\n  step: 6,\n  spacing: 1000 * 3600 * 6\n};\nTICK_PLACEMENT[Granularity.DAILY] = {\n  datefield: DateField.DATEFIELD_D,\n  step: 1,\n  spacing: 1000 * 86400\n};\nTICK_PLACEMENT[Granularity.TWO_DAILY] = {\n  datefield: DateField.DATEFIELD_D,\n  step: 2,\n  spacing: 1000 * 86400 * 2\n};\nTICK_PLACEMENT[Granularity.WEEKLY] = {\n  datefield: DateField.DATEFIELD_D,\n  step: 7,\n  spacing: 1000 * 604800\n};\nTICK_PLACEMENT[Granularity.MONTHLY] = {\n  datefield: DateField.DATEFIELD_M,\n  step: 1,\n  spacing: 1000 * 7200 * 365.2425\n}; // 1e3 * 60 * 60 * 24 * 365.2425 / 12\nTICK_PLACEMENT[Granularity.QUARTERLY] = {\n  datefield: DateField.DATEFIELD_M,\n  step: 3,\n  spacing: 1000 * 21600 * 365.2425\n}; // 1e3 * 60 * 60 * 24 * 365.2425 / 4\nTICK_PLACEMENT[Granularity.BIANNUAL] = {\n  datefield: DateField.DATEFIELD_M,\n  step: 6,\n  spacing: 1000 * 43200 * 365.2425\n}; // 1e3 * 60 * 60 * 24 * 365.2425 / 2\nTICK_PLACEMENT[Granularity.ANNUAL] = {\n  datefield: DateField.DATEFIELD_Y,\n  step: 1,\n  spacing: 1000 * 86400 * 365.2425\n}; // 1e3 * 60 * 60 * 24 * 365.2425 * 1\nTICK_PLACEMENT[Granularity.DECADAL] = {\n  datefield: DateField.DATEFIELD_Y,\n  step: 10,\n  spacing: 1000 * 864000 * 365.2425\n}; // 1e3 * 60 * 60 * 24 * 365.2425 * 10\nTICK_PLACEMENT[Granularity.CENTENNIAL] = {\n  datefield: DateField.DATEFIELD_Y,\n  step: 100,\n  spacing: 1000 * 8640000 * 365.2425\n}; // 1e3 * 60 * 60 * 24 * 365.2425 * 100\n\n/**\n * This is a list of human-friendly values at which to show tick marks on a log\n * scale. It is k * 10^n, where k=1..9 and n=-39..+39, so:\n * ..., 1, 2, 3, 4, 5, ..., 9, 10, 20, 30, ..., 90, 100, 200, 300, ...\n * NOTE: this assumes that utils.LOG_SCALE = 10.\n * @type {Array.<number>}\n */\nvar PREFERRED_LOG_TICK_VALUES = function () {\n  var vals = [];\n  for (var power = -39; power <= 39; power++) {\n    var range = Math.pow(10, power);\n    for (var mult = 1; mult <= 9; mult++) {\n      var val = range * mult;\n      vals.push(val);\n    }\n  }\n  return vals;\n}();\n\n/**\n * Determine the correct granularity of ticks on a date axis.\n *\n * @param {number} a Left edge of the chart (ms)\n * @param {number} b Right edge of the chart (ms)\n * @param {number} pixels Size of the chart in the relevant dimension (width).\n * @param {function(string):*} opts Function mapping from option name -&gt; value.\n * @return {number} The appropriate axis granularity for this chart. See the\n *     enumeration of possible values in dygraph-tickers.js.\n */\nexport var pickDateTickGranularity = function (a, b, pixels, opts) {\n  var pixels_per_tick = /** @type{number} */opts('pixelsPerLabel');\n  for (var i = 0; i < Granularity.NUM_GRANULARITIES; i++) {\n    var num_ticks = numDateTicks(a, b, i);\n    if (pixels / num_ticks >= pixels_per_tick) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Compute the number of ticks on a date axis for a given granularity.\n * @param {number} start_time\n * @param {number} end_time\n * @param {number} granularity (one of the granularities enumerated above)\n * @return {number} (Approximate) number of ticks that would result.\n */\nvar numDateTicks = function (start_time, end_time, granularity) {\n  var spacing = TICK_PLACEMENT[granularity].spacing;\n  return Math.round(1.0 * (end_time - start_time) / spacing);\n};\n\n/**\n * Compute the positions and labels of ticks on a date axis for a given granularity.\n * @param {number} start_time\n * @param {number} end_time\n * @param {number} granularity (one of the granularities enumerated above)\n * @param {function(string):*} opts Function mapping from option name -&gt; value.\n * @param {Dygraph=} dg\n * @return {!TickList}\n */\nexport var getDateAxis = function (start_time, end_time, granularity, opts, dg) {\n  var formatter = /** @type{AxisLabelFormatter} */\n  opts(\"axisLabelFormatter\");\n  var utc = opts(\"labelsUTC\");\n  var accessors = utc ? utils.DateAccessorsUTC : utils.DateAccessorsLocal;\n  var datefield = TICK_PLACEMENT[granularity].datefield;\n  var step = TICK_PLACEMENT[granularity].step;\n  var spacing = TICK_PLACEMENT[granularity].spacing;\n\n  // Choose a nice tick position before the initial instant.\n  // Currently, this code deals properly with the existent daily granularities:\n  // DAILY (with step of 1) and WEEKLY (with step of 7 but specially handled).\n  // Other daily granularities (say TWO_DAILY) should also be handled specially\n  // by setting the start_date_offset to 0.\n  var start_date = new Date(start_time);\n  var date_array = [];\n  date_array[DateField.DATEFIELD_Y] = accessors.getFullYear(start_date);\n  date_array[DateField.DATEFIELD_M] = accessors.getMonth(start_date);\n  date_array[DateField.DATEFIELD_D] = accessors.getDate(start_date);\n  date_array[DateField.DATEFIELD_HH] = accessors.getHours(start_date);\n  date_array[DateField.DATEFIELD_MM] = accessors.getMinutes(start_date);\n  date_array[DateField.DATEFIELD_SS] = accessors.getSeconds(start_date);\n  date_array[DateField.DATEFIELD_MS] = accessors.getMilliseconds(start_date);\n  var start_date_offset = date_array[datefield] % step;\n  if (granularity == Granularity.WEEKLY) {\n    // This will put the ticks on Sundays.\n    start_date_offset = accessors.getDay(start_date);\n  }\n  date_array[datefield] -= start_date_offset;\n  for (var df = datefield + 1; df < DateField.NUM_DATEFIELDS; df++) {\n    // The minimum value is 1 for the day of month, and 0 for all other fields.\n    date_array[df] = df === DateField.DATEFIELD_D ? 1 : 0;\n  }\n\n  // Generate the ticks.\n  // For granularities not coarser than HOURLY we use the fact that:\n  //   the number of milliseconds between ticks is constant\n  //   and equal to the defined spacing.\n  // Otherwise we rely on the 'roll over' property of the Date functions:\n  //   when some date field is set to a value outside of its logical range,\n  //   the excess 'rolls over' the next (more significant) field.\n  // However, when using local time with DST transitions,\n  // there are dates that do not represent any time value at all\n  // (those in the hour skipped at the 'spring forward'),\n  // and the JavaScript engines usually return an equivalent value.\n  // Hence we have to check that the date is properly increased at each step,\n  // returning a date at a nice tick position.\n  var ticks = [];\n  var tick_date = accessors.makeDate.apply(null, date_array);\n  var tick_time = tick_date.getTime();\n  if (granularity <= Granularity.HOURLY) {\n    if (tick_time < start_time) {\n      tick_time += spacing;\n      tick_date = new Date(tick_time);\n    }\n    while (tick_time <= end_time) {\n      ticks.push({\n        v: tick_time,\n        label: formatter.call(dg, tick_date, granularity, opts, dg)\n      });\n      tick_time += spacing;\n      tick_date = new Date(tick_time);\n    }\n  } else {\n    if (tick_time < start_time) {\n      date_array[datefield] += step;\n      tick_date = accessors.makeDate.apply(null, date_array);\n      tick_time = tick_date.getTime();\n    }\n    while (tick_time <= end_time) {\n      if (granularity >= Granularity.DAILY || accessors.getHours(tick_date) % step === 0) {\n        ticks.push({\n          v: tick_time,\n          label: formatter.call(dg, tick_date, granularity, opts, dg)\n        });\n      }\n      date_array[datefield] += step;\n      tick_date = accessors.makeDate.apply(null, date_array);\n      tick_time = tick_date.getTime();\n    }\n  }\n  return ticks;\n};","map":{"version":3,"names":["utils","TickList","undefined","Ticker","numericLinearTicks","a","b","pixels","opts","dygraph","vals","nonLogscaleOpts","opt","numericTicks","pixels_per_tick","ticks","i","j","tickV","nTicks","length","push","v","Math","floor","minIdx","binarySearch","PREFERRED_LOG_TICK_VALUES","maxIdx","lastDisplayed","idx","tickValue","pixel_coord","log","tick","abs","label","reverse","kmg2","mults","base","max_ticks","ceil","units_per_tick","base_power","base_scale","pow","scale","low_val","high_val","spacing","formatter","call","dateTicker","chosen","pickDateTickGranularity","getDateAxis","Granularity","MILLISECONDLY","TWO_MILLISECONDLY","FIVE_MILLISECONDLY","TEN_MILLISECONDLY","FIFTY_MILLISECONDLY","HUNDRED_MILLISECONDLY","FIVE_HUNDRED_MILLISECONDLY","SECONDLY","TWO_SECONDLY","FIVE_SECONDLY","TEN_SECONDLY","THIRTY_SECONDLY","MINUTELY","TWO_MINUTELY","FIVE_MINUTELY","TEN_MINUTELY","THIRTY_MINUTELY","HOURLY","TWO_HOURLY","SIX_HOURLY","DAILY","TWO_DAILY","WEEKLY","MONTHLY","QUARTERLY","BIANNUAL","ANNUAL","DECADAL","CENTENNIAL","NUM_GRANULARITIES","DateField","DATEFIELD_Y","DATEFIELD_M","DATEFIELD_D","DATEFIELD_HH","DATEFIELD_MM","DATEFIELD_SS","DATEFIELD_MS","NUM_DATEFIELDS","TICK_PLACEMENT","datefield","step","power","range","mult","val","num_ticks","numDateTicks","start_time","end_time","granularity","round","dg","utc","accessors","DateAccessorsUTC","DateAccessorsLocal","start_date","Date","date_array","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","start_date_offset","getDay","df","tick_date","makeDate","apply","tick_time","getTime"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontend/node_modules/dygraphs/src/dygraph-tickers.js"],"sourcesContent":["/**\n * @license\n * Copyright 2011 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview Description of this file.\n * @author danvk@google.com (Dan Vanderkam)\n */\n\n/*\n * A ticker is a function with the following interface:\n *\n * function(a, b, pixels, options_view, dygraph, forced_values);\n * -> [ { v: tick1_v, label: tick1_label[, label_v: label_v1] },\n *      { v: tick2_v, label: tick2_label[, label_v: label_v2] },\n *      ...\n *    ]\n *\n * The returned value is called a \"tick list\".\n *\n * Arguments\n * ---------\n *\n * [a, b] is the range of the axis for which ticks are being generated. For a\n * numeric axis, these will simply be numbers. For a date axis, these will be\n * millis since epoch (convertable to Date objects using \"new Date(a)\" and \"new\n * Date(b)\").\n *\n * opts provides access to chart- and axis-specific options. It can be used to\n * access number/date formatting code/options, check for a log scale, etc.\n *\n * pixels is the length of the axis in pixels. opts('pixelsPerLabel') is the\n * minimum amount of space to be allotted to each label. For instance, if\n * pixels=400 and opts('pixelsPerLabel')=40 then the ticker should return\n * between zero and ten (400/40) ticks.\n *\n * dygraph is the Dygraph object for which an axis is being constructed.\n *\n * forced_values is used for secondary y-axes. The tick positions are typically\n * set by the primary y-axis, so the secondary y-axis has no choice in where to\n * put these. It simply has to generate labels for these data values.\n *\n * Tick lists\n * ----------\n * Typically a tick will have both a grid/tick line and a label at one end of\n * that line (at the bottom for an x-axis, at left or right for the y-axis).\n *\n * A tick may be missing one of these two components:\n * - If \"label_v\" is specified instead of \"v\", then there will be no tick or\n *   gridline, just a label.\n * - Similarly, if \"label\" is not specified, then there will be a gridline\n *   without a label.\n *\n * This flexibility is useful in a few situations:\n * - For log scales, some of the tick lines may be too close to all have labels.\n * - For date scales where years are being displayed, it is desirable to display\n *   tick marks at the beginnings of years but labels (e.g. \"2006\") in the\n *   middle of the years.\n */\n\n/*jshint sub:true */\n/*global Dygraph:false */\n\"use strict\";\n\nimport * as utils from './dygraph-utils';\n\n/** @typedef {Array.<{v:number, label:string, label_v:(string|undefined)}>} */\nvar TickList = undefined;  // the ' = undefined' keeps jshint happy.\n\n/** @typedef {function(\n *    number,\n *    number,\n *    number,\n *    function(string):*,\n *    Dygraph=,\n *    Array.<number>=\n *  ): TickList}\n */\nvar Ticker = undefined;  // the ' = undefined' keeps jshint happy.\n\n/** @type {Ticker} */\nexport var numericLinearTicks = function(a, b, pixels, opts, dygraph, vals) {\n  var nonLogscaleOpts = function(opt) {\n    if (opt === 'logscale') return false;\n    return opts(opt);\n  };\n  return numericTicks(a, b, pixels, nonLogscaleOpts, dygraph, vals);\n};\n\n/** @type {Ticker} */\nexport var numericTicks = function(a, b, pixels, opts, dygraph, vals) {\n  var pixels_per_tick = /** @type{number} */(opts('pixelsPerLabel'));\n  var ticks = [];\n  var i, j, tickV, nTicks;\n  if (vals) {\n    for (i = 0; i < vals.length; i++) {\n      ticks.push({v: vals[i]});\n    }\n  } else {\n    // TODO(danvk): factor this log-scale block out into a separate function.\n    if (opts(\"logscale\")) {\n      nTicks  = Math.floor(pixels / pixels_per_tick);\n      var minIdx = utils.binarySearch(a, PREFERRED_LOG_TICK_VALUES, 1);\n      var maxIdx = utils.binarySearch(b, PREFERRED_LOG_TICK_VALUES, -1);\n      if (minIdx == -1) {\n        minIdx = 0;\n      }\n      if (maxIdx == -1) {\n        maxIdx = PREFERRED_LOG_TICK_VALUES.length - 1;\n      }\n      // Count the number of tick values would appear, if we can get at least\n      // nTicks / 4 accept them.\n      var lastDisplayed = null;\n      if (maxIdx - minIdx >= nTicks / 4) {\n        for (var idx = maxIdx; idx >= minIdx; idx--) {\n          var tickValue = PREFERRED_LOG_TICK_VALUES[idx];\n          var pixel_coord = Math.log(tickValue / a) / Math.log(b / a) * pixels;\n          var tick = { v: tickValue };\n          if (lastDisplayed === null) {\n            lastDisplayed = {\n              tickValue : tickValue,\n              pixel_coord : pixel_coord\n            };\n          } else {\n            if (Math.abs(pixel_coord - lastDisplayed.pixel_coord) >= pixels_per_tick) {\n              lastDisplayed = {\n                tickValue : tickValue,\n                pixel_coord : pixel_coord\n              };\n            } else {\n              tick.label = \"\";\n            }\n          }\n          ticks.push(tick);\n        }\n        // Since we went in backwards order.\n        ticks.reverse();\n      }\n    }\n\n    // ticks.length won't be 0 if the log scale function finds values to insert.\n    if (ticks.length === 0) {\n      // Basic idea:\n      // Try labels every 1, 2, 5, 10, 20, 50, 100, etc.\n      // Calculate the resulting tick spacing (i.e. this.height_ / nTicks).\n      // The first spacing greater than pixelsPerYLabel is what we use.\n      // TODO(danvk): version that works on a log scale.\n      var kmg2 = opts(\"labelsKMG2\");\n      var mults, base;\n      if (kmg2) {\n        mults = [1, 2, 4, 8, 16, 32, 64, 128, 256];\n        base = 16;\n      } else {\n        mults = [1, 2, 5, 10, 20, 50, 100];\n        base = 10;\n      }\n\n      // Get the maximum number of permitted ticks based on the\n      // graph's pixel size and pixels_per_tick setting.\n      var max_ticks = Math.ceil(pixels / pixels_per_tick);\n\n      // Now calculate the data unit equivalent of this tick spacing.\n      // Use abs() since graphs may have a reversed Y axis.\n      var units_per_tick = Math.abs(b - a) / max_ticks;\n\n      // Based on this, get a starting scale which is the largest\n      // integer power of the chosen base (10 or 16) that still remains\n      // below the requested pixels_per_tick spacing.\n      var base_power = Math.floor(Math.log(units_per_tick) / Math.log(base));\n      var base_scale = Math.pow(base, base_power);\n\n      // Now try multiples of the starting scale until we find one\n      // that results in tick marks spaced sufficiently far apart.\n      // The \"mults\" array should cover the range 1 .. base^2 to\n      // adjust for rounding and edge effects.\n      var scale, low_val, high_val, spacing;\n      for (j = 0; j < mults.length; j++) {\n        scale = base_scale * mults[j];\n        low_val = Math.floor(a / scale) * scale;\n        high_val = Math.ceil(b / scale) * scale;\n        nTicks = Math.abs(high_val - low_val) / scale;\n        spacing = pixels / nTicks;\n        if (spacing > pixels_per_tick) break;\n      }\n\n      // Construct the set of ticks.\n      // Allow reverse y-axis if it's explicitly requested.\n      if (low_val > high_val) scale *= -1;\n      for (i = 0; i <= nTicks; i++) {\n        tickV = low_val + i * scale;\n        ticks.push( {v: tickV} );\n      }\n    }\n  }\n\n  var formatter = /**@type{AxisLabelFormatter}*/(opts('axisLabelFormatter'));\n\n  // Add labels to the ticks.\n  for (i = 0; i < ticks.length; i++) {\n    if (ticks[i].label !== undefined) continue;  // Use current label.\n    // TODO(danvk): set granularity to something appropriate here.\n    ticks[i].label = formatter.call(dygraph, ticks[i].v, 0, opts, dygraph);\n  }\n\n  return ticks;\n};\n\n/** @type {Ticker} */\nexport var dateTicker = function(a, b, pixels, opts, dygraph, vals) {\n  var chosen = pickDateTickGranularity(a, b, pixels, opts);\n\n  if (chosen >= 0) {\n    return getDateAxis(a, b, chosen, opts, dygraph);\n  } else {\n    // this can happen if self.width_ is zero.\n    return [];\n  }\n};\n\n// Time granularity enumeration\nexport var Granularity = {\n  MILLISECONDLY: 0,\n  TWO_MILLISECONDLY: 1,\n  FIVE_MILLISECONDLY: 2,\n  TEN_MILLISECONDLY: 3,\n  FIFTY_MILLISECONDLY: 4,\n  HUNDRED_MILLISECONDLY: 5,\n  FIVE_HUNDRED_MILLISECONDLY: 6,\n  SECONDLY: 7,\n  TWO_SECONDLY: 8,\n  FIVE_SECONDLY: 9,\n  TEN_SECONDLY: 10,\n  THIRTY_SECONDLY: 11,\n  MINUTELY: 12,\n  TWO_MINUTELY: 13,\n  FIVE_MINUTELY: 14,\n  TEN_MINUTELY: 15,\n  THIRTY_MINUTELY: 16,\n  HOURLY: 17,\n  TWO_HOURLY: 18,\n  SIX_HOURLY: 19,\n  DAILY: 20,\n  TWO_DAILY: 21,\n  WEEKLY: 22,\n  MONTHLY: 23,\n  QUARTERLY: 24,\n  BIANNUAL: 25,\n  ANNUAL: 26,\n  DECADAL: 27,\n  CENTENNIAL: 28,\n  NUM_GRANULARITIES: 29\n}\n\n// Date components enumeration (in the order of the arguments in Date)\n// TODO: make this an @enum\nvar DateField = {\n  DATEFIELD_Y: 0,\n  DATEFIELD_M: 1,\n  DATEFIELD_D: 2,\n  DATEFIELD_HH: 3,\n  DATEFIELD_MM: 4,\n  DATEFIELD_SS: 5,\n  DATEFIELD_MS: 6,\n  NUM_DATEFIELDS: 7\n};\n\n/**\n * The value of datefield will start at an even multiple of \"step\", i.e.\n *   if datefield=SS and step=5 then the first tick will be on a multiple of 5s.\n *\n * For granularities <= HOURLY, ticks are generated every `spacing` ms.\n *\n * At coarser granularities, ticks are generated by incrementing `datefield` by\n *   `step`. In this case, the `spacing` value is only used to estimate the\n *   number of ticks. It should roughly correspond to the spacing between\n *   adjacent ticks.\n *\n * @type {Array.<{datefield:number, step:number, spacing:number}>}\n */\nvar TICK_PLACEMENT = [];\nTICK_PLACEMENT[Granularity.MILLISECONDLY]               = {datefield: DateField.DATEFIELD_MS, step:   1, spacing: 1};\nTICK_PLACEMENT[Granularity.TWO_MILLISECONDLY]           = {datefield: DateField.DATEFIELD_MS, step:   2, spacing: 2};\nTICK_PLACEMENT[Granularity.FIVE_MILLISECONDLY]          = {datefield: DateField.DATEFIELD_MS, step:   5, spacing: 5};\nTICK_PLACEMENT[Granularity.TEN_MILLISECONDLY]           = {datefield: DateField.DATEFIELD_MS, step:  10, spacing: 10};\nTICK_PLACEMENT[Granularity.FIFTY_MILLISECONDLY]         = {datefield: DateField.DATEFIELD_MS, step:  50, spacing: 50};\nTICK_PLACEMENT[Granularity.HUNDRED_MILLISECONDLY]       = {datefield: DateField.DATEFIELD_MS, step: 100, spacing: 100};\nTICK_PLACEMENT[Granularity.FIVE_HUNDRED_MILLISECONDLY]  = {datefield: DateField.DATEFIELD_MS, step: 500, spacing: 500};\nTICK_PLACEMENT[Granularity.SECONDLY]        = {datefield: DateField.DATEFIELD_SS, step:   1, spacing: 1000 * 1};\nTICK_PLACEMENT[Granularity.TWO_SECONDLY]    = {datefield: DateField.DATEFIELD_SS, step:   2, spacing: 1000 * 2};\nTICK_PLACEMENT[Granularity.FIVE_SECONDLY]   = {datefield: DateField.DATEFIELD_SS, step:   5, spacing: 1000 * 5};\nTICK_PLACEMENT[Granularity.TEN_SECONDLY]    = {datefield: DateField.DATEFIELD_SS, step:  10, spacing: 1000 * 10};\nTICK_PLACEMENT[Granularity.THIRTY_SECONDLY] = {datefield: DateField.DATEFIELD_SS, step:  30, spacing: 1000 * 30};\nTICK_PLACEMENT[Granularity.MINUTELY]        = {datefield: DateField.DATEFIELD_MM, step:   1, spacing: 1000 * 60};\nTICK_PLACEMENT[Granularity.TWO_MINUTELY]    = {datefield: DateField.DATEFIELD_MM, step:   2, spacing: 1000 * 60 * 2};\nTICK_PLACEMENT[Granularity.FIVE_MINUTELY]   = {datefield: DateField.DATEFIELD_MM, step:   5, spacing: 1000 * 60 * 5};\nTICK_PLACEMENT[Granularity.TEN_MINUTELY]    = {datefield: DateField.DATEFIELD_MM, step:  10, spacing: 1000 * 60 * 10};\nTICK_PLACEMENT[Granularity.THIRTY_MINUTELY] = {datefield: DateField.DATEFIELD_MM, step:  30, spacing: 1000 * 60 * 30};\nTICK_PLACEMENT[Granularity.HOURLY]          = {datefield: DateField.DATEFIELD_HH, step:   1, spacing: 1000 * 3600};\nTICK_PLACEMENT[Granularity.TWO_HOURLY]      = {datefield: DateField.DATEFIELD_HH, step:   2, spacing: 1000 * 3600 * 2};\nTICK_PLACEMENT[Granularity.SIX_HOURLY]      = {datefield: DateField.DATEFIELD_HH, step:   6, spacing: 1000 * 3600 * 6};\nTICK_PLACEMENT[Granularity.DAILY]           = {datefield: DateField.DATEFIELD_D,  step:   1, spacing: 1000 * 86400};\nTICK_PLACEMENT[Granularity.TWO_DAILY]       = {datefield: DateField.DATEFIELD_D,  step:   2, spacing: 1000 * 86400 * 2};\nTICK_PLACEMENT[Granularity.WEEKLY]          = {datefield: DateField.DATEFIELD_D,  step:   7, spacing: 1000 * 604800};\nTICK_PLACEMENT[Granularity.MONTHLY]         = {datefield: DateField.DATEFIELD_M,  step:   1, spacing: 1000 * 7200  * 365.2425}; // 1e3 * 60 * 60 * 24 * 365.2425 / 12\nTICK_PLACEMENT[Granularity.QUARTERLY]       = {datefield: DateField.DATEFIELD_M,  step:   3, spacing: 1000 * 21600 * 365.2425}; // 1e3 * 60 * 60 * 24 * 365.2425 / 4\nTICK_PLACEMENT[Granularity.BIANNUAL]        = {datefield: DateField.DATEFIELD_M,  step:   6, spacing: 1000 * 43200 * 365.2425}; // 1e3 * 60 * 60 * 24 * 365.2425 / 2\nTICK_PLACEMENT[Granularity.ANNUAL]          = {datefield: DateField.DATEFIELD_Y,  step:   1, spacing: 1000 * 86400   * 365.2425}; // 1e3 * 60 * 60 * 24 * 365.2425 * 1\nTICK_PLACEMENT[Granularity.DECADAL]         = {datefield: DateField.DATEFIELD_Y,  step:  10, spacing: 1000 * 864000  * 365.2425}; // 1e3 * 60 * 60 * 24 * 365.2425 * 10\nTICK_PLACEMENT[Granularity.CENTENNIAL]      = {datefield: DateField.DATEFIELD_Y,  step: 100, spacing: 1000 * 8640000 * 365.2425}; // 1e3 * 60 * 60 * 24 * 365.2425 * 100\n\n/**\n * This is a list of human-friendly values at which to show tick marks on a log\n * scale. It is k * 10^n, where k=1..9 and n=-39..+39, so:\n * ..., 1, 2, 3, 4, 5, ..., 9, 10, 20, 30, ..., 90, 100, 200, 300, ...\n * NOTE: this assumes that utils.LOG_SCALE = 10.\n * @type {Array.<number>}\n */\nvar PREFERRED_LOG_TICK_VALUES = (function() {\n  var vals = [];\n  for (var power = -39; power <= 39; power++) {\n    var range = Math.pow(10, power);\n    for (var mult = 1; mult <= 9; mult++) {\n      var val = range * mult;\n      vals.push(val);\n    }\n  }\n  return vals;\n})();\n\n/**\n * Determine the correct granularity of ticks on a date axis.\n *\n * @param {number} a Left edge of the chart (ms)\n * @param {number} b Right edge of the chart (ms)\n * @param {number} pixels Size of the chart in the relevant dimension (width).\n * @param {function(string):*} opts Function mapping from option name -&gt; value.\n * @return {number} The appropriate axis granularity for this chart. See the\n *     enumeration of possible values in dygraph-tickers.js.\n */\nexport var pickDateTickGranularity = function(a, b, pixels, opts) {\n  var pixels_per_tick = /** @type{number} */(opts('pixelsPerLabel'));\n  for (var i = 0; i < Granularity.NUM_GRANULARITIES; i++) {\n    var num_ticks = numDateTicks(a, b, i);\n    if (pixels / num_ticks >= pixels_per_tick) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Compute the number of ticks on a date axis for a given granularity.\n * @param {number} start_time\n * @param {number} end_time\n * @param {number} granularity (one of the granularities enumerated above)\n * @return {number} (Approximate) number of ticks that would result.\n */\nvar numDateTicks = function(start_time, end_time, granularity) {\n  var spacing = TICK_PLACEMENT[granularity].spacing;\n  return Math.round(1.0 * (end_time - start_time) / spacing);\n};\n\n/**\n * Compute the positions and labels of ticks on a date axis for a given granularity.\n * @param {number} start_time\n * @param {number} end_time\n * @param {number} granularity (one of the granularities enumerated above)\n * @param {function(string):*} opts Function mapping from option name -&gt; value.\n * @param {Dygraph=} dg\n * @return {!TickList}\n */\nexport var getDateAxis = function(start_time, end_time, granularity, opts, dg) {\n  var formatter = /** @type{AxisLabelFormatter} */(\n      opts(\"axisLabelFormatter\"));\n  var utc = opts(\"labelsUTC\");\n  var accessors = utc ? utils.DateAccessorsUTC : utils.DateAccessorsLocal;\n\n  var datefield = TICK_PLACEMENT[granularity].datefield;\n  var step = TICK_PLACEMENT[granularity].step;\n  var spacing = TICK_PLACEMENT[granularity].spacing;\n\n  // Choose a nice tick position before the initial instant.\n  // Currently, this code deals properly with the existent daily granularities:\n  // DAILY (with step of 1) and WEEKLY (with step of 7 but specially handled).\n  // Other daily granularities (say TWO_DAILY) should also be handled specially\n  // by setting the start_date_offset to 0.\n  var start_date = new Date(start_time);\n  var date_array = [];\n  date_array[DateField.DATEFIELD_Y]  = accessors.getFullYear(start_date);\n  date_array[DateField.DATEFIELD_M]  = accessors.getMonth(start_date);\n  date_array[DateField.DATEFIELD_D]  = accessors.getDate(start_date);\n  date_array[DateField.DATEFIELD_HH] = accessors.getHours(start_date);\n  date_array[DateField.DATEFIELD_MM] = accessors.getMinutes(start_date);\n  date_array[DateField.DATEFIELD_SS] = accessors.getSeconds(start_date);\n  date_array[DateField.DATEFIELD_MS] = accessors.getMilliseconds(start_date);\n\n  var start_date_offset = date_array[datefield] % step;\n  if (granularity == Granularity.WEEKLY) {\n    // This will put the ticks on Sundays.\n    start_date_offset = accessors.getDay(start_date);\n  }\n\n  date_array[datefield] -= start_date_offset;\n  for (var df = datefield + 1; df < DateField.NUM_DATEFIELDS; df++) {\n    // The minimum value is 1 for the day of month, and 0 for all other fields.\n    date_array[df] = (df === DateField.DATEFIELD_D) ? 1 : 0;\n  }\n\n  // Generate the ticks.\n  // For granularities not coarser than HOURLY we use the fact that:\n  //   the number of milliseconds between ticks is constant\n  //   and equal to the defined spacing.\n  // Otherwise we rely on the 'roll over' property of the Date functions:\n  //   when some date field is set to a value outside of its logical range,\n  //   the excess 'rolls over' the next (more significant) field.\n  // However, when using local time with DST transitions,\n  // there are dates that do not represent any time value at all\n  // (those in the hour skipped at the 'spring forward'),\n  // and the JavaScript engines usually return an equivalent value.\n  // Hence we have to check that the date is properly increased at each step,\n  // returning a date at a nice tick position.\n  var ticks = [];\n  var tick_date = accessors.makeDate.apply(null, date_array);\n  var tick_time = tick_date.getTime();\n  if (granularity <= Granularity.HOURLY) {\n    if (tick_time < start_time) {\n      tick_time += spacing;\n      tick_date = new Date(tick_time);\n    }\n    while (tick_time <= end_time) {\n      ticks.push({ v: tick_time,\n                   label: formatter.call(dg, tick_date, granularity, opts, dg)\n                 });\n      tick_time += spacing;\n      tick_date = new Date(tick_time);\n    }\n  } else {\n    if (tick_time < start_time) {\n      date_array[datefield] += step;\n      tick_date = accessors.makeDate.apply(null, date_array);\n      tick_time = tick_date.getTime();\n    }\n    while (tick_time <= end_time) {\n      if (granularity >= Granularity.DAILY ||\n          accessors.getHours(tick_date) % step === 0) {\n        ticks.push({ v: tick_time,\n                     label: formatter.call(dg, tick_date, granularity, opts, dg)\n                   });\n      }\n      date_array[datefield] += step;\n      tick_date = accessors.makeDate.apply(null, date_array);\n      tick_time = tick_date.getTime();\n    }\n  }\n  return ticks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}