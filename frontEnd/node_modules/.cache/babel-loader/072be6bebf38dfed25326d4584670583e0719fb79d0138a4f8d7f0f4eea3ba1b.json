{"ast":null,"code":"class Util {\n  static countWords(wordList) {\n    const termCounts = wordList.reduce((counts, token) => {\n      counts[token] = (counts[token] || 0) + 1;\n      return counts;\n    }, {});\n    const wordFrequencyArray = Object.entries(termCounts).map(([word, count]) => ({\n      text: word,\n      value: count\n    }));\n    wordFrequencyArray.sort((a, b) => b.value - a.value);\n    return wordFrequencyArray.slice(0, 100);\n  }\n  static regularWordCloud(tweets) {\n    const flattenedText = tweets.map(item => item.text).join(' ').toLowerCase();\n    const geoTermsPattern = /\\b(red tide|red tides|karenia brevis|red algae|redtide|redtide's|kbrevis|karenia|brevis|kareniabrevis|redalgae)\\b/gi;\n    const politTermsPattern = /\\b(democrat|democratic|republican|gop|demcastfl|vote blue|vote red|red wave|blue wave|right wing|left wing|far right|far left|extreme right|extreme left|supremacy|supremacist|supremacys|supremacists|terrorist|terrorism|terrorists|ron desantis|desantis|remove ron|deathsantis|rick scott|red tide rick|marco rubio|rubio|bill nelson|donald trump|trump|mike pence|pence|joe biden|biden|kamala harris|crist|charlie christ|andrew gillum|gillum|kriseman|richard kriseman|ken welch|george cretekos|cretekos|buckhorn|bob buckhorn|jane castor|castor|john holic|holic|ron feinsod)\\b/gi;\n    const redTideTermsPattern = /\\b(red tide|red tides|karenia brevis|red algae|redtide|redtide's|kbrevis|karenia|brevis|kareniabrevis|redalgae)\\b/gi;\n    const placeholder = 'na';\n    const replacedText = flattenedText.replace(geoTermsPattern, placeholder).replace(politTermsPattern, placeholder).replace(redTideTermsPattern, placeholder);\n    const stopWords = ['a', 'and', 'the', 'is', 'with', 'na', 'in', 'com', 'https', 'http', '.', 'of', 'to', 'www', 'on', 'rt', 'at', '!', '$', '%', '(', ')', '.', ':', ';', '?', ',', '[', ']', '{', '|', '}']; // Example list of stop words\n    const filteredWords = replacedText.split(/\\s+/).filter(word => !stopWords.includes(word.toLowerCase()));\n    return Util.countWords(filteredWords);\n  }\n  static hashtagsCloud(tweets) {\n    const flattenedText = tweets.map(item => item.text).join(' ').toLowerCase();\n    const words = flattenedText.split(/\\s+/);\n    const hashtagPattern = /#(\\w+)/g;\n\n    // Remove the first character (i.e., the hashtag)\n    return Util.countWords(words.filter(word => {\n      const match = hashtagPattern.exec(word);\n      return match && match.index === 0 && match[1] !== undefined;\n    }).map(word => word.substring(1)));\n  }\n\n  // Other methods...\n}\n\n// Export the Util class\nmodule.exports = Util;","map":{"version":3,"names":["Util","countWords","wordList","termCounts","reduce","counts","token","wordFrequencyArray","Object","entries","map","word","count","text","value","sort","a","b","slice","regularWordCloud","tweets","flattenedText","item","join","toLowerCase","geoTermsPattern","politTermsPattern","redTideTermsPattern","placeholder","replacedText","replace","stopWords","filteredWords","split","filter","includes","hashtagsCloud","words","hashtagPattern","match","exec","index","undefined","substring","module","exports"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontEnd/src/components/analysis.js"],"sourcesContent":["class Util {\n\n    static countWords(wordList) {\n        const termCounts = wordList.reduce((counts, token) => {\n            counts[token] = (counts[token] || 0) + 1;\n            return counts;\n        }, {});\n\n        const wordFrequencyArray = Object.entries(termCounts).map(([word, count]) => ({ text: word, value: count }));\n        wordFrequencyArray.sort((a, b) => b.value - a.value);\n        return wordFrequencyArray.slice(0, 100);\n    }\n\n\n    static regularWordCloud(tweets) {\n        const flattenedText = tweets.map(item => item.text).join(' ').toLowerCase();\n\n        const geoTermsPattern = /\\b(red tide|red tides|karenia brevis|red algae|redtide|redtide's|kbrevis|karenia|brevis|kareniabrevis|redalgae)\\b/gi;\n        const politTermsPattern = /\\b(democrat|democratic|republican|gop|demcastfl|vote blue|vote red|red wave|blue wave|right wing|left wing|far right|far left|extreme right|extreme left|supremacy|supremacist|supremacys|supremacists|terrorist|terrorism|terrorists|ron desantis|desantis|remove ron|deathsantis|rick scott|red tide rick|marco rubio|rubio|bill nelson|donald trump|trump|mike pence|pence|joe biden|biden|kamala harris|crist|charlie christ|andrew gillum|gillum|kriseman|richard kriseman|ken welch|george cretekos|cretekos|buckhorn|bob buckhorn|jane castor|castor|john holic|holic|ron feinsod)\\b/gi;\n        const redTideTermsPattern = /\\b(red tide|red tides|karenia brevis|red algae|redtide|redtide's|kbrevis|karenia|brevis|kareniabrevis|redalgae)\\b/gi;\n\n        const placeholder = 'na';\n        const replacedText = flattenedText.replace(geoTermsPattern, placeholder)\n            .replace(politTermsPattern, placeholder)\n            .replace(redTideTermsPattern, placeholder);\n\n        const stopWords = ['a', 'and', 'the', 'is', 'with', 'na', 'in', 'com', 'https', 'http', '.', 'of', 'to', 'www', 'on', 'rt', 'at', '!', '$', '%', '(', ')', '.', ':', ';', '?', ',', '[', ']', '{', '|', '}']; // Example list of stop words\n        const filteredWords = replacedText.split(/\\s+/).filter(word => !stopWords.includes(word.toLowerCase()));\n\n        return Util.countWords(filteredWords);\n    }\n\n    static hashtagsCloud(tweets){\n        const flattenedText = tweets.map(item => item.text).join(' ').toLowerCase();\n        const words = flattenedText.split(/\\s+/);\n        const hashtagPattern = /#(\\w+)/g;\n\n\n         // Remove the first character (i.e., the hashtag)\n        return Util.countWords(words\n            .filter(word => {\n                const match = hashtagPattern.exec(word);\n                return match && match.index === 0 && match[1] !== undefined;\n            })\n            .map(word => word.substring(1)))\n    }\n\n    // Other methods...\n}\n\n// Export the Util class\nmodule.exports = Util;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}