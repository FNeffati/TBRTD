{"ast":null,"code":"import { InternMap } from \"internmap\";\nimport identity from \"./identity.js\";\nexport default function group(values) {\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n  return nest(values, identity, identity, keys);\n}\nexport function groups(values) {\n  for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    keys[_key2 - 1] = arguments[_key2];\n  }\n  return nest(values, Array.from, identity, keys);\n}\nexport function rollup(values, reduce) {\n  for (var _len3 = arguments.length, keys = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n    keys[_key3 - 2] = arguments[_key3];\n  }\n  return nest(values, identity, reduce, keys);\n}\nexport function rollups(values, reduce) {\n  for (var _len4 = arguments.length, keys = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n    keys[_key4 - 2] = arguments[_key4];\n  }\n  return nest(values, Array.from, reduce, keys);\n}\nexport function index(values) {\n  for (var _len5 = arguments.length, keys = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    keys[_key5 - 1] = arguments[_key5];\n  }\n  return nest(values, identity, unique, keys);\n}\nexport function indexes(values) {\n  for (var _len6 = arguments.length, keys = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    keys[_key6 - 1] = arguments[_key6];\n  }\n  return nest(values, Array.from, unique, keys);\n}\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\nfunction nest(values, map, reduce, keys) {\n  return function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  }(values, 0);\n}","map":{"version":3,"names":["InternMap","identity","group","values","_len","arguments","length","keys","Array","_key","nest","groups","_len2","_key2","from","rollup","reduce","_len3","_key3","rollups","_len4","_key4","index","_len5","_key5","unique","indexes","_len6","_key6","Error","map","regroup","i","keyof","value","key","get","push","set"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontend/node_modules/d3-array/src/group.js"],"sourcesContent":["import {InternMap} from \"internmap\";\nimport identity from \"./identity.js\";\n\nexport default function group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nexport function groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nexport function rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nexport function rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nexport function index(values, ...keys) {\n  return nest(values, identity, unique, keys);\n}\n\nexport function indexes(values, ...keys) {\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}