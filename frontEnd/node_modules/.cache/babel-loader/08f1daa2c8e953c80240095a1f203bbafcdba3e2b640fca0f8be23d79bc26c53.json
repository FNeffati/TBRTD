{"ast":null,"code":"var _jsxFileName = \"/Users/fneffati/Documents/Classes/TBRTD/frontend/src/components/WordCloud.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport 'tippy.js/dist/tippy.css';\nimport Util from './analysis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordCloud = ({\n  cloud_type,\n  tweets,\n  onWordCloudClick\n}) => {\n  _s();\n  let text = \"@RonDeSantisFL @MosaicCompany dilutes then pollutes\";\n  const flattenedText = text.toLowerCase();\n  const RTPattern = /RT\\s+@[A-Za-z0-9._-]+:/g;\n  const usernamePattern = /s+@[A-Za-z0-9._-]+:/g;\n  let replacedText = flattenedText.replace(RTPattern, '').replace(usernamePattern, '');\n  console.log(\"BEFORE:\", flattenedText);\n  console.log(\"AFTER: \", replacedText);\n  const [words, setWords] = useState([{\n    text: \"LOADING\",\n    value: 20\n  }]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    if (tweets.length > 0) {\n      if (cloud_type.length === 0 || cloud_type[0] === 'Single Term Cloud') {\n        const top100Words = Util.regularWordCloud(tweets);\n        setWords(top100Words);\n      } else if (cloud_type[0] === \"Geo Hashtags\") {\n        const hashtags = Util.geohashtagsCloud(tweets);\n        setWords(hashtags);\n      } else if (cloud_type[0] === \"Non-Geo Hashtags\") {\n        const hashtags = Util.nonGeohashtagsCloud(tweets);\n        setWords(hashtags);\n      }\n    } else {\n      setWords([{\n        text: \"LOADING\",\n        value: 20\n      }]);\n    }\n  }, [tweets, cloud_type]);\n  const options = useMemo(() => ({\n    rotations: 1,\n    rotationAngles: [0],\n    fontSizes: [15, 60],\n    colors: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\n    enableTooltip: true,\n    deterministic: true,\n    fontFamily: \"impact\",\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    padding: 1,\n    scale: \"sqrt\",\n    spiral: \"archimedean\",\n    transitionDuration: 1000\n  }), []);\n  const callbacks = useMemo(() => ({\n    onWordClick: word => onWordCloudClick(word.text)\n  }), []);\n  const size = useMemo(() => [500, 600], []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-cloud-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-cloud\",\n      children: /*#__PURE__*/_jsxDEV(ReactWordcloud, {\n        words: words,\n        options: options,\n        size: size,\n        padding: 0,\n        callbacks: callbacks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(WordCloud, \"m5tUFdGo8ZvWTHPFI8fHSKoqoKQ=\");\n_c = WordCloud;\nexport default WordCloud;\nvar _c;\n$RefreshReg$(_c, \"WordCloud\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","ReactWordcloud","Util","jsxDEV","_jsxDEV","WordCloud","cloud_type","tweets","onWordCloudClick","_s","text","flattenedText","toLowerCase","RTPattern","usernamePattern","replacedText","replace","console","log","words","setWords","value","loading","setLoading","length","top100Words","regularWordCloud","hashtags","geohashtagsCloud","nonGeohashtagsCloud","options","rotations","rotationAngles","fontSizes","colors","enableTooltip","deterministic","fontFamily","fontStyle","fontWeight","padding","scale","spiral","transitionDuration","callbacks","onWordClick","word","size","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontend/src/components/WordCloud.js"],"sourcesContent":["import React, {useEffect, useMemo, useState} from \"react\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport 'tippy.js/dist/tippy.css';\nimport Util from './analysis';\n\n\nconst WordCloud = ({ cloud_type, tweets, onWordCloudClick}) => {\n\n    let text = \"@RonDeSantisFL @MosaicCompany dilutes then pollutes\"\n    const flattenedText = text.toLowerCase();\n\n    const RTPattern = /RT\\s+@[A-Za-z0-9._-]+:/g;\n    const usernamePattern = /s+@[A-Za-z0-9._-]+:/g;\n    let replacedText = flattenedText.replace(RTPattern, '').replace(usernamePattern, '')\n\n    console.log(\"BEFORE:\", flattenedText)\n    console.log(\"AFTER: \", replacedText)\n\n    const [words, setWords] = useState([{\n        text: \"LOADING\",\n        value: 20\n    }]);\n    const [loading, setLoading] = useState(false);\n\n\n    useEffect(() => {\n        if (tweets.length > 0) {\n            if (cloud_type.length === 0 || cloud_type[0] === 'Single Term Cloud') {\n                const top100Words = Util.regularWordCloud(tweets);\n                setWords(top100Words);\n            } else if (cloud_type[0] === \"Geo Hashtags\") {\n                const hashtags = Util.geohashtagsCloud(tweets);\n                setWords(hashtags);\n            }\n            else if (cloud_type[0] === \"Non-Geo Hashtags\") {\n                const hashtags = Util.nonGeohashtagsCloud(tweets);\n                setWords(hashtags);\n            }\n        } else {\n            setWords([{\n                text: \"LOADING\",\n                value: 20\n            }]);\n        }\n    }, [tweets, cloud_type]);\n\n\n    const options = useMemo(\n        () => ({\n            rotations: 1,\n            rotationAngles: [0],\n            fontSizes: [15, 60],\n            colors: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\n            enableTooltip: true,\n            deterministic: true,\n            fontFamily: \"impact\",\n            fontStyle: \"normal\",\n            fontWeight: \"normal\",\n            padding: 1,\n            scale: \"sqrt\",\n            spiral: \"archimedean\",\n            transitionDuration: 1000,\n        }),\n        []\n    );\n\n    const callbacks = useMemo(\n        () => ({\n            onWordClick: (word) => onWordCloudClick(word.text)\n        }),\n        []\n    );\n\n    const size = useMemo(() => [500, 600], []);\n\n    return (\n        <div className=\"word-cloud-container\">\n            <div className=\"loading\">{loading && <p>Loading...</p>}</div>\n            <div className=\"word-cloud\">\n                <ReactWordcloud  words={words} options={options} size={size} padding={0} callbacks={callbacks}/>\n            </div>\n        </div>\n    );\n};\n\nexport default WordCloud;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}