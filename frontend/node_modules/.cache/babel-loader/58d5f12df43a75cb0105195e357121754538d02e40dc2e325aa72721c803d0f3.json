{"ast":null,"code":"/**\n * @license\n * Copyright 2011 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview DygraphOptions is responsible for parsing and returning\n * information about options.\n */\n\n// TODO: remove this jshint directive & fix the warnings.\n/*jshint sub:true */\n\"use strict\";\n\nimport * as utils from './dygraph-utils';\nimport DEFAULT_ATTRS from './dygraph-default-attrs';\nimport OPTIONS_REFERENCE from './dygraph-options-reference';\n\n/*\n * Interesting member variables: (REMOVING THIS LIST AS I CLOSURIZE)\n * global_ - global attributes (common among all graphs, AIUI)\n * user - attributes set by the user\n * series_ - { seriesName -> { idx, yAxis, options }}\n */\n\n/**\n * This parses attributes into an object that can be easily queried.\n *\n * It doesn't necessarily mean that all options are available, specifically\n * if labels are not yet available, since those drive details of the per-series\n * and per-axis options.\n *\n * @param {Dygraph} dygraph The chart to which these options belong.\n * @constructor\n */\nvar DygraphOptions = function (dygraph) {\n  /**\n   * The dygraph.\n   * @type {!Dygraph}\n   */\n  this.dygraph_ = dygraph;\n\n  /**\n   * Array of axis index to { series : [ series names ] , options : { axis-specific options. } }\n   * @type {Array.<{series : Array.<string>, options : Object}>} @private\n   */\n  this.yAxes_ = [];\n\n  /**\n   * Contains x-axis specific options, which are stored in the options key.\n   * This matches the yAxes_ object structure (by being a dictionary with an\n   * options element) allowing for shared code.\n   * @type {options: Object} @private\n   */\n  this.xAxis_ = {};\n  this.series_ = {};\n\n  // Once these two objects are initialized, you can call get();\n  this.global_ = this.dygraph_.attrs_;\n  this.user_ = this.dygraph_.user_attrs_ || {};\n\n  /**\n   * A list of series in columnar order.\n   * @type {Array.<string>}\n   */\n  this.labels_ = [];\n  this.highlightSeries_ = this.get(\"highlightSeriesOpts\") || {};\n  this.reparseSeries();\n};\n\n/**\n * Not optimal, but does the trick when you're only using two axes.\n * If we move to more axes, this can just become a function.\n *\n * @type {Object.<number>}\n * @private\n */\nDygraphOptions.AXIS_STRING_MAPPINGS_ = {\n  'y': 0,\n  'Y': 0,\n  'y1': 0,\n  'Y1': 0,\n  'y2': 1,\n  'Y2': 1\n};\n\n/**\n * @param {string|number} axis\n * @private\n */\nDygraphOptions.axisToIndex_ = function (axis) {\n  if (typeof axis == \"string\") {\n    if (DygraphOptions.AXIS_STRING_MAPPINGS_.hasOwnProperty(axis)) {\n      return DygraphOptions.AXIS_STRING_MAPPINGS_[axis];\n    }\n    throw \"Unknown axis : \" + axis;\n  }\n  if (typeof axis == \"number\") {\n    if (axis === 0 || axis === 1) {\n      return axis;\n    }\n    throw \"Dygraphs only supports two y-axes, indexed from 0-1.\";\n  }\n  if (axis) {\n    throw \"Unknown axis : \" + axis;\n  }\n  // No axis specification means axis 0.\n  return 0;\n};\n\n/**\n * Reparses options that are all related to series. This typically occurs when\n * options are either updated, or source data has been made available.\n *\n * TODO(konigsberg): The method name is kind of weak; fix.\n */\nDygraphOptions.prototype.reparseSeries = function () {\n  var labels = this.get(\"labels\");\n  if (!labels) {\n    return; // -- can't do more for now, will parse after getting the labels.\n  }\n  this.labels_ = labels.slice(1);\n  this.yAxes_ = [{\n    series: [],\n    options: {}\n  }]; // Always one axis at least.\n  this.xAxis_ = {\n    options: {}\n  };\n  this.series_ = {};\n\n  // Series are specified in the series element:\n  //\n  // {\n  //   labels: [ \"X\", \"foo\", \"bar\" ],\n  //   pointSize: 3,\n  //   series : {\n  //     foo : {}, // options for foo\n  //     bar : {} // options for bar\n  //   }\n  // }\n  //\n  // So, if series is found, it's expected to contain per-series data,\n  // otherwise set a default.\n  var seriesDict = this.user_.series || {};\n  for (var idx = 0; idx < this.labels_.length; idx++) {\n    var seriesName = this.labels_[idx];\n    var optionsForSeries = seriesDict[seriesName] || {};\n    var yAxis = DygraphOptions.axisToIndex_(optionsForSeries[\"axis\"]);\n    this.series_[seriesName] = {\n      idx: idx,\n      yAxis: yAxis,\n      options: optionsForSeries\n    };\n    if (!this.yAxes_[yAxis]) {\n      this.yAxes_[yAxis] = {\n        series: [seriesName],\n        options: {}\n      };\n    } else {\n      this.yAxes_[yAxis].series.push(seriesName);\n    }\n  }\n  var axis_opts = this.user_[\"axes\"] || {};\n  utils.update(this.yAxes_[0].options, axis_opts[\"y\"] || {});\n  if (this.yAxes_.length > 1) {\n    utils.update(this.yAxes_[1].options, axis_opts[\"y2\"] || {});\n  }\n  utils.update(this.xAxis_.options, axis_opts[\"x\"] || {});\n  if (typeof process !== 'undefined' && process.env.NODE_ENV != 'production') {\n    // For \"production\" code, this gets removed by uglifyjs.\n    this.validateOptions_();\n  }\n};\n\n/**\n * Get a global value.\n *\n * @param {string} name the name of the option.\n */\nDygraphOptions.prototype.get = function (name) {\n  var result = this.getGlobalUser_(name);\n  if (result !== null) {\n    return result;\n  }\n  return this.getGlobalDefault_(name);\n};\nDygraphOptions.prototype.getGlobalUser_ = function (name) {\n  if (this.user_.hasOwnProperty(name)) {\n    return this.user_[name];\n  }\n  return null;\n};\nDygraphOptions.prototype.getGlobalDefault_ = function (name) {\n  if (this.global_.hasOwnProperty(name)) {\n    return this.global_[name];\n  }\n  if (DEFAULT_ATTRS.hasOwnProperty(name)) {\n    return DEFAULT_ATTRS[name];\n  }\n  return null;\n};\n\n/**\n * Get a value for a specific axis. If there is no specific value for the axis,\n * the global value is returned.\n *\n * @param {string} name the name of the option.\n * @param {string|number} axis the axis to search. Can be the string representation\n * (\"y\", \"y2\") or the axis number (0, 1).\n */\nDygraphOptions.prototype.getForAxis = function (name, axis) {\n  var axisIdx;\n  var axisString;\n\n  // Since axis can be a number or a string, straighten everything out here.\n  if (typeof axis == 'number') {\n    axisIdx = axis;\n    axisString = axisIdx === 0 ? \"y\" : \"y2\";\n  } else {\n    if (axis == \"y1\") {\n      axis = \"y\";\n    } // Standardize on 'y'. Is this bad? I think so.\n    if (axis == \"y\") {\n      axisIdx = 0;\n    } else if (axis == \"y2\") {\n      axisIdx = 1;\n    } else if (axis == \"x\") {\n      axisIdx = -1; // simply a placeholder for below.\n    } else {\n      throw \"Unknown axis \" + axis;\n    }\n    axisString = axis;\n  }\n  var userAxis = axisIdx == -1 ? this.xAxis_ : this.yAxes_[axisIdx];\n\n  // Search the user-specified axis option first.\n  if (userAxis) {\n    // This condition could be removed if we always set up this.yAxes_ for y2.\n    var axisOptions = userAxis.options;\n    if (axisOptions.hasOwnProperty(name)) {\n      return axisOptions[name];\n    }\n  }\n\n  // User-specified global options second.\n  // But, hack, ignore globally-specified 'logscale' for 'x' axis declaration.\n  if (!(axis === 'x' && name === 'logscale')) {\n    var result = this.getGlobalUser_(name);\n    if (result !== null) {\n      return result;\n    }\n  }\n  // Default axis options third.\n  var defaultAxisOptions = DEFAULT_ATTRS.axes[axisString];\n  if (defaultAxisOptions.hasOwnProperty(name)) {\n    return defaultAxisOptions[name];\n  }\n\n  // Default global options last.\n  return this.getGlobalDefault_(name);\n};\n\n/**\n * Get a value for a specific series. If there is no specific value for the series,\n * the value for the axis is returned (and afterwards, the global value.)\n *\n * @param {string} name the name of the option.\n * @param {string} series the series to search.\n */\nDygraphOptions.prototype.getForSeries = function (name, series) {\n  // Honors indexes as series.\n  if (series === this.dygraph_.getHighlightSeries()) {\n    if (this.highlightSeries_.hasOwnProperty(name)) {\n      return this.highlightSeries_[name];\n    }\n  }\n  if (!this.series_.hasOwnProperty(series)) {\n    throw \"Unknown series: \" + series;\n  }\n  var seriesObj = this.series_[series];\n  var seriesOptions = seriesObj[\"options\"];\n  if (seriesOptions.hasOwnProperty(name)) {\n    return seriesOptions[name];\n  }\n  return this.getForAxis(name, seriesObj[\"yAxis\"]);\n};\n\n/**\n * Returns the number of y-axes on the chart.\n * @return {number} the number of axes.\n */\nDygraphOptions.prototype.numAxes = function () {\n  return this.yAxes_.length;\n};\n\n/**\n * Return the y-axis for a given series, specified by name.\n */\nDygraphOptions.prototype.axisForSeries = function (series) {\n  return this.series_[series].yAxis;\n};\n\n/**\n * Returns the options for the specified axis.\n */\n// TODO(konigsberg): this is y-axis specific. Support the x axis.\nDygraphOptions.prototype.axisOptions = function (yAxis) {\n  return this.yAxes_[yAxis].options;\n};\n\n/**\n * Return the series associated with an axis.\n */\nDygraphOptions.prototype.seriesForAxis = function (yAxis) {\n  return this.yAxes_[yAxis].series;\n};\n\n/**\n * Return the list of all series, in their columnar order.\n */\nDygraphOptions.prototype.seriesNames = function () {\n  return this.labels_;\n};\nif (typeof process !== 'undefined' && process.env.NODE_ENV != 'production') {\n  // For \"production\" code, this gets removed by uglifyjs.\n\n  /**\n   * Validate all options.\n   * This requires OPTIONS_REFERENCE, which is only available in debug builds.\n   * @private\n   */\n  DygraphOptions.prototype.validateOptions_ = function () {\n    if (typeof OPTIONS_REFERENCE === 'undefined') {\n      throw 'Called validateOptions_ in prod build.';\n    }\n    var that = this;\n    var validateOption = function (optionName) {\n      if (!OPTIONS_REFERENCE[optionName]) {\n        that.warnInvalidOption_(optionName);\n      }\n    };\n    var optionsDicts = [this.xAxis_.options, this.yAxes_[0].options, this.yAxes_[1] && this.yAxes_[1].options, this.global_, this.user_, this.highlightSeries_];\n    var names = this.seriesNames();\n    for (var i = 0; i < names.length; i++) {\n      var name = names[i];\n      if (this.series_.hasOwnProperty(name)) {\n        optionsDicts.push(this.series_[name].options);\n      }\n    }\n    for (var i = 0; i < optionsDicts.length; i++) {\n      var dict = optionsDicts[i];\n      if (!dict) continue;\n      for (var optionName in dict) {\n        if (dict.hasOwnProperty(optionName)) {\n          validateOption(optionName);\n        }\n      }\n    }\n  };\n  var WARNINGS = {}; // Only show any particular warning once.\n\n  /**\n   * Logs a warning about invalid options.\n   * TODO: make this throw for testing\n   * @private\n   */\n  DygraphOptions.prototype.warnInvalidOption_ = function (optionName) {\n    if (!WARNINGS[optionName]) {\n      WARNINGS[optionName] = true;\n      var isSeries = this.labels_.indexOf(optionName) >= 0;\n      if (isSeries) {\n        console.warn('Use new-style per-series options (saw ' + optionName + ' as top-level options key). See http://blog.dygraphs.com/2012/12/the-new-and-better-way-to-specify.html (The New and Better Way to Specify Series and Axis Options).');\n      } else {\n        console.warn('Unknown option ' + optionName + ' (see https://dygraphs.com/options.html for the full list of options)');\n      }\n      throw \"invalid option \" + optionName;\n    }\n  };\n\n  // Reset list of previously-shown warnings. Used for testing.\n  DygraphOptions.resetWarnings_ = function () {\n    WARNINGS = {};\n  };\n}\nexport default DygraphOptions;","map":{"version":3,"names":["utils","DEFAULT_ATTRS","OPTIONS_REFERENCE","DygraphOptions","dygraph","dygraph_","yAxes_","xAxis_","series_","global_","attrs_","user_","user_attrs_","labels_","highlightSeries_","get","reparseSeries","AXIS_STRING_MAPPINGS_","axisToIndex_","axis","hasOwnProperty","prototype","labels","slice","series","options","seriesDict","idx","length","seriesName","optionsForSeries","yAxis","push","axis_opts","update","process","env","NODE_ENV","validateOptions_","name","result","getGlobalUser_","getGlobalDefault_","getForAxis","axisIdx","axisString","userAxis","axisOptions","defaultAxisOptions","axes","getForSeries","getHighlightSeries","seriesObj","seriesOptions","numAxes","axisForSeries","seriesForAxis","seriesNames","that","validateOption","optionName","warnInvalidOption_","optionsDicts","names","i","dict","WARNINGS","isSeries","indexOf","console","warn","resetWarnings_"],"sources":["/Users/fneffati/Documents/Classes/TBENVDASH/frontEnd/tbenv/node_modules/dygraphs/src/dygraph-options.js"],"sourcesContent":["/**\n * @license\n * Copyright 2011 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licenced: https://opensource.org/licenses/MIT\n */\n\n/**\n * @fileoverview DygraphOptions is responsible for parsing and returning\n * information about options.\n */\n\n// TODO: remove this jshint directive & fix the warnings.\n/*jshint sub:true */\n\"use strict\";\n\nimport * as utils from './dygraph-utils';\nimport DEFAULT_ATTRS from './dygraph-default-attrs';\nimport OPTIONS_REFERENCE from './dygraph-options-reference';\n\n/*\n * Interesting member variables: (REMOVING THIS LIST AS I CLOSURIZE)\n * global_ - global attributes (common among all graphs, AIUI)\n * user - attributes set by the user\n * series_ - { seriesName -> { idx, yAxis, options }}\n */\n\n/**\n * This parses attributes into an object that can be easily queried.\n *\n * It doesn't necessarily mean that all options are available, specifically\n * if labels are not yet available, since those drive details of the per-series\n * and per-axis options.\n *\n * @param {Dygraph} dygraph The chart to which these options belong.\n * @constructor\n */\nvar DygraphOptions = function(dygraph) {\n  /**\n   * The dygraph.\n   * @type {!Dygraph}\n   */\n  this.dygraph_ = dygraph;\n\n  /**\n   * Array of axis index to { series : [ series names ] , options : { axis-specific options. } }\n   * @type {Array.<{series : Array.<string>, options : Object}>} @private\n   */\n  this.yAxes_ = [];\n\n  /**\n   * Contains x-axis specific options, which are stored in the options key.\n   * This matches the yAxes_ object structure (by being a dictionary with an\n   * options element) allowing for shared code.\n   * @type {options: Object} @private\n   */\n  this.xAxis_ = {};\n  this.series_ = {};\n\n  // Once these two objects are initialized, you can call get();\n  this.global_ = this.dygraph_.attrs_;\n  this.user_ = this.dygraph_.user_attrs_ || {};\n\n  /**\n   * A list of series in columnar order.\n   * @type {Array.<string>}\n   */\n  this.labels_ = [];\n\n  this.highlightSeries_ = this.get(\"highlightSeriesOpts\") || {};\n  this.reparseSeries();\n};\n\n/**\n * Not optimal, but does the trick when you're only using two axes.\n * If we move to more axes, this can just become a function.\n *\n * @type {Object.<number>}\n * @private\n */\nDygraphOptions.AXIS_STRING_MAPPINGS_ = {\n  'y' : 0,\n  'Y' : 0,\n  'y1' : 0,\n  'Y1' : 0,\n  'y2' : 1,\n  'Y2' : 1\n};\n\n/**\n * @param {string|number} axis\n * @private\n */\nDygraphOptions.axisToIndex_ = function(axis) {\n  if (typeof(axis) == \"string\") {\n    if (DygraphOptions.AXIS_STRING_MAPPINGS_.hasOwnProperty(axis)) {\n      return DygraphOptions.AXIS_STRING_MAPPINGS_[axis];\n    }\n    throw \"Unknown axis : \" + axis;\n  }\n  if (typeof(axis) == \"number\") {\n    if (axis === 0 || axis === 1) {\n      return axis;\n    }\n    throw \"Dygraphs only supports two y-axes, indexed from 0-1.\";\n  }\n  if (axis) {\n    throw \"Unknown axis : \" + axis;\n  }\n  // No axis specification means axis 0.\n  return 0;\n};\n\n/**\n * Reparses options that are all related to series. This typically occurs when\n * options are either updated, or source data has been made available.\n *\n * TODO(konigsberg): The method name is kind of weak; fix.\n */\nDygraphOptions.prototype.reparseSeries = function() {\n  var labels = this.get(\"labels\");\n  if (!labels) {\n    return; // -- can't do more for now, will parse after getting the labels.\n  }\n\n  this.labels_ = labels.slice(1);\n\n  this.yAxes_ = [ { series : [], options : {}} ]; // Always one axis at least.\n  this.xAxis_ = { options : {} };\n  this.series_ = {};\n\n  // Series are specified in the series element:\n  //\n  // {\n  //   labels: [ \"X\", \"foo\", \"bar\" ],\n  //   pointSize: 3,\n  //   series : {\n  //     foo : {}, // options for foo\n  //     bar : {} // options for bar\n  //   }\n  // }\n  //\n  // So, if series is found, it's expected to contain per-series data,\n  // otherwise set a default.\n  var seriesDict = this.user_.series || {};\n  for (var idx = 0; idx < this.labels_.length; idx++) {\n    var seriesName = this.labels_[idx];\n    var optionsForSeries = seriesDict[seriesName] || {};\n    var yAxis = DygraphOptions.axisToIndex_(optionsForSeries[\"axis\"]);\n\n    this.series_[seriesName] = {\n      idx: idx,\n      yAxis: yAxis,\n      options : optionsForSeries };\n\n    if (!this.yAxes_[yAxis]) {\n      this.yAxes_[yAxis] =  { series : [ seriesName ], options : {} };\n    } else {\n      this.yAxes_[yAxis].series.push(seriesName);\n    }\n  }\n\n  var axis_opts = this.user_[\"axes\"] || {};\n  utils.update(this.yAxes_[0].options, axis_opts[\"y\"] || {});\n  if (this.yAxes_.length > 1) {\n    utils.update(this.yAxes_[1].options, axis_opts[\"y2\"] || {});\n  }\n  utils.update(this.xAxis_.options, axis_opts[\"x\"] || {});\n\n  if (typeof process !== 'undefined' && process.env.NODE_ENV != 'production') {\n  // For \"production\" code, this gets removed by uglifyjs.\n    this.validateOptions_();\n  }\n};\n\n/**\n * Get a global value.\n *\n * @param {string} name the name of the option.\n */\nDygraphOptions.prototype.get = function(name) {\n  var result = this.getGlobalUser_(name);\n  if (result !== null) {\n    return result;\n  }\n  return this.getGlobalDefault_(name);\n};\n\nDygraphOptions.prototype.getGlobalUser_ = function(name) {\n  if (this.user_.hasOwnProperty(name)) {\n    return this.user_[name];\n  }\n  return null;\n};\n\nDygraphOptions.prototype.getGlobalDefault_ = function(name) {\n  if (this.global_.hasOwnProperty(name)) {\n    return this.global_[name];\n  }\n  if (DEFAULT_ATTRS.hasOwnProperty(name)) {\n    return DEFAULT_ATTRS[name];\n  }\n  return null;\n};\n\n/**\n * Get a value for a specific axis. If there is no specific value for the axis,\n * the global value is returned.\n *\n * @param {string} name the name of the option.\n * @param {string|number} axis the axis to search. Can be the string representation\n * (\"y\", \"y2\") or the axis number (0, 1).\n */\nDygraphOptions.prototype.getForAxis = function(name, axis) {\n  var axisIdx;\n  var axisString;\n\n  // Since axis can be a number or a string, straighten everything out here.\n  if (typeof(axis) == 'number') {\n    axisIdx = axis;\n    axisString = axisIdx === 0 ? \"y\" : \"y2\";\n  } else {\n    if (axis == \"y1\") { axis = \"y\"; } // Standardize on 'y'. Is this bad? I think so.\n    if (axis == \"y\") {\n      axisIdx = 0;\n    } else if (axis == \"y2\") {\n      axisIdx = 1;\n    } else if (axis == \"x\") {\n      axisIdx = -1; // simply a placeholder for below.\n    } else {\n      throw \"Unknown axis \" + axis;\n    }\n    axisString = axis;\n  }\n\n  var userAxis = (axisIdx == -1) ? this.xAxis_ : this.yAxes_[axisIdx];\n\n  // Search the user-specified axis option first.\n  if (userAxis) { // This condition could be removed if we always set up this.yAxes_ for y2.\n    var axisOptions = userAxis.options;\n    if (axisOptions.hasOwnProperty(name)) {\n      return axisOptions[name];\n    }\n  }\n\n  // User-specified global options second.\n  // But, hack, ignore globally-specified 'logscale' for 'x' axis declaration.\n  if (!(axis === 'x' && name === 'logscale')) {\n    var result = this.getGlobalUser_(name);\n    if (result !== null) {\n      return result;\n    }\n  }\n  // Default axis options third.\n  var defaultAxisOptions = DEFAULT_ATTRS.axes[axisString];\n  if (defaultAxisOptions.hasOwnProperty(name)) {\n    return defaultAxisOptions[name];\n  }\n\n  // Default global options last.\n  return this.getGlobalDefault_(name);\n};\n\n/**\n * Get a value for a specific series. If there is no specific value for the series,\n * the value for the axis is returned (and afterwards, the global value.)\n *\n * @param {string} name the name of the option.\n * @param {string} series the series to search.\n */\nDygraphOptions.prototype.getForSeries = function(name, series) {\n  // Honors indexes as series.\n  if (series === this.dygraph_.getHighlightSeries()) {\n    if (this.highlightSeries_.hasOwnProperty(name)) {\n      return this.highlightSeries_[name];\n    }\n  }\n\n  if (!this.series_.hasOwnProperty(series)) {\n    throw \"Unknown series: \" + series;\n  }\n\n  var seriesObj = this.series_[series];\n  var seriesOptions = seriesObj[\"options\"];\n  if (seriesOptions.hasOwnProperty(name)) {\n    return seriesOptions[name];\n  }\n\n  return this.getForAxis(name, seriesObj[\"yAxis\"]);\n};\n\n/**\n * Returns the number of y-axes on the chart.\n * @return {number} the number of axes.\n */\nDygraphOptions.prototype.numAxes = function() {\n  return this.yAxes_.length;\n};\n\n/**\n * Return the y-axis for a given series, specified by name.\n */\nDygraphOptions.prototype.axisForSeries = function(series) {\n  return this.series_[series].yAxis;\n};\n\n/**\n * Returns the options for the specified axis.\n */\n// TODO(konigsberg): this is y-axis specific. Support the x axis.\nDygraphOptions.prototype.axisOptions = function(yAxis) {\n  return this.yAxes_[yAxis].options;\n};\n\n/**\n * Return the series associated with an axis.\n */\nDygraphOptions.prototype.seriesForAxis = function(yAxis) {\n  return this.yAxes_[yAxis].series;\n};\n\n/**\n * Return the list of all series, in their columnar order.\n */\nDygraphOptions.prototype.seriesNames = function() {\n  return this.labels_;\n};\n\nif (typeof process !== 'undefined' && process.env.NODE_ENV != 'production') {\n// For \"production\" code, this gets removed by uglifyjs.\n\n/**\n * Validate all options.\n * This requires OPTIONS_REFERENCE, which is only available in debug builds.\n * @private\n */\nDygraphOptions.prototype.validateOptions_ = function() {\n  if (typeof OPTIONS_REFERENCE === 'undefined') {\n    throw 'Called validateOptions_ in prod build.';\n  }\n\n  var that = this;\n  var validateOption = function(optionName) {\n    if (!OPTIONS_REFERENCE[optionName]) {\n      that.warnInvalidOption_(optionName);\n    }\n  };\n\n  var optionsDicts = [this.xAxis_.options,\n                      this.yAxes_[0].options,\n                      this.yAxes_[1] && this.yAxes_[1].options,\n                      this.global_,\n                      this.user_,\n                      this.highlightSeries_];\n  var names = this.seriesNames();\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (this.series_.hasOwnProperty(name)) {\n      optionsDicts.push(this.series_[name].options);\n    }\n  }\n  for (var i = 0; i < optionsDicts.length; i++) {\n    var dict = optionsDicts[i];\n    if (!dict) continue;\n    for (var optionName in dict) {\n      if (dict.hasOwnProperty(optionName)) {\n        validateOption(optionName);\n      }\n    }\n  }\n};\n\nvar WARNINGS = {};  // Only show any particular warning once.\n\n/**\n * Logs a warning about invalid options.\n * TODO: make this throw for testing\n * @private\n */\nDygraphOptions.prototype.warnInvalidOption_ = function(optionName) {\n  if (!WARNINGS[optionName]) {\n    WARNINGS[optionName] = true;\n    var isSeries = (this.labels_.indexOf(optionName) >= 0);\n    if (isSeries) {\n      console.warn('Use new-style per-series options (saw ' + optionName + ' as top-level options key). See http://blog.dygraphs.com/2012/12/the-new-and-better-way-to-specify.html (The New and Better Way to Specify Series and Axis Options).');\n    } else {\n      console.warn('Unknown option ' + optionName + ' (see https://dygraphs.com/options.html for the full list of options)');\n    }\n    throw \"invalid option \" + optionName;\n  }\n};\n\n// Reset list of previously-shown warnings. Used for testing.\nDygraphOptions.resetWarnings_ = function() {\n  WARNINGS = {};\n};\n\n}\n\nexport default DygraphOptions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}