{"ast":null,"code":"import * as DomEvent from './DomEvent';\n\n/*\r\n * Extends the event handling code with double tap support for mobile browsers.\r\n *\r\n * Note: currently most browsers fire native dblclick, with only a few exceptions\r\n * (see https://github.com/Leaflet/Leaflet/issues/7012#issuecomment-595087386)\r\n */\n\nfunction makeDblclick(event) {\n  // in modern browsers `type` cannot be just overridden:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only\n  var newEvent = {},\n    prop,\n    i;\n  for (i in event) {\n    prop = event[i];\n    newEvent[i] = prop && prop.bind ? prop.bind(event) : prop;\n  }\n  event = newEvent;\n  newEvent.type = 'dblclick';\n  newEvent.detail = 2;\n  newEvent.isTrusted = false;\n  newEvent._simulated = true; // for debug purposes\n  return newEvent;\n}\nvar delay = 200;\nexport function addDoubleTapListener(obj, handler) {\n  // Most browsers handle double tap natively\n  obj.addEventListener('dblclick', handler);\n\n  // On some platforms the browser doesn't fire native dblclicks for touch events.\n  // It seems that in all such cases `detail` property of `click` event is always `1`.\n  // So here we rely on that fact to avoid excessive 'dblclick' simulation when not needed.\n  var last = 0,\n    detail;\n  function simDblclick(e) {\n    if (e.detail !== 1) {\n      detail = e.detail; // keep in sync to avoid false dblclick in some cases\n      return;\n    }\n    if (e.pointerType === 'mouse' || e.sourceCapabilities && !e.sourceCapabilities.firesTouchEvents) {\n      return;\n    }\n\n    // When clicking on an <input>, the browser generates a click on its\n    // <label> (and vice versa) triggering two clicks in quick succession.\n    // This ignores clicks on elements which are a label with a 'for'\n    // attribute (or children of such a label), but not children of\n    // a <input>.\n    var path = DomEvent.getPropagationPath(e);\n    if (path.some(function (el) {\n      return el instanceof HTMLLabelElement && el.attributes.for;\n    }) && !path.some(function (el) {\n      return el instanceof HTMLInputElement || el instanceof HTMLSelectElement;\n    })) {\n      return;\n    }\n    var now = Date.now();\n    if (now - last <= delay) {\n      detail++;\n      if (detail === 2) {\n        handler(makeDblclick(e));\n      }\n    } else {\n      detail = 1;\n    }\n    last = now;\n  }\n  obj.addEventListener('click', simDblclick);\n  return {\n    dblclick: handler,\n    simDblclick: simDblclick\n  };\n}\nexport function removeDoubleTapListener(obj, handlers) {\n  obj.removeEventListener('dblclick', handlers.dblclick);\n  obj.removeEventListener('click', handlers.simDblclick);\n}","map":{"version":3,"names":["DomEvent","makeDblclick","event","newEvent","prop","i","bind","type","detail","isTrusted","_simulated","delay","addDoubleTapListener","obj","handler","addEventListener","last","simDblclick","e","pointerType","sourceCapabilities","firesTouchEvents","path","getPropagationPath","some","el","HTMLLabelElement","attributes","for","HTMLInputElement","HTMLSelectElement","now","Date","dblclick","removeDoubleTapListener","handlers","removeEventListener"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontEnd/node_modules/leaflet/src/dom/DomEvent.DoubleTap.js"],"sourcesContent":["import * as DomEvent from './DomEvent';\r\n\r\n/*\r\n * Extends the event handling code with double tap support for mobile browsers.\r\n *\r\n * Note: currently most browsers fire native dblclick, with only a few exceptions\r\n * (see https://github.com/Leaflet/Leaflet/issues/7012#issuecomment-595087386)\r\n */\r\n\r\nfunction makeDblclick(event) {\r\n\t// in modern browsers `type` cannot be just overridden:\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only\r\n\tvar newEvent = {},\r\n\t    prop, i;\r\n\tfor (i in event) {\r\n\t\tprop = event[i];\r\n\t\tnewEvent[i] = prop && prop.bind ? prop.bind(event) : prop;\r\n\t}\r\n\tevent = newEvent;\r\n\tnewEvent.type = 'dblclick';\r\n\tnewEvent.detail = 2;\r\n\tnewEvent.isTrusted = false;\r\n\tnewEvent._simulated = true; // for debug purposes\r\n\treturn newEvent;\r\n}\r\n\r\nvar delay = 200;\r\nexport function addDoubleTapListener(obj, handler) {\r\n\t// Most browsers handle double tap natively\r\n\tobj.addEventListener('dblclick', handler);\r\n\r\n\t// On some platforms the browser doesn't fire native dblclicks for touch events.\r\n\t// It seems that in all such cases `detail` property of `click` event is always `1`.\r\n\t// So here we rely on that fact to avoid excessive 'dblclick' simulation when not needed.\r\n\tvar last = 0,\r\n\t    detail;\r\n\tfunction simDblclick(e) {\r\n\t\tif (e.detail !== 1) {\r\n\t\t\tdetail = e.detail; // keep in sync to avoid false dblclick in some cases\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (e.pointerType === 'mouse' ||\r\n\t\t\t(e.sourceCapabilities && !e.sourceCapabilities.firesTouchEvents)) {\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// When clicking on an <input>, the browser generates a click on its\r\n\t\t// <label> (and vice versa) triggering two clicks in quick succession.\r\n\t\t// This ignores clicks on elements which are a label with a 'for'\r\n\t\t// attribute (or children of such a label), but not children of\r\n\t\t// a <input>.\r\n\t\tvar path = DomEvent.getPropagationPath(e);\r\n\t\tif (path.some(function (el) {\r\n\t\t\treturn el instanceof HTMLLabelElement && el.attributes.for;\r\n\t\t}) &&\r\n\t\t\t!path.some(function (el) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\tel instanceof HTMLInputElement ||\r\n\t\t\t\t\tel instanceof HTMLSelectElement\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar now = Date.now();\r\n\t\tif (now - last <= delay) {\r\n\t\t\tdetail++;\r\n\t\t\tif (detail === 2) {\r\n\t\t\t\thandler(makeDblclick(e));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdetail = 1;\r\n\t\t}\r\n\t\tlast = now;\r\n\t}\r\n\r\n\tobj.addEventListener('click', simDblclick);\r\n\r\n\treturn {\r\n\t\tdblclick: handler,\r\n\t\tsimDblclick: simDblclick\r\n\t};\r\n}\r\n\r\nexport function removeDoubleTapListener(obj, handlers) {\r\n\tobj.removeEventListener('dblclick', handlers.dblclick);\r\n\tobj.removeEventListener('click', handlers.simDblclick);\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,YAAY;;AAEtC;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC5B;EACA;EACA,IAAIC,QAAQ,GAAG,CAAC,CAAC;IACbC,IAAI;IAAEC,CAAC;EACX,KAAKA,CAAC,IAAIH,KAAK,EAAE;IAChBE,IAAI,GAAGF,KAAK,CAACG,CAAC,CAAC;IACfF,QAAQ,CAACE,CAAC,CAAC,GAAGD,IAAI,IAAIA,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACE,IAAI,CAACJ,KAAK,CAAC,GAAGE,IAAI;EAC1D;EACAF,KAAK,GAAGC,QAAQ;EAChBA,QAAQ,CAACI,IAAI,GAAG,UAAU;EAC1BJ,QAAQ,CAACK,MAAM,GAAG,CAAC;EACnBL,QAAQ,CAACM,SAAS,GAAG,KAAK;EAC1BN,QAAQ,CAACO,UAAU,GAAG,IAAI,CAAC,CAAC;EAC5B,OAAOP,QAAQ;AAChB;AAEA,IAAIQ,KAAK,GAAG,GAAG;AACf,OAAO,SAASC,oBAAoBA,CAACC,GAAG,EAAEC,OAAO,EAAE;EAClD;EACAD,GAAG,CAACE,gBAAgB,CAAC,UAAU,EAAED,OAAO,CAAC;;EAEzC;EACA;EACA;EACA,IAAIE,IAAI,GAAG,CAAC;IACRR,MAAM;EACV,SAASS,WAAWA,CAACC,CAAC,EAAE;IACvB,IAAIA,CAAC,CAACV,MAAM,KAAK,CAAC,EAAE;MACnBA,MAAM,GAAGU,CAAC,CAACV,MAAM,CAAC,CAAC;MACnB;IACD;IAEA,IAAIU,CAAC,CAACC,WAAW,KAAK,OAAO,IAC3BD,CAAC,CAACE,kBAAkB,IAAI,CAACF,CAAC,CAACE,kBAAkB,CAACC,gBAAiB,EAAE;MAElE;IACD;;IAEA;IACA;IACA;IACA;IACA;IACA,IAAIC,IAAI,GAAGtB,QAAQ,CAACuB,kBAAkB,CAACL,CAAC,CAAC;IACzC,IAAII,IAAI,CAACE,IAAI,CAAC,UAAUC,EAAE,EAAE;MAC3B,OAAOA,EAAE,YAAYC,gBAAgB,IAAID,EAAE,CAACE,UAAU,CAACC,GAAG;IAC3D,CAAC,CAAC,IACD,CAACN,IAAI,CAACE,IAAI,CAAC,UAAUC,EAAE,EAAE;MACxB,OACCA,EAAE,YAAYI,gBAAgB,IAC9BJ,EAAE,YAAYK,iBAAiB;IAEjC,CAAC,CAAC,EACD;MACD;IACD;IAEA,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;IACpB,IAAIA,GAAG,GAAGf,IAAI,IAAIL,KAAK,EAAE;MACxBH,MAAM,EAAE;MACR,IAAIA,MAAM,KAAK,CAAC,EAAE;QACjBM,OAAO,CAACb,YAAY,CAACiB,CAAC,CAAC,CAAC;MACzB;IACD,CAAC,MAAM;MACNV,MAAM,GAAG,CAAC;IACX;IACAQ,IAAI,GAAGe,GAAG;EACX;EAEAlB,GAAG,CAACE,gBAAgB,CAAC,OAAO,EAAEE,WAAW,CAAC;EAE1C,OAAO;IACNgB,QAAQ,EAAEnB,OAAO;IACjBG,WAAW,EAAEA;EACd,CAAC;AACF;AAEA,OAAO,SAASiB,uBAAuBA,CAACrB,GAAG,EAAEsB,QAAQ,EAAE;EACtDtB,GAAG,CAACuB,mBAAmB,CAAC,UAAU,EAAED,QAAQ,CAACF,QAAQ,CAAC;EACtDpB,GAAG,CAACuB,mBAAmB,CAAC,OAAO,EAAED,QAAQ,CAAClB,WAAW,CAAC;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}