{"ast":null,"code":"var _jsxFileName = \"/Users/fneffati/Documents/Classes/TBENVDASH/frontEnd/tbenv/src/components/TimeSeries.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Dygraph from 'dygraphs';\nimport \"../styling/TimeSeries.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TwitterTimeSeries = () => {\n  _s();\n  const graphRef = useRef(null);\n  const [data, setData] = useState();\n  const fetchTweets = () => {\n    fetch('/get_tweets', {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify([])\n    }).then(response => response.json()).then(data => {\n      setData(data);\n    }).catch(error => console.error(error));\n  };\n  useEffect(() => {\n    if (!data) {\n      fetchTweets();\n    }\n  }, [data]);\n  useEffect(() => {\n    if (graphRef.current && data) {\n      const tweetCounts = {};\n      data.forEach(tweet => {\n        const date = new Date(tweet.time.$date);\n        const dateString = date.toISOString().split('T')[0]; // Extract YYYY-MM-DD\n        if (!tweetCounts[dateString]) {\n          tweetCounts[dateString] = 0;\n        }\n        tweetCounts[dateString]++;\n      });\n      const dyData = Object.entries(tweetCounts).map(([date, count]) => ({\n        date: new Date(date),\n        count\n      }));\n      dyData.sort((a, b) => a.date - b.date);\n      const formattedData = dyData.map(({\n        date,\n        count\n      }) => [date, count]);\n      new Dygraph(graphRef.current, formattedData, {\n        labels: ['Date', 'Tweet Count'],\n        showRoller: false,\n        rollPeriod: 0,\n        width: 500,\n        height: 340\n      });\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: graphRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 12\n  }, this);\n};\n_s(TwitterTimeSeries, \"Fl9ZbfdbY3aAindXj2Q1yU4aRH8=\");\n_c = TwitterTimeSeries;\nexport default TwitterTimeSeries;\nvar _c;\n$RefreshReg$(_c, \"TwitterTimeSeries\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Dygraph","jsxDEV","_jsxDEV","TwitterTimeSeries","_s","graphRef","data","setData","fetchTweets","fetch","headers","body","JSON","stringify","then","response","json","catch","error","console","current","tweetCounts","forEach","tweet","date","Date","time","$date","dateString","toISOString","split","dyData","Object","entries","map","count","sort","a","b","formattedData","labels","showRoller","rollPeriod","width","height","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fneffati/Documents/Classes/TBENVDASH/frontEnd/tbenv/src/components/TimeSeries.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport Dygraph from 'dygraphs';\nimport \"../styling/TimeSeries.css\"\n\nconst TwitterTimeSeries = () => {\n    const graphRef = useRef(null);\n\n    const [data, setData] = useState()\n\n    const fetchTweets = () => {\n        fetch('/get_tweets',\n            {\n                'method':'POST',\n                headers : {\n                    'Content-Type':'application/json'\n                },\n                body: JSON.stringify([])\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                setData(data);\n            })\n            .catch((error) => console.error(error));\n    };\n\n    useEffect(() =>{\n        if (!data){\n            fetchTweets()\n        }\n    },[data])\n\n    useEffect(() => {\n        if (graphRef.current && data) {\n            const tweetCounts = {};\n            data.forEach((tweet) => {\n                const date = new Date(tweet.time.$date);\n                const dateString = date.toISOString().split('T')[0]; // Extract YYYY-MM-DD\n                if (!tweetCounts[dateString]) {\n                    tweetCounts[dateString] = 0;\n                }\n                tweetCounts[dateString]++;\n            });\n\n            const dyData = Object.entries(tweetCounts).map(([date, count]) => ({ date: new Date(date), count }));\n\n            dyData.sort((a, b) => a.date - b.date);\n\n            const formattedData = dyData.map(({ date, count }) => [date, count]);\n\n            new Dygraph(graphRef.current, formattedData, {\n                labels: ['Date', 'Tweet Count'],\n                showRoller: false,\n                rollPeriod: 0,\n                width: 500,\n                height: 340\n            });\n        }\n    }, [data]);\n\n\n\n    return <div ref={graphRef} style={{width:'100%', height:'100%'}}></div>;\n\n};\n\nexport default TwitterTimeSeries;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}