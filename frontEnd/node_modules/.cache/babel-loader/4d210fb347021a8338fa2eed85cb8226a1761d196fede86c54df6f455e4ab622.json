{"ast":null,"code":"var _jsxFileName = \"/Users/fneffati/Documents/Classes/TBRTD/frontend/src/components/FloridaMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, GeoJSON, Marker } from 'react-leaflet';\nimport floridaCounties from './geojson-fl-counties-fips.json';\nimport \"../styling/FloridaMap.css\";\nimport L from 'leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FloridaMap = ({\n  date,\n  account_types\n}) => {\n  _s();\n  const [tweetCounts, setTweetCounts] = useState(0);\n  const fetchCounts = () => {\n    fetch('/get_counts', {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify([date, account_types])\n    }).then(response => response.json()).then(data => {\n      setTweetCounts(data.counts);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  useEffect(() => {\n    fetchCounts();\n  }, [date, account_types]);\n  const normalizeTweetCounts = tweetCounts => {\n    const maxCount = Math.max(...Object.values(tweetCounts));\n    const normalizedCounts = {};\n    for (const county in tweetCounts) {\n      normalizedCounts[county] = tweetCounts[county] / maxCount;\n    }\n    return normalizedCounts;\n  };\n  const normalizedTweetCounts = normalizeTweetCounts(tweetCounts);\n  const getColor = normalizedCount => {\n    const intensity = Math.round(255 * normalizedCount);\n    return `rgb(${255}, ${255 - intensity}, ${255 - intensity})`;\n  };\n  const style = feature => {\n    const countyName = feature.properties.NAME;\n    const tweetCount = normalizedTweetCounts[countyName] || 0;\n    const fillColor = getColor(tweetCount);\n    return {\n      fillColor: fillColor,\n      fillOpacity: 0.5,\n      color: 'white',\n      weight: 5\n    };\n  };\n  const [hoverInfo, setHoverInfo] = useState({\n    show: false,\n    county: '',\n    x: 0,\n    y: 0\n  });\n  const onEachFeature = (county, layer) => {\n    layer.on('mouseover', function (e) {\n      const mapContainerRect = document.querySelector('.map_div').getBoundingClientRect();\n      const x = e.originalEvent.clientX - mapContainerRect.left;\n      const y = e.originalEvent.clientY - mapContainerRect.top;\n      setHoverInfo({\n        show: true,\n        county: county.properties.NAME,\n        x: x,\n        y: y\n      });\n    });\n    layer.on('mouseout', function () {\n      setHoverInfo({\n        show: false,\n        county: '',\n        x: 0,\n        y: 0\n      });\n    });\n  };\n  const countyMarkers = floridaCounties.features.map((feature, index) => {\n    const countyName = feature.properties.NAME;\n    const coordinates = feature.geometry.coordinates[0]; // Assuming first set of coordinates is outer boundary\n    const centroid = calculateCentroid(coordinates); // Function to calculate centroid\n\n    return /*#__PURE__*/_jsxDEV(Marker, {\n      position: [centroid[0], centroid[1]] // Corrected order: [latitude, longitude]\n      ,\n      icon: L.divIcon({\n        className: 'county-label',\n        html: `<div>${countyName}</div>`\n      })\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map_div\",\n    children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [27.766279, -82.686783],\n      zoom: 8,\n      style: {\n        height: 650,\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: floridaCounties,\n        style: style,\n        onEachFeature: onEachFeature\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), countyMarkers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), hoverInfo.show && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-hover-popup\",\n      style: {\n        left: hoverInfo.x + 900,\n        top: hoverInfo.y + 200\n      },\n      children: [hoverInfo.county, \" - Tweets: \", tweetCounts[hoverInfo.county] || 0]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n// Function to calculate centroid of polygon coordinates\n_s(FloridaMap, \"fhACStYNKvcJTHzl3+M2kVxA4yg=\");\n_c = FloridaMap;\nconst calculateCentroid = coordinates => {\n  if (!coordinates || !Array.isArray(coordinates) || coordinates.length === 0) {\n    return [0, 0]; // Return default coordinates if no valid coordinates are provided\n  }\n  let centroid = [0, 0];\n  const numPoints = coordinates.length;\n  for (let i = 0; i < numPoints; i++) {\n    if (!coordinates[i] || !Array.isArray(coordinates[i]) || coordinates[i].length !== 2) {\n      continue; // Skip invalid coordinates\n    }\n    centroid[0] += coordinates[i][1]; // Latitude\n    centroid[1] += coordinates[i][0]; // Longitude\n  }\n  centroid[0] /= numPoints;\n  centroid[1] /= numPoints;\n  return centroid;\n};\nexport default FloridaMap;\nvar _c;\n$RefreshReg$(_c, \"FloridaMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","GeoJSON","Marker","floridaCounties","L","jsxDEV","_jsxDEV","FloridaMap","date","account_types","_s","tweetCounts","setTweetCounts","fetchCounts","fetch","headers","body","JSON","stringify","then","response","json","data","counts","catch","error","console","normalizeTweetCounts","maxCount","Math","max","Object","values","normalizedCounts","county","normalizedTweetCounts","getColor","normalizedCount","intensity","round","style","feature","countyName","properties","NAME","tweetCount","fillColor","fillOpacity","color","weight","hoverInfo","setHoverInfo","show","x","y","onEachFeature","layer","on","e","mapContainerRect","document","querySelector","getBoundingClientRect","originalEvent","clientX","left","clientY","top","countyMarkers","features","map","index","coordinates","geometry","centroid","calculateCentroid","position","icon","divIcon","className","html","fileName","_jsxFileName","lineNumber","columnNumber","children","center","zoom","height","width","url","_c","Array","isArray","length","numPoints","i","$RefreshReg$"],"sources":["/Users/fneffati/Documents/Classes/TBRTD/frontend/src/components/FloridaMap.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {MapContainer, TileLayer, GeoJSON, Marker} from 'react-leaflet';\nimport floridaCounties from './geojson-fl-counties-fips.json';\nimport \"../styling/FloridaMap.css\";\nimport L from 'leaflet';\n\nconst FloridaMap = ({ date, account_types }) => {\n\n    const [tweetCounts, setTweetCounts] = useState(0)\n    const fetchCounts = () => {\n        fetch('/get_counts',\n            {\n                'method':'POST',\n                headers : {\n                    'Content-Type':'application/json'\n                },\n                body: JSON.stringify([date, account_types])\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                setTweetCounts(data.counts)\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    };\n\n    useEffect(() => {\n        fetchCounts();\n    }, [date, account_types]);\n\n\n    const normalizeTweetCounts = (tweetCounts) => {\n        const maxCount = Math.max(...Object.values(tweetCounts));\n        const normalizedCounts = {};\n\n        for (const county in tweetCounts) {\n            normalizedCounts[county] = tweetCounts[county] / maxCount;\n        }\n\n        return normalizedCounts;\n    };\n\n    const normalizedTweetCounts = normalizeTweetCounts(tweetCounts);\n\n    const getColor = (normalizedCount) => {\n        const intensity = Math.round(255 * normalizedCount);\n        return `rgb(${255}, ${255 - intensity}, ${255 - intensity})`;\n    };\n\n    const style = (feature) => {\n        const countyName = feature.properties.NAME;\n        const tweetCount = normalizedTweetCounts[countyName] || 0;\n        const fillColor = getColor(tweetCount);\n\n        return {\n            fillColor: fillColor,\n            fillOpacity: 0.5,\n            color: 'white',\n            weight: 5,\n        };\n    };\n    const [hoverInfo, setHoverInfo] = useState({ show: false, county: '', x: 0, y: 0 });\n    const onEachFeature = (county, layer) => {\n        layer.on('mouseover', function (e) {\n            const mapContainerRect = document.querySelector('.map_div').getBoundingClientRect();\n            const x = e.originalEvent.clientX - mapContainerRect.left;\n            const y = e.originalEvent.clientY - mapContainerRect.top;\n            setHoverInfo({ show: true, county: county.properties.NAME, x: x, y: y });\n        });\n\n        layer.on('mouseout', function () {\n            setHoverInfo({ show: false, county: '', x: 0, y: 0 });\n        });\n    };\n\n    const countyMarkers = floridaCounties.features.map((feature, index) => {\n        const countyName = feature.properties.NAME;\n        const coordinates = feature.geometry.coordinates[0]; // Assuming first set of coordinates is outer boundary\n        const centroid = calculateCentroid(coordinates); // Function to calculate centroid\n\n        return (\n            <Marker\n                key={index}\n                position={[centroid[0], centroid[1]]} // Corrected order: [latitude, longitude]\n                icon={L.divIcon({\n                    className: 'county-label',\n                    html: `<div>${countyName}</div>`\n                })}\n            />\n        );\n    });\n\n    return (\n        <div className=\"map_div\">\n            <MapContainer center={[27.766279, -82.686783]} zoom={8} style={{ height: 650, width: '100%' }}>\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n                <GeoJSON\n                    data={floridaCounties}\n                    style={style}\n                    onEachFeature={onEachFeature}\n                />\n                {countyMarkers}\n            </MapContainer>\n            {hoverInfo.show && (\n                <div\n                    className=\"map-hover-popup\"\n                    style={{ left: hoverInfo.x+900, top: hoverInfo.y+200 }}\n                >\n                    {hoverInfo.county} - Tweets: {tweetCounts[hoverInfo.county] || 0}\n                </div>\n            )}\n        </div>\n    );\n};\n\n// Function to calculate centroid of polygon coordinates\nconst calculateCentroid = (coordinates) => {\n    if (!coordinates || !Array.isArray(coordinates) || coordinates.length === 0) {\n        return [0, 0]; // Return default coordinates if no valid coordinates are provided\n    }\n\n    let centroid = [0, 0];\n    const numPoints = coordinates.length;\n\n    for (let i = 0; i < numPoints; i++) {\n        if (!coordinates[i] || !Array.isArray(coordinates[i]) || coordinates[i].length !== 2) {\n            continue; // Skip invalid coordinates\n        }\n\n        centroid[0] += coordinates[i][1]; // Latitude\n        centroid[1] += coordinates[i][0]; // Longitude\n    }\n\n    centroid[0] /= numPoints;\n    centroid[1] /= numPoints;\n\n    return centroid;\n};\n\n\n\n\nexport default FloridaMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}