{"ast":null,"code":"var _jsxFileName = \"/Users/fneffati/Documents/Classes/TBENVDASH/frontEnd/tbenv/src/components/WordCloud.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo, useCallback } from \"react\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport debounce from \"lodash/debounce\";\nimport 'tippy.js/dist/tippy.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordCloud = ({\n  cloud_type,\n  tweets,\n  onWordCloudClick\n}) => {\n  _s();\n  const [words, setWords] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fetchTerms = useCallback(debounce(() => {\n    setLoading(true);\n    fetch(\"/get_terms\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify([cloud_type, tweets])\n    }).then(response => response.json()).then(data => {\n      setWords(data.value1);\n      setLoading(false);\n    }).catch(error => {\n      console.error(error);\n      setLoading(false);\n    });\n  }, 500), [cloud_type, tweets]);\n  useEffect(() => {\n    if (tweets.length > 0) {\n      fetchTerms();\n    }\n    if (tweets.length === 0) {\n      setWords([{\n        text: \"NO TWEETS AVAILABLE\",\n        value: 20\n      }]);\n    }\n  }, [fetchTerms, tweets]);\n  const options = useMemo(() => ({\n    rotations: 1,\n    rotationAngles: [0],\n    fontSizes: [15, 60],\n    colors: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\n    enableTooltip: true,\n    deterministic: true,\n    fontFamily: \"impact\",\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    padding: 1,\n    scale: \"sqrt\",\n    spiral: \"archimedean\",\n    transitionDuration: 1000\n  }), []);\n  const callbacks = useMemo(() => ({\n    onWordClick: word => onWordCloudClick('#' + word.text)\n  }), []);\n  const size = useMemo(() => [500, 600], []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-cloud-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-cloud\",\n      children: /*#__PURE__*/_jsxDEV(ReactWordcloud, {\n        words: words,\n        options: options,\n        size: size,\n        padding: 0,\n        callbacks: callbacks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(WordCloud, \"eqUVpWnPBpSHQ+PVxxbqCtAohfI=\");\n_c = WordCloud;\nexport default WordCloud;\nvar _c;\n$RefreshReg$(_c, \"WordCloud\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","useCallback","ReactWordcloud","debounce","jsxDEV","_jsxDEV","WordCloud","cloud_type","tweets","onWordCloudClick","_s","words","setWords","loading","setLoading","fetchTerms","fetch","method","headers","body","JSON","stringify","then","response","json","data","value1","catch","error","console","length","text","value","options","rotations","rotationAngles","fontSizes","colors","enableTooltip","deterministic","fontFamily","fontStyle","fontWeight","padding","scale","spiral","transitionDuration","callbacks","onWordClick","word","size","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fneffati/Documents/Classes/TBENVDASH/frontEnd/tbenv/src/components/WordCloud.js"],"sourcesContent":["import React, { useEffect, useState, useMemo, useCallback } from \"react\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport debounce from \"lodash/debounce\";\nimport 'tippy.js/dist/tippy.css';\n\nconst WordCloud = ({ cloud_type, tweets, onWordCloudClick}) => {\n    const [words, setWords] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const fetchTerms = useCallback(\n        debounce(() => {\n            setLoading(true);\n            fetch(\"/get_terms\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify([cloud_type, tweets]),\n            })\n                .then((response) => response.json())\n                .then((data) => {\n                    setWords(data.value1);\n                    setLoading(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    setLoading(false);\n                });\n        }, 500),\n        [cloud_type, tweets]\n    );\n\n    useEffect(() => {\n        if (tweets.length > 0) {\n            fetchTerms();\n        }\n\n        if (tweets.length === 0) {\n            setWords([{\n                text: \"NO TWEETS AVAILABLE\",\n                value: 20\n            }])\n        }\n    }, [fetchTerms, tweets]);\n\n    const options = useMemo(\n        () => ({\n            rotations: 1,\n            rotationAngles: [0],\n            fontSizes: [15, 60],\n            colors: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\n            enableTooltip: true,\n            deterministic: true,\n            fontFamily: \"impact\",\n            fontStyle: \"normal\",\n            fontWeight: \"normal\",\n            padding: 1,\n            scale: \"sqrt\",\n            spiral: \"archimedean\",\n            transitionDuration: 1000,\n        }),\n        []\n    );\n\n    const callbacks = useMemo(\n        () => ({\n            onWordClick: (word) => onWordCloudClick('#'+word.text)\n        }),\n        []\n    );\n\n    const size = useMemo(() => [500, 600], []);\n\n    return (\n        <div className=\"word-cloud-container\">\n            <div className=\"loading\">{loading && <p>Loading...</p>}</div>\n            <div className=\"word-cloud\">\n                <ReactWordcloud  words={words} options={options} size={size} padding={0} callbacks={callbacks}/>\n            </div>\n        </div>\n    );\n};\n\nexport default WordCloud;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}